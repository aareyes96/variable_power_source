
variable_power_source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a34c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d3c  0800a460  0800a460  0001a460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d19c  0800d19c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d19c  0800d19c  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1a4  0800d1a4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1a4  0800d1a4  0001d1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  200001f8  0800d3a4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800d3a4  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012300  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a58  00000000  00000000  00032521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00034f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016755  00000000  00000000  00036ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001153c  00000000  00000000  0004d61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000791fe  00000000  00000000  0005eb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7d57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  000d7dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a444 	.word	0x0800a444

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800a444 	.word	0x0800a444

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__gesf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cd4:	e006      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__lesf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpsf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d011      	beq.n	8000d20 <__cmpsf2+0x40>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d02:	bf18      	it	ne
 8000d04:	ea90 0f01 	teqne	r0, r1
 8000d08:	bf58      	it	pl
 8000d0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d0e:	bf88      	it	hi
 8000d10:	17c8      	asrhi	r0, r1, #31
 8000d12:	bf38      	it	cc
 8000d14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d18:	bf18      	it	ne
 8000d1a:	f040 0001 	orrne.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d24:	d102      	bne.n	8000d2c <__cmpsf2+0x4c>
 8000d26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d2a:	d105      	bne.n	8000d38 <__cmpsf2+0x58>
 8000d2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d30:	d1e4      	bne.n	8000cfc <__cmpsf2+0x1c>
 8000d32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d36:	d0e1      	beq.n	8000cfc <__cmpsf2+0x1c>
 8000d38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cfrcmple>:
 8000d40:	4684      	mov	ip, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4661      	mov	r1, ip
 8000d46:	e7ff      	b.n	8000d48 <__aeabi_cfcmpeq>

08000d48 <__aeabi_cfcmpeq>:
 8000d48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d4a:	f7ff ffc9 	bl	8000ce0 <__cmpsf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d58 <__aeabi_fcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_fcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffd2 	bl	8000d40 <__aeabi_cfrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc8 	bl	8000d40 <__aeabi_cfrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b9a6 	b.w	8001120 <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f83e 	bl	8000e5c <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__aeabi_d2lz>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	460c      	mov	r4, r1
 8000df0:	4605      	mov	r5, r0
 8000df2:	4621      	mov	r1, r4
 8000df4:	4628      	mov	r0, r5
 8000df6:	2200      	movs	r2, #0
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f7ff fe93 	bl	8000b24 <__aeabi_dcmplt>
 8000dfe:	b928      	cbnz	r0, 8000e0c <__aeabi_d2lz+0x20>
 8000e00:	4628      	mov	r0, r5
 8000e02:	4621      	mov	r1, r4
 8000e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e08:	f000 b80a 	b.w	8000e20 <__aeabi_d2ulz>
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e12:	f000 f805 	bl	8000e20 <__aeabi_d2ulz>
 8000e16:	4240      	negs	r0, r0
 8000e18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1c:	bd38      	pop	{r3, r4, r5, pc}
 8000e1e:	bf00      	nop

08000e20 <__aeabi_d2ulz>:
 8000e20:	b5d0      	push	{r4, r6, r7, lr}
 8000e22:	2200      	movs	r2, #0
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <__aeabi_d2ulz+0x34>)
 8000e26:	4606      	mov	r6, r0
 8000e28:	460f      	mov	r7, r1
 8000e2a:	f7ff fc09 	bl	8000640 <__aeabi_dmul>
 8000e2e:	f7ff fedf 	bl	8000bf0 <__aeabi_d2uiz>
 8000e32:	4604      	mov	r4, r0
 8000e34:	f7ff fb8a 	bl	800054c <__aeabi_ui2d>
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <__aeabi_d2ulz+0x38>)
 8000e3c:	f7ff fc00 	bl	8000640 <__aeabi_dmul>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4630      	mov	r0, r6
 8000e46:	4639      	mov	r1, r7
 8000e48:	f7ff fa42 	bl	80002d0 <__aeabi_dsub>
 8000e4c:	f7ff fed0 	bl	8000bf0 <__aeabi_d2uiz>
 8000e50:	4621      	mov	r1, r4
 8000e52:	bdd0      	pop	{r4, r6, r7, pc}
 8000e54:	3df00000 	.word	0x3df00000
 8000e58:	41f00000 	.word	0x41f00000

08000e5c <__udivmoddi4>:
 8000e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e60:	9e08      	ldr	r6, [sp, #32]
 8000e62:	460d      	mov	r5, r1
 8000e64:	4604      	mov	r4, r0
 8000e66:	468e      	mov	lr, r1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f040 8083 	bne.w	8000f74 <__udivmoddi4+0x118>
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	4617      	mov	r7, r2
 8000e72:	d947      	bls.n	8000f04 <__udivmoddi4+0xa8>
 8000e74:	fab2 f382 	clz	r3, r2
 8000e78:	b14b      	cbz	r3, 8000e8e <__udivmoddi4+0x32>
 8000e7a:	f1c3 0120 	rsb	r1, r3, #32
 8000e7e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000e82:	fa20 f101 	lsr.w	r1, r0, r1
 8000e86:	409f      	lsls	r7, r3
 8000e88:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e8c:	409c      	lsls	r4, r3
 8000e8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e92:	fbbe fcf8 	udiv	ip, lr, r8
 8000e96:	fa1f f987 	uxth.w	r9, r7
 8000e9a:	fb08 e21c 	mls	r2, r8, ip, lr
 8000e9e:	fb0c f009 	mul.w	r0, ip, r9
 8000ea2:	0c21      	lsrs	r1, r4, #16
 8000ea4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ea8:	4290      	cmp	r0, r2
 8000eaa:	d90a      	bls.n	8000ec2 <__udivmoddi4+0x66>
 8000eac:	18ba      	adds	r2, r7, r2
 8000eae:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000eb2:	f080 8118 	bcs.w	80010e6 <__udivmoddi4+0x28a>
 8000eb6:	4290      	cmp	r0, r2
 8000eb8:	f240 8115 	bls.w	80010e6 <__udivmoddi4+0x28a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	443a      	add	r2, r7
 8000ec2:	1a12      	subs	r2, r2, r0
 8000ec4:	fbb2 f0f8 	udiv	r0, r2, r8
 8000ec8:	fb08 2210 	mls	r2, r8, r0, r2
 8000ecc:	fb00 f109 	mul.w	r1, r0, r9
 8000ed0:	b2a4      	uxth	r4, r4
 8000ed2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	d909      	bls.n	8000eee <__udivmoddi4+0x92>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ee0:	f080 8103 	bcs.w	80010ea <__udivmoddi4+0x28e>
 8000ee4:	42a1      	cmp	r1, r4
 8000ee6:	f240 8100 	bls.w	80010ea <__udivmoddi4+0x28e>
 8000eea:	3802      	subs	r0, #2
 8000eec:	443c      	add	r4, r7
 8000eee:	1a64      	subs	r4, r4, r1
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef6:	b11e      	cbz	r6, 8000f00 <__udivmoddi4+0xa4>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	40dc      	lsrs	r4, r3
 8000efc:	e9c6 4200 	strd	r4, r2, [r6]
 8000f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f04:	b902      	cbnz	r2, 8000f08 <__udivmoddi4+0xac>
 8000f06:	deff      	udf	#255	; 0xff
 8000f08:	fab2 f382 	clz	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d14f      	bne.n	8000fb0 <__udivmoddi4+0x154>
 8000f10:	1a8d      	subs	r5, r1, r2
 8000f12:	2101      	movs	r1, #1
 8000f14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000f18:	fa1f f882 	uxth.w	r8, r2
 8000f1c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000f20:	fb0e 551c 	mls	r5, lr, ip, r5
 8000f24:	fb08 f00c 	mul.w	r0, r8, ip
 8000f28:	0c22      	lsrs	r2, r4, #16
 8000f2a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000f2e:	42a8      	cmp	r0, r5
 8000f30:	d907      	bls.n	8000f42 <__udivmoddi4+0xe6>
 8000f32:	197d      	adds	r5, r7, r5
 8000f34:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0xe4>
 8000f3a:	42a8      	cmp	r0, r5
 8000f3c:	f200 80e9 	bhi.w	8001112 <__udivmoddi4+0x2b6>
 8000f40:	4694      	mov	ip, r2
 8000f42:	1a2d      	subs	r5, r5, r0
 8000f44:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f48:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f4c:	fb08 f800 	mul.w	r8, r8, r0
 8000f50:	b2a4      	uxth	r4, r4
 8000f52:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f56:	45a0      	cmp	r8, r4
 8000f58:	d907      	bls.n	8000f6a <__udivmoddi4+0x10e>
 8000f5a:	193c      	adds	r4, r7, r4
 8000f5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f60:	d202      	bcs.n	8000f68 <__udivmoddi4+0x10c>
 8000f62:	45a0      	cmp	r8, r4
 8000f64:	f200 80d9 	bhi.w	800111a <__udivmoddi4+0x2be>
 8000f68:	4610      	mov	r0, r2
 8000f6a:	eba4 0408 	sub.w	r4, r4, r8
 8000f6e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f72:	e7c0      	b.n	8000ef6 <__udivmoddi4+0x9a>
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x12e>
 8000f78:	2e00      	cmp	r6, #0
 8000f7a:	f000 80b1 	beq.w	80010e0 <__udivmoddi4+0x284>
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e9c6 0500 	strd	r0, r5, [r6]
 8000f84:	4608      	mov	r0, r1
 8000f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8a:	fab3 f183 	clz	r1, r3
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d14b      	bne.n	800102a <__udivmoddi4+0x1ce>
 8000f92:	42ab      	cmp	r3, r5
 8000f94:	d302      	bcc.n	8000f9c <__udivmoddi4+0x140>
 8000f96:	4282      	cmp	r2, r0
 8000f98:	f200 80b9 	bhi.w	800110e <__udivmoddi4+0x2b2>
 8000f9c:	1a84      	subs	r4, r0, r2
 8000f9e:	eb65 0303 	sbc.w	r3, r5, r3
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	d0aa      	beq.n	8000f00 <__udivmoddi4+0xa4>
 8000faa:	e9c6 4e00 	strd	r4, lr, [r6]
 8000fae:	e7a7      	b.n	8000f00 <__udivmoddi4+0xa4>
 8000fb0:	409f      	lsls	r7, r3
 8000fb2:	f1c3 0220 	rsb	r2, r3, #32
 8000fb6:	40d1      	lsrs	r1, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc0:	fa1f f887 	uxth.w	r8, r7
 8000fc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fc8:	fa24 f202 	lsr.w	r2, r4, r2
 8000fcc:	409d      	lsls	r5, r3
 8000fce:	fb00 fc08 	mul.w	ip, r0, r8
 8000fd2:	432a      	orrs	r2, r5
 8000fd4:	0c15      	lsrs	r5, r2, #16
 8000fd6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000fda:	45ac      	cmp	ip, r5
 8000fdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000fe0:	d909      	bls.n	8000ff6 <__udivmoddi4+0x19a>
 8000fe2:	197d      	adds	r5, r7, r5
 8000fe4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fe8:	f080 808f 	bcs.w	800110a <__udivmoddi4+0x2ae>
 8000fec:	45ac      	cmp	ip, r5
 8000fee:	f240 808c 	bls.w	800110a <__udivmoddi4+0x2ae>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	443d      	add	r5, r7
 8000ff6:	eba5 050c 	sub.w	r5, r5, ip
 8000ffa:	fbb5 f1fe 	udiv	r1, r5, lr
 8000ffe:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001002:	fb01 f908 	mul.w	r9, r1, r8
 8001006:	b295      	uxth	r5, r2
 8001008:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800100c:	45a9      	cmp	r9, r5
 800100e:	d907      	bls.n	8001020 <__udivmoddi4+0x1c4>
 8001010:	197d      	adds	r5, r7, r5
 8001012:	f101 32ff 	add.w	r2, r1, #4294967295
 8001016:	d274      	bcs.n	8001102 <__udivmoddi4+0x2a6>
 8001018:	45a9      	cmp	r9, r5
 800101a:	d972      	bls.n	8001102 <__udivmoddi4+0x2a6>
 800101c:	3902      	subs	r1, #2
 800101e:	443d      	add	r5, r7
 8001020:	eba5 0509 	sub.w	r5, r5, r9
 8001024:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001028:	e778      	b.n	8000f1c <__udivmoddi4+0xc0>
 800102a:	f1c1 0720 	rsb	r7, r1, #32
 800102e:	408b      	lsls	r3, r1
 8001030:	fa22 fc07 	lsr.w	ip, r2, r7
 8001034:	ea4c 0c03 	orr.w	ip, ip, r3
 8001038:	fa25 f407 	lsr.w	r4, r5, r7
 800103c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001040:	fbb4 f9fe 	udiv	r9, r4, lr
 8001044:	fa1f f88c 	uxth.w	r8, ip
 8001048:	fb0e 4419 	mls	r4, lr, r9, r4
 800104c:	fa20 f307 	lsr.w	r3, r0, r7
 8001050:	fb09 fa08 	mul.w	sl, r9, r8
 8001054:	408d      	lsls	r5, r1
 8001056:	431d      	orrs	r5, r3
 8001058:	0c2b      	lsrs	r3, r5, #16
 800105a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800105e:	45a2      	cmp	sl, r4
 8001060:	fa02 f201 	lsl.w	r2, r2, r1
 8001064:	fa00 f301 	lsl.w	r3, r0, r1
 8001068:	d909      	bls.n	800107e <__udivmoddi4+0x222>
 800106a:	eb1c 0404 	adds.w	r4, ip, r4
 800106e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001072:	d248      	bcs.n	8001106 <__udivmoddi4+0x2aa>
 8001074:	45a2      	cmp	sl, r4
 8001076:	d946      	bls.n	8001106 <__udivmoddi4+0x2aa>
 8001078:	f1a9 0902 	sub.w	r9, r9, #2
 800107c:	4464      	add	r4, ip
 800107e:	eba4 040a 	sub.w	r4, r4, sl
 8001082:	fbb4 f0fe 	udiv	r0, r4, lr
 8001086:	fb0e 4410 	mls	r4, lr, r0, r4
 800108a:	fb00 fa08 	mul.w	sl, r0, r8
 800108e:	b2ad      	uxth	r5, r5
 8001090:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001094:	45a2      	cmp	sl, r4
 8001096:	d908      	bls.n	80010aa <__udivmoddi4+0x24e>
 8001098:	eb1c 0404 	adds.w	r4, ip, r4
 800109c:	f100 35ff 	add.w	r5, r0, #4294967295
 80010a0:	d22d      	bcs.n	80010fe <__udivmoddi4+0x2a2>
 80010a2:	45a2      	cmp	sl, r4
 80010a4:	d92b      	bls.n	80010fe <__udivmoddi4+0x2a2>
 80010a6:	3802      	subs	r0, #2
 80010a8:	4464      	add	r4, ip
 80010aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010ae:	fba0 8902 	umull	r8, r9, r0, r2
 80010b2:	eba4 040a 	sub.w	r4, r4, sl
 80010b6:	454c      	cmp	r4, r9
 80010b8:	46c6      	mov	lr, r8
 80010ba:	464d      	mov	r5, r9
 80010bc:	d319      	bcc.n	80010f2 <__udivmoddi4+0x296>
 80010be:	d016      	beq.n	80010ee <__udivmoddi4+0x292>
 80010c0:	b15e      	cbz	r6, 80010da <__udivmoddi4+0x27e>
 80010c2:	ebb3 020e 	subs.w	r2, r3, lr
 80010c6:	eb64 0405 	sbc.w	r4, r4, r5
 80010ca:	fa04 f707 	lsl.w	r7, r4, r7
 80010ce:	fa22 f301 	lsr.w	r3, r2, r1
 80010d2:	431f      	orrs	r7, r3
 80010d4:	40cc      	lsrs	r4, r1
 80010d6:	e9c6 7400 	strd	r7, r4, [r6]
 80010da:	2100      	movs	r1, #0
 80010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e0:	4631      	mov	r1, r6
 80010e2:	4630      	mov	r0, r6
 80010e4:	e70c      	b.n	8000f00 <__udivmoddi4+0xa4>
 80010e6:	468c      	mov	ip, r1
 80010e8:	e6eb      	b.n	8000ec2 <__udivmoddi4+0x66>
 80010ea:	4610      	mov	r0, r2
 80010ec:	e6ff      	b.n	8000eee <__udivmoddi4+0x92>
 80010ee:	4543      	cmp	r3, r8
 80010f0:	d2e6      	bcs.n	80010c0 <__udivmoddi4+0x264>
 80010f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80010f6:	eb69 050c 	sbc.w	r5, r9, ip
 80010fa:	3801      	subs	r0, #1
 80010fc:	e7e0      	b.n	80010c0 <__udivmoddi4+0x264>
 80010fe:	4628      	mov	r0, r5
 8001100:	e7d3      	b.n	80010aa <__udivmoddi4+0x24e>
 8001102:	4611      	mov	r1, r2
 8001104:	e78c      	b.n	8001020 <__udivmoddi4+0x1c4>
 8001106:	4681      	mov	r9, r0
 8001108:	e7b9      	b.n	800107e <__udivmoddi4+0x222>
 800110a:	4608      	mov	r0, r1
 800110c:	e773      	b.n	8000ff6 <__udivmoddi4+0x19a>
 800110e:	4608      	mov	r0, r1
 8001110:	e749      	b.n	8000fa6 <__udivmoddi4+0x14a>
 8001112:	f1ac 0c02 	sub.w	ip, ip, #2
 8001116:	443d      	add	r5, r7
 8001118:	e713      	b.n	8000f42 <__udivmoddi4+0xe6>
 800111a:	3802      	subs	r0, #2
 800111c:	443c      	add	r4, r7
 800111e:	e724      	b.n	8000f6a <__udivmoddi4+0x10e>

08001120 <__aeabi_idiv0>:
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0000      	movs	r0, r0
	...

08001128 <HAL_ADC_ConvCpltCallback>:
  float VREFINT_VAL =0;
  float volts =0;
  uint8_t contador=0;

  void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
  {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_ADC_ConvCpltCallback+0x130>)
 8001136:	4293      	cmp	r3, r2
 8001138:	f040 8086 	bne.w	8001248 <HAL_ADC_ConvCpltCallback+0x120>
	{
    	contador++;
 800113c:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_ADC_ConvCpltCallback+0x134>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b45      	ldr	r3, [pc, #276]	; (800125c <HAL_ADC_ConvCpltCallback+0x134>)
 8001146:	701a      	strb	r2, [r3, #0]
	  for(int i=0; i<3;i++)
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e018      	b.n	8001180 <HAL_ADC_ConvCpltCallback+0x58>
	  {
      __readed_adc[i] += _readed_adc[i];
 800114e:	4a44      	ldr	r2, [pc, #272]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115a:	4a42      	ldr	r2, [pc, #264]	; (8001264 <HAL_ADC_ConvCpltCallback+0x13c>)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	461a      	mov	r2, r3
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	1884      	adds	r4, r0, r2
 800116a:	eb41 0503 	adc.w	r5, r1, r3
 800116e:	4a3c      	ldr	r2, [pc, #240]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	e9c3 4500 	strd	r4, r5, [r3]
	  for(int i=0; i<3;i++)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b02      	cmp	r3, #2
 8001184:	dde3      	ble.n	800114e <HAL_ADC_ConvCpltCallback+0x26>
	  }
	  if(contador == 10)
 8001186:	4b35      	ldr	r3, [pc, #212]	; (800125c <HAL_ADC_ConvCpltCallback+0x134>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b0a      	cmp	r3, #10
 800118c:	d15c      	bne.n	8001248 <HAL_ADC_ConvCpltCallback+0x120>
	  {
		  contador=0;
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <HAL_ADC_ConvCpltCallback+0x134>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		  readed_adc[0] = __readed_adc[0] / 10;
 8001194:	4b32      	ldr	r3, [pc, #200]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 8001196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800119a:	f04f 020a 	mov.w	r2, #10
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	f7ff fe0b 	bl	8000dbc <__aeabi_uldivmod>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_ADC_ConvCpltCallback+0x140>)
 80011ac:	601a      	str	r2, [r3, #0]
		  readed_adc[1] = __readed_adc[1] / 10;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 80011b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011b4:	f04f 020a 	mov.w	r2, #10
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	f7ff fdfe 	bl	8000dbc <__aeabi_uldivmod>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_ADC_ConvCpltCallback+0x140>)
 80011c6:	605a      	str	r2, [r3, #4]
		  readed_adc[2] = __readed_adc[2] / 10;
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 80011ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80011ce:	f04f 020a 	mov.w	r2, #10
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	f7ff fdf1 	bl	8000dbc <__aeabi_uldivmod>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_ADC_ConvCpltCallback+0x140>)
 80011e0:	609a      	str	r2, [r3, #8]
	   VREFINT_VAL= (1.2000/readed_adc[2])*4095.000;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_ADC_ConvCpltCallback+0x140>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f9b0 	bl	800054c <__aeabi_ui2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 80011f4:	491d      	ldr	r1, [pc, #116]	; (800126c <HAL_ADC_ConvCpltCallback+0x144>)
 80011f6:	f7ff fb4d 	bl	8000894 <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	a313      	add	r3, pc, #76	; (adr r3, 8001250 <HAL_ADC_ConvCpltCallback+0x128>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fa1a 	bl	8000640 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fd0c 	bl	8000c30 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_ADC_ConvCpltCallback+0x148>)
 800121c:	6013      	str	r3, [r2, #0]

	   __readed_adc[0]=0;
 800121e:	4910      	ldr	r1, [pc, #64]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c1 2300 	strd	r2, r3, [r1]
	   __readed_adc[1]=0;
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c1 2302 	strd	r2, r3, [r1, #8]
	   __readed_adc[2]=0;
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <HAL_ADC_ConvCpltCallback+0x138>)
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  }
	}
  }
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bdb0      	pop	{r4, r5, r7, pc}
 8001250:	00000000 	.word	0x00000000
 8001254:	40affe00 	.word	0x40affe00
 8001258:	40012400 	.word	0x40012400
 800125c:	20000230 	.word	0x20000230
 8001260:	200007b8 	.word	0x200007b8
 8001264:	200006e8 	.word	0x200006e8
 8001268:	2000069c 	.word	0x2000069c
 800126c:	3ff33333 	.word	0x3ff33333
 8001270:	2000022c 	.word	0x2000022c

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f001 f9be 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f876 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 fa34 	bl	80016ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001284:	f000 fa14 	bl	80016b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001288:	f000 f8cc 	bl	8001424 <MX_ADC1_Init>
  MX_I2C1_Init();
 800128c:	f000 f926 	bl	80014dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001290:	f000 f952 	bl	8001538 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001294:	f000 f9a8 	bl	80015e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  HAL_ADCEx_Calibration_Start(&hadc1);
 8001298:	482a      	ldr	r0, [pc, #168]	; (8001344 <main+0xd0>)
 800129a:	f001 feb1 	bl	8003000 <HAL_ADCEx_Calibration_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800129e:	2100      	movs	r1, #0
 80012a0:	4829      	ldr	r0, [pc, #164]	; (8001348 <main+0xd4>)
 80012a2:	f003 ff1d 	bl	80050e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012a6:	2104      	movs	r1, #4
 80012a8:	4827      	ldr	r0, [pc, #156]	; (8001348 <main+0xd4>)
 80012aa:	f003 ff19 	bl	80050e0 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80012ae:	213c      	movs	r1, #60	; 0x3c
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <main+0xd8>)
 80012b2:	f003 ffd5 	bl	8005260 <HAL_TIM_Encoder_Start_IT>

  SSD1306_Init();
 80012b6:	f000 fbdd 	bl	8001a74 <SSD1306_Init>

  HAL_ADC_Start_DMA(&hadc1, _readed_adc, 3);
 80012ba:	2203      	movs	r2, #3
 80012bc:	4924      	ldr	r1, [pc, #144]	; (8001350 <main+0xdc>)
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <main+0xd0>)
 80012c0:	f001 faf8 	bl	80028b4 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	read_values();
 80012c4:	f000 faa0 	bl	8001808 <read_values>
	control();
 80012c8:	f000 fa8a 	bl	80017e0 <control>
	if(volt >15.00  && volt <=19.00 )val1 =volt-1.000;
	if(volt >19.00  && volt <=22.50 )val1 =volt-1.300;
	if(volt >22.50  && volt <=25.00 )val1 =volt-1.700;
	if(volt >25.00  && volt <=28.00 )val1 =volt-2.000;
	if(volt >28.00  )val1 =volt-2.300;*/
	val1 =volt;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <main+0xe0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a21      	ldr	r2, [pc, #132]	; (8001358 <main+0xe4>)
 80012d2:	6013      	str	r3, [r2, #0]
	val  =corr;
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <main+0xe8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <main+0xec>)
 80012da:	6013      	str	r3, [r2, #0]
	display_oled();
 80012dc:	f000 fb2c 	bl	8001938 <display_oled>

	if(val >0)HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, 1);
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <main+0xec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd5d 	bl	8000da8 <__aeabi_fcmpgt>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <main+0x8e>
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	481a      	ldr	r0, [pc, #104]	; (8001364 <main+0xf0>)
 80012fc:	f002 fba6 	bl	8003a4c <HAL_GPIO_WritePin>
 8001300:	e005      	b.n	800130e <main+0x9a>
	else HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <main+0xf0>)
 800130a:	f002 fb9f 	bl	8003a4c <HAL_GPIO_WritePin>
	if(val1 >0.5)HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <main+0xe4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd46 	bl	8000da8 <__aeabi_fcmpgt>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <main+0xba>
 8001322:	2201      	movs	r2, #1
 8001324:	2108      	movs	r1, #8
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <main+0xf4>)
 8001328:	f002 fb90 	bl	8003a4c <HAL_GPIO_WritePin>
 800132c:	e004      	b.n	8001338 <main+0xc4>
		else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2108      	movs	r1, #8
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <main+0xf4>)
 8001334:	f002 fb8a 	bl	8003a4c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f001 f9be 	bl	80026bc <HAL_Delay>
	read_values();
 8001340:	e7c0      	b.n	80012c4 <main+0x50>
 8001342:	bf00      	nop
 8001344:	200006f4 	.word	0x200006f4
 8001348:	200006a8 	.word	0x200006a8
 800134c:	20000778 	.word	0x20000778
 8001350:	200006e8 	.word	0x200006e8
 8001354:	20000214 	.word	0x20000214
 8001358:	20000228 	.word	0x20000228
 800135c:	20000218 	.word	0x20000218
 8001360:	20000224 	.word	0x20000224
 8001364:	40010800 	.word	0x40010800
 8001368:	40010c00 	.word	0x40010c00

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	; 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2228      	movs	r2, #40	; 0x28
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f004 fc52 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013aa:	2301      	movs	r3, #1
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f8cc 	bl	8004560 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013ce:	f000 fb4b 	bl	8001a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fb36 	bl	8004a60 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013fa:	f000 fb35 	bl	8001a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013fe:	2302      	movs	r3, #2
 8001400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001406:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fcc2 	bl	8004d94 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001416:	f000 fb27 	bl	8001a68 <Error_Handler>
  }
}
 800141a:	bf00      	nop
 800141c:	3750      	adds	r7, #80	; 0x50
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MX_ADC1_Init+0xb0>)
 8001436:	4a28      	ldr	r2, [pc, #160]	; (80014d8 <MX_ADC1_Init+0xb4>)
 8001438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_ADC1_Init+0xb0>)
 800143c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001440:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <MX_ADC1_Init+0xb0>)
 8001444:	2201      	movs	r2, #1
 8001446:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_ADC1_Init+0xb0>)
 800144a:	2200      	movs	r2, #0
 800144c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_ADC1_Init+0xb0>)
 8001450:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_ADC1_Init+0xb0>)
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_ADC1_Init+0xb0>)
 800145e:	2203      	movs	r2, #3
 8001460:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001462:	481c      	ldr	r0, [pc, #112]	; (80014d4 <MX_ADC1_Init+0xb0>)
 8001464:	f001 f94e 	bl	8002704 <HAL_ADC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800146e:	f000 fafb 	bl	8001a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001476:	2301      	movs	r3, #1
 8001478:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800147a:	2307      	movs	r3, #7
 800147c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_ADC1_Init+0xb0>)
 8001484:	f001 fbd2 	bl	8002c2c <HAL_ADC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 faeb 	bl	8001a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001492:	2301      	movs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001496:	2302      	movs	r3, #2
 8001498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_ADC1_Init+0xb0>)
 80014a0:	f001 fbc4 	bl	8002c2c <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80014aa:	f000 fadd 	bl	8001a68 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014ae:	2311      	movs	r3, #17
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014b2:	2303      	movs	r3, #3
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_ADC1_Init+0xb0>)
 80014bc:	f001 fbb6 	bl	8002c2c <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80014c6:	f000 facf 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200006f4 	.word	0x200006f4
 80014d8:	40012400 	.word	0x40012400

080014dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x50>)
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <MX_I2C1_Init+0x54>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C1_Init+0x50>)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_I2C1_Init+0x58>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_I2C1_Init+0x50>)
 80014fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2C1_Init+0x50>)
 800151a:	f002 fad1 	bl	8003ac0 <HAL_I2C_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001524:	f000 faa0 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000648 	.word	0x20000648
 8001530:	40005400 	.word	0x40005400
 8001534:	00061a80 	.word	0x00061a80

08001538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	; 0x30
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f004 fb6c 	bl	8005c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001554:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <MX_TIM1_Init+0xa8>)
 8001556:	4a23      	ldr	r2, [pc, #140]	; (80015e4 <MX_TIM1_Init+0xac>)
 8001558:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800155a:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_TIM1_Init+0xa8>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_TIM1_Init+0xa8>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_TIM1_Init+0xa8>)
 8001568:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800156c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_TIM1_Init+0xa8>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_TIM1_Init+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_TIM1_Init+0xa8>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001580:	2303      	movs	r3, #3
 8001582:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001590:	230a      	movs	r3, #10
 8001592:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001598:	2301      	movs	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80015a0:	230a      	movs	r3, #10
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_TIM1_Init+0xa8>)
 80015ac:	f003 fdca 	bl	8005144 <HAL_TIM_Encoder_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80015b6:	f000 fa57 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <MX_TIM1_Init+0xa8>)
 80015c8:	f004 faac 	bl	8005b24 <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80015d2:	f000 fa49 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000778 	.word	0x20000778
 80015e4:	40012c00 	.word	0x40012c00

080015e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <MX_TIM3_Init+0xc4>)
 800160e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800161e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001622:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001630:	481d      	ldr	r0, [pc, #116]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001632:	f003 fd29 	bl	8005088 <HAL_TIM_PWM_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800163c:	f000 fa14 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4619      	mov	r1, r3
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001650:	f004 fa68 	bl	8005b24 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800165a:	f000 fa05 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	; 0x60
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_TIM3_Init+0xc0>)
 8001676:	f003 ff53 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001680:	f000 f9f2 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2204      	movs	r2, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800168c:	f003 ff48 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001696:	f000 f9e7 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM3_Init+0xc0>)
 800169c:	f000 fdf8 	bl	8002290 <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200006a8 	.word	0x200006a8
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_DMA_Init+0x38>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <MX_DMA_Init+0x38>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6153      	str	r3, [r2, #20]
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_DMA_Init+0x38>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	200b      	movs	r0, #11
 80016d4:	f001 fe11 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016d8:	200b      	movs	r0, #11
 80016da:	f001 fe2a 	bl	8003332 <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001700:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a32      	ldr	r2, [pc, #200]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001706:	f043 0320 	orr.w	r3, r3, #32
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <MX_GPIO_Init+0xe4>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <MX_GPIO_Init+0xe4>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a2c      	ldr	r2, [pc, #176]	; (80017d0 <MX_GPIO_Init+0xe4>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <MX_GPIO_Init+0xe4>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <MX_GPIO_Init+0xe4>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_E_Pin|FAN_Pin, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800174e:	4821      	ldr	r0, [pc, #132]	; (80017d4 <MX_GPIO_Init+0xe8>)
 8001750:	f002 f97c 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8001754:	2200      	movs	r2, #0
 8001756:	f640 410b 	movw	r1, #3083	; 0xc0b
 800175a:	481f      	ldr	r0, [pc, #124]	; (80017d8 <MX_GPIO_Init+0xec>)
 800175c:	f002 f976 	bl	8003a4c <HAL_GPIO_WritePin>
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin FAN_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|FAN_Pin;
 8001760:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2302      	movs	r3, #2
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	4816      	ldr	r0, [pc, #88]	; (80017d4 <MX_GPIO_Init+0xe8>)
 800177a:	f001 ffe3 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 800177e:	f640 430b 	movw	r3, #3083	; 0xc0b
 8001782:	613b      	str	r3, [r7, #16]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4810      	ldr	r0, [pc, #64]	; (80017d8 <MX_GPIO_Init+0xec>)
 8001798:	f001 ffd4 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800179c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_GPIO_Init+0xf0>)
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	4619      	mov	r1, r3
 80017b0:	4808      	ldr	r0, [pc, #32]	; (80017d4 <MX_GPIO_Init+0xe8>)
 80017b2:	f001 ffc7 	bl	8003744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f001 fd9d 	bl	80032fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c0:	2028      	movs	r0, #40	; 0x28
 80017c2:	f001 fdb6 	bl	8003332 <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	10210000 	.word	0x10210000

080017e0 <control>:

/* USER CODE BEGIN 4 */

void control(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  TIM3->CCR1 = _volt;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <control+0x1c>)
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <control+0x20>)
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = _corr;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <control+0x24>)
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <control+0x20>)
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38

}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	2000021c 	.word	0x2000021c
 8001800:	40000400 	.word	0x40000400
 8001804:	2000021e 	.word	0x2000021e

08001808 <read_values>:
void read_values(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

	 //VREFINT_VAL= (1.2000/readed_adc[5])*4095.000;

  volt = (readed_adc[0]*(3.300/4096.0000))/0.083;
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <read_values+0x90>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe9b 	bl	800054c <__aeabi_ui2d>
 8001816:	a31a      	add	r3, pc, #104	; (adr r3, 8001880 <read_values+0x78>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ff10 	bl	8000640 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a317      	add	r3, pc, #92	; (adr r3, 8001888 <read_values+0x80>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f831 	bl	8000894 <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f9f9 	bl	8000c30 <__aeabi_d2f>
 800183e:	4603      	mov	r3, r0
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <read_values+0x94>)
 8001842:	6013      	str	r3, [r2, #0]
  corr = (readed_adc[1]*(3.300/4096.0000))/0.15000;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <read_values+0x90>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7f 	bl	800054c <__aeabi_ui2d>
 800184e:	a30c      	add	r3, pc, #48	; (adr r3, 8001880 <read_values+0x78>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fef4 	bl	8000640 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	a30b      	add	r3, pc, #44	; (adr r3, 8001890 <read_values+0x88>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7ff f815 	bl	8000894 <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f7ff f9dd 	bl	8000c30 <__aeabi_d2f>
 8001876:	4603      	mov	r3, r0
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <read_values+0x98>)
 800187a:	6013      	str	r3, [r2, #0]

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	66666666 	.word	0x66666666
 8001884:	3f4a6666 	.word	0x3f4a6666
 8001888:	ed916873 	.word	0xed916873
 800188c:	3fb53f7c 	.word	0x3fb53f7c
 8001890:	33333333 	.word	0x33333333
 8001894:	3fc33333 	.word	0x3fc33333
 8001898:	2000069c 	.word	0x2000069c
 800189c:	20000214 	.word	0x20000214
 80018a0:	20000218 	.word	0x20000218

080018a4 <encoder_it>:

void encoder_it(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  //a=(TIM1->CNT)>>2;

  if(flag==0) _volt = ((TIM1->CNT)>>2);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <encoder_it+0x34>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <encoder_it+0x18>
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <encoder_it+0x38>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <encoder_it+0x3c>)
 80018ba:	801a      	strh	r2, [r3, #0]
  if(flag==0xFF) _corr = ((TIM1->CNT)>>2);
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <encoder_it+0x34>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d105      	bne.n	80018d0 <encoder_it+0x2c>
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <encoder_it+0x38>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <encoder_it+0x40>)
 80018ce:	801a      	strh	r2, [r3, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000220 	.word	0x20000220
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	2000021c 	.word	0x2000021c
 80018e4:	2000021e 	.word	0x2000021e

080018e8 <button_it>:

void button_it(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  flag = ~flag;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <button_it+0x3c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <button_it+0x3c>)
 80018f6:	701a      	strb	r2, [r3, #0]

  if(flag==0) TIM1->CNT = (_volt<<2);
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <button_it+0x3c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <button_it+0x22>
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <button_it+0x40>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	009a      	lsls	r2, r3, #2
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <button_it+0x44>)
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  if(flag==0xFF) TIM1->CNT = (_corr<<2);
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <button_it+0x3c>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2bff      	cmp	r3, #255	; 0xff
 8001910:	d104      	bne.n	800191c <button_it+0x34>
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <button_it+0x48>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <button_it+0x44>)
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000220 	.word	0x20000220
 8001928:	2000021c 	.word	0x2000021c
 800192c:	40012c00 	.word	0x40012c00
 8001930:	2000021e 	.word	0x2000021e
 8001934:	00000000 	.word	0x00000000

08001938 <display_oled>:

void display_oled(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0

  //SSD1306_Clear();
  SSD1306_GotoXY(00, 1);
 800193c:	2101      	movs	r1, #1
 800193e:	2000      	movs	r0, #0
 8001940:	f000 fa00 	bl	8001d44 <SSD1306_GotoXY>

  sprintf(as,"%05.2f V",val1);
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <display_oled+0xf8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe21 	bl	8000590 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4938      	ldr	r1, [pc, #224]	; (8001a34 <display_oled+0xfc>)
 8001954:	4838      	ldr	r0, [pc, #224]	; (8001a38 <display_oled+0x100>)
 8001956:	f004 ffe3 	bl	8006920 <siprintf>
  SSD1306_Puts(as, &Font_16x26, 1);
 800195a:	2201      	movs	r2, #1
 800195c:	4937      	ldr	r1, [pc, #220]	; (8001a3c <display_oled+0x104>)
 800195e:	4836      	ldr	r0, [pc, #216]	; (8001a38 <display_oled+0x100>)
 8001960:	f000 fa86 	bl	8001e70 <SSD1306_Puts>
  if (flag == 0) SSD1306_Puts("<", &Font_11x18, 1);
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <display_oled+0x108>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <display_oled+0x40>
 800196c:	2201      	movs	r2, #1
 800196e:	4935      	ldr	r1, [pc, #212]	; (8001a44 <display_oled+0x10c>)
 8001970:	4835      	ldr	r0, [pc, #212]	; (8001a48 <display_oled+0x110>)
 8001972:	f000 fa7d 	bl	8001e70 <SSD1306_Puts>
 8001976:	e004      	b.n	8001982 <display_oled+0x4a>
  else SSD1306_Puts(" ", &Font_11x18, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	4932      	ldr	r1, [pc, #200]	; (8001a44 <display_oled+0x10c>)
 800197c:	4833      	ldr	r0, [pc, #204]	; (8001a4c <display_oled+0x114>)
 800197e:	f000 fa77 	bl	8001e70 <SSD1306_Puts>
  SSD1306_GotoXY(0, 27);
 8001982:	211b      	movs	r1, #27
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f9dd 	bl	8001d44 <SSD1306_GotoXY>
  sprintf(as,"%05.2f A",val);
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <display_oled+0x118>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdfe 	bl	8000590 <__aeabi_f2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	492e      	ldr	r1, [pc, #184]	; (8001a54 <display_oled+0x11c>)
 800199a:	4827      	ldr	r0, [pc, #156]	; (8001a38 <display_oled+0x100>)
 800199c:	f004 ffc0 	bl	8006920 <siprintf>
  SSD1306_Puts(as, &Font_16x26, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	4926      	ldr	r1, [pc, #152]	; (8001a3c <display_oled+0x104>)
 80019a4:	4824      	ldr	r0, [pc, #144]	; (8001a38 <display_oled+0x100>)
 80019a6:	f000 fa63 	bl	8001e70 <SSD1306_Puts>

  SSD1306_GotoXY(0, 53);
 80019aa:	2135      	movs	r1, #53	; 0x35
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 f9c9 	bl	8001d44 <SSD1306_GotoXY>
  sprintf(as,"SET:%05.2fA",_corr*0.014662);
 80019b2:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <display_oled+0x120>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdd8 	bl	800056c <__aeabi_i2d>
 80019bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001a28 <display_oled+0xf0>)
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f7fe fe3d 	bl	8000640 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4924      	ldr	r1, [pc, #144]	; (8001a5c <display_oled+0x124>)
 80019cc:	481a      	ldr	r0, [pc, #104]	; (8001a38 <display_oled+0x100>)
 80019ce:	f004 ffa7 	bl	8006920 <siprintf>
  if (flag == 0xFF) SSD1306_Puts(as, &Font_7x10, 0);
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <display_oled+0x108>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d105      	bne.n	80019e6 <display_oled+0xae>
 80019da:	2200      	movs	r2, #0
 80019dc:	4920      	ldr	r1, [pc, #128]	; (8001a60 <display_oled+0x128>)
 80019de:	4816      	ldr	r0, [pc, #88]	; (8001a38 <display_oled+0x100>)
 80019e0:	f000 fa46 	bl	8001e70 <SSD1306_Puts>
 80019e4:	e004      	b.n	80019f0 <display_oled+0xb8>
  else SSD1306_Puts(as, &Font_7x10, 1);
 80019e6:	2201      	movs	r2, #1
 80019e8:	491d      	ldr	r1, [pc, #116]	; (8001a60 <display_oled+0x128>)
 80019ea:	4813      	ldr	r0, [pc, #76]	; (8001a38 <display_oled+0x100>)
 80019ec:	f000 fa40 	bl	8001e70 <SSD1306_Puts>

  sprintf(as," %06.2fW",val1*val);
 80019f0:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <display_oled+0xf8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a16      	ldr	r2, [pc, #88]	; (8001a50 <display_oled+0x118>)
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fbb0 	bl	8000160 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fdc4 	bl	8000590 <__aeabi_f2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4915      	ldr	r1, [pc, #84]	; (8001a64 <display_oled+0x12c>)
 8001a0e:	480a      	ldr	r0, [pc, #40]	; (8001a38 <display_oled+0x100>)
 8001a10:	f004 ff86 	bl	8006920 <siprintf>
  SSD1306_Puts(as, &Font_7x10, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	4912      	ldr	r1, [pc, #72]	; (8001a60 <display_oled+0x128>)
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <display_oled+0x100>)
 8001a1a:	f000 fa29 	bl	8001e70 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001a1e:	f000 f8ed 	bl	8001bfc <SSD1306_UpdateScreen>

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	53f39d1b 	.word	0x53f39d1b
 8001a2c:	3f8e071c 	.word	0x3f8e071c
 8001a30:	20000228 	.word	0x20000228
 8001a34:	0800a460 	.word	0x0800a460
 8001a38:	20000724 	.word	0x20000724
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	20000220 	.word	0x20000220
 8001a44:	20000008 	.word	0x20000008
 8001a48:	0800a46c 	.word	0x0800a46c
 8001a4c:	0800a470 	.word	0x0800a470
 8001a50:	20000224 	.word	0x20000224
 8001a54:	0800a474 	.word	0x0800a474
 8001a58:	2000021e 	.word	0x2000021e
 8001a5c:	0800a480 	.word	0x0800a480
 8001a60:	20000000 	.word	0x20000000
 8001a64:	0800a48c 	.word	0x0800a48c

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a7a:	f000 fa1f 	bl	8001ebc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a82:	2201      	movs	r2, #1
 8001a84:	2178      	movs	r1, #120	; 0x78
 8001a86:	485b      	ldr	r0, [pc, #364]	; (8001bf4 <SSD1306_Init+0x180>)
 8001a88:	f002 fa4c 	bl	8003f24 <HAL_I2C_IsDeviceReady>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e0a9      	b.n	8001bea <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a96:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a9a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a9c:	e002      	b.n	8001aa4 <SSD1306_Init+0x30>
		p--;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001aaa:	22ae      	movs	r2, #174	; 0xae
 8001aac:	2100      	movs	r1, #0
 8001aae:	2078      	movs	r0, #120	; 0x78
 8001ab0:	f000 fa60 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2078      	movs	r0, #120	; 0x78
 8001aba:	f000 fa5b 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001abe:	2210      	movs	r2, #16
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2078      	movs	r0, #120	; 0x78
 8001ac4:	f000 fa56 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001ac8:	22b0      	movs	r2, #176	; 0xb0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2078      	movs	r0, #120	; 0x78
 8001ace:	f000 fa51 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001ad2:	22c8      	movs	r2, #200	; 0xc8
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2078      	movs	r0, #120	; 0x78
 8001ad8:	f000 fa4c 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001adc:	2200      	movs	r2, #0
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2078      	movs	r0, #120	; 0x78
 8001ae2:	f000 fa47 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2078      	movs	r0, #120	; 0x78
 8001aec:	f000 fa42 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	2100      	movs	r1, #0
 8001af4:	2078      	movs	r0, #120	; 0x78
 8001af6:	f000 fa3d 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001afa:	2281      	movs	r2, #129	; 0x81
 8001afc:	2100      	movs	r1, #0
 8001afe:	2078      	movs	r0, #120	; 0x78
 8001b00:	f000 fa38 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b04:	22ff      	movs	r2, #255	; 0xff
 8001b06:	2100      	movs	r1, #0
 8001b08:	2078      	movs	r0, #120	; 0x78
 8001b0a:	f000 fa33 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b0e:	22a1      	movs	r2, #161	; 0xa1
 8001b10:	2100      	movs	r1, #0
 8001b12:	2078      	movs	r0, #120	; 0x78
 8001b14:	f000 fa2e 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b18:	22a6      	movs	r2, #166	; 0xa6
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2078      	movs	r0, #120	; 0x78
 8001b1e:	f000 fa29 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b22:	22a8      	movs	r2, #168	; 0xa8
 8001b24:	2100      	movs	r1, #0
 8001b26:	2078      	movs	r0, #120	; 0x78
 8001b28:	f000 fa24 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b2c:	223f      	movs	r2, #63	; 0x3f
 8001b2e:	2100      	movs	r1, #0
 8001b30:	2078      	movs	r0, #120	; 0x78
 8001b32:	f000 fa1f 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b36:	22a4      	movs	r2, #164	; 0xa4
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2078      	movs	r0, #120	; 0x78
 8001b3c:	f000 fa1a 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b40:	22d3      	movs	r2, #211	; 0xd3
 8001b42:	2100      	movs	r1, #0
 8001b44:	2078      	movs	r0, #120	; 0x78
 8001b46:	f000 fa15 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2078      	movs	r0, #120	; 0x78
 8001b50:	f000 fa10 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b54:	22d5      	movs	r2, #213	; 0xd5
 8001b56:	2100      	movs	r1, #0
 8001b58:	2078      	movs	r0, #120	; 0x78
 8001b5a:	f000 fa0b 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b5e:	22f0      	movs	r2, #240	; 0xf0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2078      	movs	r0, #120	; 0x78
 8001b64:	f000 fa06 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b68:	22d9      	movs	r2, #217	; 0xd9
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2078      	movs	r0, #120	; 0x78
 8001b6e:	f000 fa01 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b72:	2222      	movs	r2, #34	; 0x22
 8001b74:	2100      	movs	r1, #0
 8001b76:	2078      	movs	r0, #120	; 0x78
 8001b78:	f000 f9fc 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b7c:	22da      	movs	r2, #218	; 0xda
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2078      	movs	r0, #120	; 0x78
 8001b82:	f000 f9f7 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b86:	2212      	movs	r2, #18
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2078      	movs	r0, #120	; 0x78
 8001b8c:	f000 f9f2 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b90:	22db      	movs	r2, #219	; 0xdb
 8001b92:	2100      	movs	r1, #0
 8001b94:	2078      	movs	r0, #120	; 0x78
 8001b96:	f000 f9ed 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2078      	movs	r0, #120	; 0x78
 8001ba0:	f000 f9e8 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001ba4:	228d      	movs	r2, #141	; 0x8d
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2078      	movs	r0, #120	; 0x78
 8001baa:	f000 f9e3 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001bae:	2214      	movs	r2, #20
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2078      	movs	r0, #120	; 0x78
 8001bb4:	f000 f9de 	bl	8001f74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001bb8:	22af      	movs	r2, #175	; 0xaf
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2078      	movs	r0, #120	; 0x78
 8001bbe:	f000 f9d9 	bl	8001f74 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001bc2:	222e      	movs	r2, #46	; 0x2e
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2078      	movs	r0, #120	; 0x78
 8001bc8:	f000 f9d4 	bl	8001f74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 f843 	bl	8001c58 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001bd2:	f000 f813 	bl	8001bfc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <SSD1306_Init+0x184>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <SSD1306_Init+0x184>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SSD1306_Init+0x184>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000648 	.word	0x20000648
 8001bf8:	20000634 	.word	0x20000634

08001bfc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	71fb      	strb	r3, [r7, #7]
 8001c06:	e01d      	b.n	8001c44 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	3b50      	subs	r3, #80	; 0x50
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2100      	movs	r1, #0
 8001c12:	2078      	movs	r0, #120	; 0x78
 8001c14:	f000 f9ae 	bl	8001f74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2078      	movs	r0, #120	; 0x78
 8001c1e:	f000 f9a9 	bl	8001f74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c22:	2210      	movs	r2, #16
 8001c24:	2100      	movs	r1, #0
 8001c26:	2078      	movs	r0, #120	; 0x78
 8001c28:	f000 f9a4 	bl	8001f74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	01db      	lsls	r3, r3, #7
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <SSD1306_UpdateScreen+0x58>)
 8001c32:	441a      	add	r2, r3
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	2140      	movs	r1, #64	; 0x40
 8001c38:	2078      	movs	r0, #120	; 0x78
 8001c3a:	f000 f953 	bl	8001ee4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	3301      	adds	r3, #1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b07      	cmp	r3, #7
 8001c48:	d9de      	bls.n	8001c08 <SSD1306_UpdateScreen+0xc>
	}
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000234 	.word	0x20000234

08001c58 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <SSD1306_Fill+0x14>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <SSD1306_Fill+0x16>
 8001c6c:	23ff      	movs	r3, #255	; 0xff
 8001c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c72:	4619      	mov	r1, r3
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <SSD1306_Fill+0x2c>)
 8001c76:	f003 ffd5 	bl	8005c24 <memset>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000234 	.word	0x20000234

08001c88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	70fb      	strb	r3, [r7, #3]
	if (
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c9e:	d848      	bhi.n	8001d32 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ca0:	88bb      	ldrh	r3, [r7, #4]
 8001ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ca4:	d845      	bhi.n	8001d32 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <SSD1306_DrawPixel+0xb4>)
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d11a      	bne.n	8001cf8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cc2:	88fa      	ldrh	r2, [r7, #6]
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	b298      	uxth	r0, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	01db      	lsls	r3, r3, #7
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <SSD1306_DrawPixel+0xb8>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	88bb      	ldrh	r3, [r7, #4]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	b259      	sxtb	r1, r3
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	4603      	mov	r3, r0
 8001cec:	01db      	lsls	r3, r3, #7
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2c9      	uxtb	r1, r1
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <SSD1306_DrawPixel+0xb8>)
 8001cf4:	54d1      	strb	r1, [r2, r3]
 8001cf6:	e01d      	b.n	8001d34 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	88bb      	ldrh	r3, [r7, #4]
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	b298      	uxth	r0, r3
 8001d00:	4603      	mov	r3, r0
 8001d02:	01db      	lsls	r3, r3, #7
 8001d04:	4413      	add	r3, r2
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <SSD1306_DrawPixel+0xb8>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	b25a      	sxtb	r2, r3
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f303 	lsl.w	r3, r1, r3
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	4013      	ands	r3, r2
 8001d20:	b259      	sxtb	r1, r3
 8001d22:	88fa      	ldrh	r2, [r7, #6]
 8001d24:	4603      	mov	r3, r0
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	4413      	add	r3, r2
 8001d2a:	b2c9      	uxtb	r1, r1
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <SSD1306_DrawPixel+0xb8>)
 8001d2e:	54d1      	strb	r1, [r2, r3]
 8001d30:	e000      	b.n	8001d34 <SSD1306_DrawPixel+0xac>
		return;
 8001d32:	bf00      	nop
	}
}
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	20000634 	.word	0x20000634
 8001d40:	20000234 	.word	0x20000234

08001d44 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	80fb      	strh	r3, [r7, #6]
 8001d50:	4613      	mov	r3, r2
 8001d52:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <SSD1306_GotoXY+0x28>)
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <SSD1306_GotoXY+0x28>)
 8001d5c:	88bb      	ldrh	r3, [r7, #4]
 8001d5e:	8053      	strh	r3, [r2, #2]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000634 	.word	0x20000634

08001d70 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
	if (
 8001d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d8e:	dc07      	bgt.n	8001da0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001d92:	885b      	ldrh	r3, [r3, #2]
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	785b      	ldrb	r3, [r3, #1]
 8001d9a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d9c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d9e:	dd01      	ble.n	8001da4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e05e      	b.n	8001e62 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e04b      	b.n	8001e42 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	3b20      	subs	r3, #32
 8001db2:	6839      	ldr	r1, [r7, #0]
 8001db4:	7849      	ldrb	r1, [r1, #1]
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	440b      	add	r3, r1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e030      	b.n	8001e30 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b298      	uxth	r0, r3
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001dec:	885a      	ldrh	r2, [r3, #2]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	79ba      	ldrb	r2, [r7, #6]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff ff45 	bl	8001c88 <SSD1306_DrawPixel>
 8001dfe:	e014      	b.n	8001e2a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001e0e:	885a      	ldrh	r2, [r3, #2]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	b299      	uxth	r1, r3
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	f7ff ff2f 	bl	8001c88 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d3c8      	bcc.n	8001dce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	785b      	ldrb	r3, [r3, #1]
 8001e46:	461a      	mov	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d3ad      	bcc.n	8001daa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001e50:	881a      	ldrh	r2, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <SSD1306_Putc+0xfc>)
 8001e5e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000634 	.word	0x20000634

08001e70 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001e7e:	e012      	b.n	8001ea6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	79fa      	ldrb	r2, [r7, #7]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff71 	bl	8001d70 <SSD1306_Putc>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d002      	beq.n	8001ea0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	e008      	b.n	8001eb2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e8      	bne.n	8001e80 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	781b      	ldrb	r3, [r3, #0]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <ssd1306_I2C_Init+0x24>)
 8001ec4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ec6:	e002      	b.n	8001ece <ssd1306_I2C_Init+0x12>
		p--;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f9      	bne.n	8001ec8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	0003d090 	.word	0x0003d090

08001ee4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b0c7      	sub	sp, #284	; 0x11c
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	4604      	mov	r4, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	4639      	mov	r1, r7
 8001ef0:	600a      	str	r2, [r1, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	1dbb      	adds	r3, r7, #6
 8001efc:	4602      	mov	r2, r0
 8001efe:	701a      	strb	r2, [r3, #0]
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	460a      	mov	r2, r1
 8001f04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	1dba      	adds	r2, r7, #6
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f16:	e010      	b.n	8001f3a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001f18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f1c:	463a      	mov	r2, r7
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	441a      	add	r2, r3
 8001f22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f26:	3301      	adds	r3, #1
 8001f28:	7811      	ldrb	r1, [r2, #0]
 8001f2a:	f107 020c 	add.w	r2, r7, #12
 8001f2e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f30:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f34:	3301      	adds	r3, #1
 8001f36:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	1d3a      	adds	r2, r7, #4
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8e7      	bhi.n	8001f18 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b299      	uxth	r1, r3
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	9000      	str	r0, [sp, #0]
 8001f5e:	4804      	ldr	r0, [pc, #16]	; (8001f70 <ssd1306_I2C_WriteMulti+0x8c>)
 8001f60:	f001 fee2 	bl	8003d28 <HAL_I2C_Master_Transmit>
}
 8001f64:	bf00      	nop
 8001f66:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd90      	pop	{r4, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000648 	.word	0x20000648

08001f74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	71bb      	strb	r3, [r7, #6]
 8001f82:	4613      	mov	r3, r2
 8001f84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f86:	79bb      	ldrb	r3, [r7, #6]
 8001f88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f8a:	797b      	ldrb	r3, [r7, #5]
 8001f8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	b299      	uxth	r1, r3
 8001f92:	f107 020c 	add.w	r2, r7, #12
 8001f96:	230a      	movs	r3, #10
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ssd1306_I2C_Write+0x38>)
 8001f9e:	f001 fec3 	bl	8003d28 <HAL_I2C_Master_Transmit>
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000648 	.word	0x20000648

08001fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_MspInit+0x5c>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_MspInit+0x5c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x5c>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x5c>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_MspInit+0x5c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_MspInit+0x5c>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_MspInit+0x60>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_MspInit+0x60>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000

08002014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <HAL_ADC_MspInit+0xcc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d151      	bne.n	80020d8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a2a      	ldr	r2, [pc, #168]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_ADC_MspInit+0xd0>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002064:	2303      	movs	r3, #3
 8002066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002068:	2303      	movs	r3, #3
 800206a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	481d      	ldr	r0, [pc, #116]	; (80020e8 <HAL_ADC_MspInit+0xd4>)
 8002074:	f001 fb66 	bl	8003744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 800207a:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_ADC_MspInit+0xdc>)
 800207c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 8002080:	2200      	movs	r2, #0
 8002082:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 8002092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002096:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 800209a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800209e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020a2:	2220      	movs	r2, #32
 80020a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ac:	480f      	ldr	r0, [pc, #60]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020ae:	f001 f95b 	bl	8003368 <HAL_DMA_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020b8:	f7ff fcd6 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020c0:	621a      	str	r2, [r3, #32]
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_ADC_MspInit+0xd8>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2012      	movs	r0, #18
 80020ce:	f001 f914 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020d2:	2012      	movs	r0, #18
 80020d4:	f001 f92d 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40012400 	.word	0x40012400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	20000734 	.word	0x20000734
 80020f0:	40020008 	.word	0x40020008

080020f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_I2C_MspInit+0x90>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d132      	bne.n	800217a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_I2C_MspInit+0x94>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_I2C_MspInit+0x94>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_I2C_MspInit+0x94>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800212c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002132:	2312      	movs	r3, #18
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4619      	mov	r1, r3
 8002140:	4812      	ldr	r0, [pc, #72]	; (800218c <HAL_I2C_MspInit+0x98>)
 8002142:	f001 faff 	bl	8003744 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_I2C_MspInit+0x9c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <HAL_I2C_MspInit+0x9c>)
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_I2C_MspInit+0x94>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a08      	ldr	r2, [pc, #32]	; (8002188 <HAL_I2C_MspInit+0x94>)
 8002168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_I2C_MspInit+0x94>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40005400 	.word	0x40005400
 8002188:	40021000 	.word	0x40021000
 800218c:	40010c00 	.word	0x40010c00
 8002190:	40010000 	.word	0x40010000

08002194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_TIM_Encoder_MspInit+0xb4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d144      	bne.n	800223e <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_TIM_Encoder_MspInit+0xb8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <HAL_TIM_Encoder_MspInit+0xb8>)
 80021ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_TIM_Encoder_MspInit+0xb8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_TIM_Encoder_MspInit+0xb8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_TIM_Encoder_MspInit+0xb8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_TIM_Encoder_MspInit+0xb8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 0310 	add.w	r3, r7, #16
 80021f6:	4619      	mov	r1, r3
 80021f8:	4815      	ldr	r0, [pc, #84]	; (8002250 <HAL_TIM_Encoder_MspInit+0xbc>)
 80021fa:	f001 faa3 	bl	8003744 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2018      	movs	r0, #24
 8002204:	f001 f879 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002208:	2018      	movs	r0, #24
 800220a:	f001 f892 	bl	8003332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2019      	movs	r0, #25
 8002214:	f001 f871 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002218:	2019      	movs	r0, #25
 800221a:	f001 f88a 	bl	8003332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	201a      	movs	r0, #26
 8002224:	f001 f869 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002228:	201a      	movs	r0, #26
 800222a:	f001 f882 	bl	8003332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	201b      	movs	r0, #27
 8002234:	f001 f861 	bl	80032fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002238:	201b      	movs	r0, #27
 800223a:	f001 f87a 	bl	8003332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40010800 	.word	0x40010800

08002254 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_TIM_PWM_MspInit+0x34>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10b      	bne.n	800227e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_TIM_PWM_MspInit+0x38>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_TIM_PWM_MspInit+0x38>)
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_TIM_PWM_MspInit+0x38>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40000400 	.word	0x40000400
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_TIM_MspPostInit+0x58>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d117      	bne.n	80022e0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_TIM_MspPostInit+0x5c>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_TIM_MspPostInit+0x5c>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_TIM_MspPostInit+0x5c>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	4619      	mov	r1, r3
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <HAL_TIM_MspPostInit+0x60>)
 80022dc:	f001 fa32 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40010800 	.word	0x40010800

080022f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <HardFault_Handler+0x4>

08002306 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <MemManage_Handler+0x4>

0800230c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <BusFault_Handler+0x4>

08002312 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <UsageFault_Handler+0x4>

08002318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002340:	f000 f9a0 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <DMA1_Channel1_IRQHandler+0x10>)
 800234e:	f001 f8c5 	bl	80034dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000734 	.word	0x20000734

0800235c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <ADC1_2_IRQHandler+0x10>)
 8002362:	f000 fb85 	bl	8002a70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200006f4 	.word	0x200006f4

08002370 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM1_BRK_IRQHandler+0x10>)
 8002376:	f002 ffcb 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000778 	.word	0x20000778

08002384 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM1_UP_IRQHandler+0x10>)
 800238a:	f002 ffc1 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000778 	.word	0x20000778

08002398 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <TIM1_TRG_COM_IRQHandler+0x10>)
 800239e:	f002 ffb7 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000778 	.word	0x20000778

080023ac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	encoder_it();
 80023b0:	f7ff fa78 	bl	80018a4 <encoder_it>
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <TIM1_CC_IRQHandler+0x14>)
 80023b6:	f002 ffab 	bl	8005310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000778 	.word	0x20000778

080023c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  button_it();
 80023c8:	f7ff fa8e 	bl	80018e8 <button_it>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023d0:	f001 fb54 	bl	8003a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	return 1;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr

080023e6 <_kill>:

int _kill(int pid, int sig)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023f0:	f003 fbee 	bl	8005bd0 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2216      	movs	r2, #22
 80023f8:	601a      	str	r2, [r3, #0]
	return -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_exit>:

void _exit (int status)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800240e:	f04f 31ff 	mov.w	r1, #4294967295
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffe7 	bl	80023e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002418:	e7fe      	b.n	8002418 <_exit+0x12>

0800241a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	e00a      	b.n	8002442 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800242c:	f3af 8000 	nop.w
 8002430:	4601      	mov	r1, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	60ba      	str	r2, [r7, #8]
 8002438:	b2ca      	uxtb	r2, r1
 800243a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbf0      	blt.n	800242c <_read+0x12>
	}

return len;
 800244a:	687b      	ldr	r3, [r7, #4]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e009      	b.n	800247a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	60ba      	str	r2, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3301      	adds	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	dbf1      	blt.n	8002466 <_write+0x12>
	}
	return len;
 8002482:	687b      	ldr	r3, [r7, #4]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_close>:

int _close(int file)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	return -1;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b2:	605a      	str	r2, [r3, #4]
	return 0;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <_isatty>:

int _isatty(int file)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
	return 0;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x50>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x16>
		heap_end = &end;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <_sbrk+0x50>)
 80024fe:	4a10      	ldr	r2, [pc, #64]	; (8002540 <_sbrk+0x54>)
 8002500:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <_sbrk+0x50>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <_sbrk+0x50>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	466a      	mov	r2, sp
 8002512:	4293      	cmp	r3, r2
 8002514:	d907      	bls.n	8002526 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002516:	f003 fb5b 	bl	8005bd0 <__errno>
 800251a:	4603      	mov	r3, r0
 800251c:	220c      	movs	r2, #12
 800251e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	e006      	b.n	8002534 <_sbrk+0x48>
	}

	heap_end += incr;
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <_sbrk+0x50>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	4a03      	ldr	r2, [pc, #12]	; (800253c <_sbrk+0x50>)
 8002530:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000063c 	.word	0x2000063c
 8002540:	200007e8 	.word	0x200007e8

08002544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <SystemInit+0x5c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <SystemInit+0x5c>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <SystemInit+0x5c>)
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4911      	ldr	r1, [pc, #68]	; (80025a0 <SystemInit+0x5c>)
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <SystemInit+0x60>)
 800255c:	4013      	ands	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <SystemInit+0x5c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <SystemInit+0x5c>)
 8002566:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <SystemInit+0x5c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <SystemInit+0x5c>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <SystemInit+0x5c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <SystemInit+0x5c>)
 8002582:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002586:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <SystemInit+0x5c>)
 800258a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800258e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SystemInit+0x64>)
 8002592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002596:	609a      	str	r2, [r3, #8]
#endif 
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40021000 	.word	0x40021000
 80025a4:	f8ff0000 	.word	0xf8ff0000
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80025ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80025ae:	e003      	b.n	80025b8 <LoopCopyDataInit>

080025b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80025b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80025b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80025b6:	3104      	adds	r1, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80025b8:	480a      	ldr	r0, [pc, #40]	; (80025e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80025bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80025be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80025c0:	d3f6      	bcc.n	80025b0 <CopyDataInit>
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80025c4:	e002      	b.n	80025cc <LoopFillZerobss>

080025c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80025c8:	f842 3b04 	str.w	r3, [r2], #4

080025cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80025ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80025d0:	d3f9      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025d2:	f7ff ffb7 	bl	8002544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f003 fb01 	bl	8005bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025da:	f7fe fe4b 	bl	8001274 <main>
  bx lr
 80025de:	4770      	bx	lr
  ldr r3, =_sidata
 80025e0:	0800d1ac 	.word	0x0800d1ac
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80025e8:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 80025ec:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 80025f0:	200007e4 	.word	0x200007e4

080025f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <CAN1_RX1_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x28>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x28>)
 8002602:	f043 0310 	orr.w	r3, r3, #16
 8002606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 fe6b 	bl	80032e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	2000      	movs	r0, #0
 8002610:	f000 f808 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff fccc 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40022000 	.word	0x40022000

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x54>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fe83 	bl	800334e <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 fe4b 	bl	80032fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x5c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000018 	.word	0x20000018
 800267c:	20000020 	.word	0x20000020
 8002680:	2000001c 	.word	0x2000001c

08002684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_IncTick+0x1c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_IncTick+0x20>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_IncTick+0x20>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	20000020 	.word	0x20000020
 80026a4:	200007d0 	.word	0x200007d0

080026a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <HAL_GetTick+0x10>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	200007d0 	.word	0x200007d0

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_Delay+0x44>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffe0 	bl	80026a8 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000020 	.word	0x20000020

08002704 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e0be      	b.n	80028a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fc66 	bl	8002014 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fbb9 	bl	8002ec0 <ADC_ConversionStop_Disable>
 800274e:	4603      	mov	r3, r0
 8002750:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 8099 	bne.w	8002892 <HAL_ADC_Init+0x18e>
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8095 	bne.w	8002892 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	f043 0202 	orr.w	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002784:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7b1b      	ldrb	r3, [r3, #12]
 800278a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800278c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	4313      	orrs	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d003      	beq.n	80027a6 <HAL_ADC_Init+0xa2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d102      	bne.n	80027ac <HAL_ADC_Init+0xa8>
 80027a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027aa:	e000      	b.n	80027ae <HAL_ADC_Init+0xaa>
 80027ac:	2300      	movs	r3, #0
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7d1b      	ldrb	r3, [r3, #20]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d119      	bne.n	80027f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7b1b      	ldrb	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	035a      	lsls	r2, r3, #13
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	e00b      	b.n	80027f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_ADC_Init+0x1a8>)
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	430b      	orrs	r3, r1
 8002816:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002820:	d003      	beq.n	800282a <HAL_ADC_Init+0x126>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d104      	bne.n	8002834 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	3b01      	subs	r3, #1
 8002830:	051b      	lsls	r3, r3, #20
 8002832:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	430a      	orrs	r2, r1
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_ADC_Init+0x1ac>)
 8002850:	4013      	ands	r3, r2
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	d10b      	bne.n	8002870 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800286e:	e018      	b.n	80028a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	f023 0312 	bic.w	r3, r3, #18
 8002878:	f043 0210 	orr.w	r2, r3, #16
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002890:	e007      	b.n	80028a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	ffe1f7fd 	.word	0xffe1f7fd
 80028b0:	ff1f0efe 	.word	0xff1f0efe

080028b4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a64      	ldr	r2, [pc, #400]	; (8002a5c <HAL_ADC_Start_DMA+0x1a8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_Start_DMA+0x24>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_ADC_Start_DMA+0x1ac>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d106      	bne.n	80028e6 <HAL_ADC_Start_DMA+0x32>
 80028d8:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <HAL_ADC_Start_DMA+0x1a8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 80b3 	bne.w	8002a4c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_Start_DMA+0x40>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0ae      	b.n	8002a52 <HAL_ADC_Start_DMA+0x19e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fa8d 	bl	8002e1c <ADC_Enable>
 8002902:	4603      	mov	r3, r0
 8002904:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f040 809a 	bne.w	8002a42 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a4e      	ldr	r2, [pc, #312]	; (8002a60 <HAL_ADC_Start_DMA+0x1ac>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d105      	bne.n	8002938 <HAL_ADC_Start_DMA+0x84>
 800292c:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <HAL_ADC_Start_DMA+0x1a8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d115      	bne.n	8002964 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d026      	beq.n	80029a0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800295a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002962:	e01d      	b.n	80029a0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a39      	ldr	r2, [pc, #228]	; (8002a5c <HAL_ADC_Start_DMA+0x1a8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d004      	beq.n	8002984 <HAL_ADC_Start_DMA+0xd0>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a38      	ldr	r2, [pc, #224]	; (8002a60 <HAL_ADC_Start_DMA+0x1ac>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10d      	bne.n	80029a0 <HAL_ADC_Start_DMA+0xec>
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_ADC_Start_DMA+0x1a8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002998:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	f023 0206 	bic.w	r2, r3, #6
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HAL_ADC_Start_DMA+0x1b0>)
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_ADC_Start_DMA+0x1b4>)
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <HAL_ADC_Start_DMA+0x1b8>)
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0202 	mvn.w	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a18      	ldr	r0, [r3, #32]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	334c      	adds	r3, #76	; 0x4c
 8002a04:	4619      	mov	r1, r3
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f000 fd07 	bl	800341c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a18:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a1c:	d108      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a2c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a2e:	e00f      	b.n	8002a50 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a3e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a40:	e006      	b.n	8002a50 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002a4a:	e001      	b.n	8002a50 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40012400 	.word	0x40012400
 8002a60:	40012800 	.word	0x40012800
 8002a64:	08002f35 	.word	0x08002f35
 8002a68:	08002fb1 	.word	0x08002fb1
 8002a6c:	08002fcd 	.word	0x08002fcd

08002a70 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d140      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d139      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ab6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002aba:	d11d      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d119      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0220 	bic.w	r2, r2, #32
 8002ad2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fe fb15 	bl	8001128 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0212 	mvn.w	r2, #18
 8002b06:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b80      	cmp	r3, #128	; 0x80
 8002b14:	d14f      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d148      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d105      	bne.n	8002b3c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002b46:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002b4a:	d012      	beq.n	8002b72 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d125      	bne.n	8002ba6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002b64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b68:	d11d      	bne.n	8002ba6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b80:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fac6 	bl	8003138 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 020c 	mvn.w	r2, #12
 8002bb4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d114      	bne.n	8002bee <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10d      	bne.n	8002bee <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f812 	bl	8002c08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0201 	mvn.w	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x20>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0dc      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x1da>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d81c      	bhi.n	8002c96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3b05      	subs	r3, #5
 8002c6e:	221f      	movs	r2, #31
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	4019      	ands	r1, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	3b05      	subs	r3, #5
 8002c88:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34
 8002c94:	e03c      	b.n	8002d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d81c      	bhi.n	8002cd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	3b23      	subs	r3, #35	; 0x23
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4019      	ands	r1, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b23      	subs	r3, #35	; 0x23
 8002cca:	fa00 f203 	lsl.w	r2, r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd6:	e01b      	b.n	8002d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b41      	subs	r3, #65	; 0x41
 8002cea:	221f      	movs	r2, #31
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	4019      	ands	r1, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3b41      	subs	r3, #65	; 0x41
 8002d04:	fa00 f203 	lsl.w	r2, r0, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d91c      	bls.n	8002d52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	4019      	ands	r1, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6898      	ldr	r0, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	fa00 f203 	lsl.w	r2, r0, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	e019      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6919      	ldr	r1, [r3, #16]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	2207      	movs	r2, #7
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4019      	ands	r1, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6898      	ldr	r0, [r3, #8]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d003      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d92:	2b11      	cmp	r3, #17
 8002d94:	d132      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d125      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d126      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dbc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d11a      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <HAL_ADC_ConfigChannel+0x1e8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <HAL_ADC_ConfigChannel+0x1ec>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	0c9a      	lsrs	r2, r3, #18
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ddc:	e002      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f9      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x1b2>
 8002dea:	e007      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40012400 	.word	0x40012400
 8002e14:	20000018 	.word	0x20000018
 8002e18:	431bde83 	.word	0x431bde83

08002e1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d039      	beq.n	8002eae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <ADC_Enable+0x9c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <ADC_Enable+0xa0>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0c9b      	lsrs	r3, r3, #18
 8002e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e58:	e002      	b.n	8002e60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f9      	bne.n	8002e5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e66:	f7ff fc1f 	bl	80026a8 <HAL_GetTick>
 8002e6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e6c:	e018      	b.n	8002ea0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e6e:	f7ff fc1b 	bl	80026a8 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d911      	bls.n	8002ea0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	f043 0210 	orr.w	r2, r3, #16
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e007      	b.n	8002eb0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d1df      	bne.n	8002e6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000018 	.word	0x20000018
 8002ebc:	431bde83 	.word	0x431bde83

08002ec0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d127      	bne.n	8002f2a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002eea:	f7ff fbdd 	bl	80026a8 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ef0:	e014      	b.n	8002f1c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ef2:	f7ff fbd9 	bl	80026a8 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d90d      	bls.n	8002f1c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d0e3      	beq.n	8002ef2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d127      	bne.n	8002f9e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f68:	d115      	bne.n	8002f96 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d111      	bne.n	8002f96 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f7fe f8c6 	bl	8001128 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f9c:	e004      	b.n	8002fa8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
}
 8002fa8:	bf00      	nop
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff fe19 	bl	8002bf6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f043 0204 	orr.w	r2, r3, #4
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff fe11 	bl	8002c1a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADCEx_Calibration_Start+0x1e>
 800301a:	2302      	movs	r3, #2
 800301c:	e086      	b.n	800312c <HAL_ADCEx_Calibration_Start+0x12c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff4a 	bl	8002ec0 <ADC_ConversionStop_Disable>
 800302c:	4603      	mov	r3, r0
 800302e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d175      	bne.n	8003122 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800303e:	f023 0302 	bic.w	r3, r3, #2
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800304a:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <HAL_ADCEx_Calibration_Start+0x134>)
 800304c:	681c      	ldr	r4, [r3, #0]
 800304e:	2002      	movs	r0, #2
 8003050:	f001 ff56 	bl	8004f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8003054:	4603      	mov	r3, r0
 8003056:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800305a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800305c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800305e:	e002      	b.n	8003066 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b01      	subs	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f9      	bne.n	8003060 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fed5 	bl	8002e1c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0208 	orr.w	r2, r2, #8
 8003080:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003082:	f7ff fb11 	bl	80026a8 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003088:	e014      	b.n	80030b4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800308a:	f7ff fb0d 	bl	80026a8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b0a      	cmp	r3, #10
 8003096:	d90d      	bls.n	80030b4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309c:	f023 0312 	bic.w	r3, r3, #18
 80030a0:	f043 0210 	orr.w	r2, r3, #16
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e03b      	b.n	800312c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0204 	orr.w	r2, r2, #4
 80030d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80030d2:	f7ff fae9 	bl	80026a8 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80030d8:	e014      	b.n	8003104 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80030da:	f7ff fae5 	bl	80026a8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	d90d      	bls.n	8003104 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f023 0312 	bic.w	r3, r3, #18
 80030f0:	f043 0210 	orr.w	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e013      	b.n	800312c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e3      	bne.n	80030da <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
}
 800312c:	4618      	mov	r0, r3
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	20000018 	.word	0x20000018

08003138 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
	...

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0b      	blt.n	80031da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4906      	ldr	r1, [pc, #24]	; (80031e4 <__NVIC_EnableIRQ+0x34>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr
 80031e4:	e000e100 	.word	0xe000e100

080031e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db0a      	blt.n	8003212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <__NVIC_SetPriority+0x4c>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	440b      	add	r3, r1
 800320c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003210:	e00a      	b.n	8003228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4908      	ldr	r1, [pc, #32]	; (8003238 <__NVIC_SetPriority+0x50>)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3b04      	subs	r3, #4
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	440b      	add	r3, r1
 8003226:	761a      	strb	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000e100 	.word	0xe000e100
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f1c3 0307 	rsb	r3, r3, #7
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf28      	it	cs
 800325a:	2304      	movcs	r3, #4
 800325c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3304      	adds	r3, #4
 8003262:	2b06      	cmp	r3, #6
 8003264:	d902      	bls.n	800326c <NVIC_EncodePriority+0x30>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3b03      	subs	r3, #3
 800326a:	e000      	b.n	800326e <NVIC_EncodePriority+0x32>
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	f04f 32ff 	mov.w	r2, #4294967295
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	401a      	ands	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003284:	f04f 31ff 	mov.w	r1, #4294967295
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	43d9      	mvns	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	4313      	orrs	r3, r2
         );
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b0:	d301      	bcc.n	80032b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <SysTick_Config+0x40>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032be:	210f      	movs	r1, #15
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f7ff ff90 	bl	80031e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <SysTick_Config+0x40>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ce:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <SysTick_Config+0x40>)
 80032d0:	2207      	movs	r2, #7
 80032d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	e000e010 	.word	0xe000e010

080032e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff2d 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330c:	f7ff ff42 	bl	8003194 <__NVIC_GetPriorityGrouping>
 8003310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	6978      	ldr	r0, [r7, #20]
 8003318:	f7ff ff90 	bl	800323c <NVIC_EncodePriority>
 800331c:	4602      	mov	r2, r0
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff5f 	bl	80031e8 <__NVIC_SetPriority>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff35 	bl	80031b0 <__NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffa2 	bl	80032a0 <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e043      	b.n	8003406 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	4b22      	ldr	r3, [pc, #136]	; (8003410 <HAL_DMA_Init+0xa8>)
 8003386:	4413      	add	r3, r2
 8003388:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_DMA_Init+0xac>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	009a      	lsls	r2, r3, #2
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_DMA_Init+0xb0>)
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	bffdfff8 	.word	0xbffdfff8
 8003414:	cccccccd 	.word	0xcccccccd
 8003418:	40020000 	.word	0x40020000

0800341c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_DMA_Start_IT+0x20>
 8003438:	2302      	movs	r3, #2
 800343a:	e04a      	b.n	80034d2 <HAL_DMA_Start_IT+0xb6>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800344a:	2b01      	cmp	r3, #1
 800344c:	d13a      	bne.n	80034c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f938 	bl	80036e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 020e 	orr.w	r2, r2, #14
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e00f      	b.n	80034b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0204 	bic.w	r2, r2, #4
 80034a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 020a 	orr.w	r2, r2, #10
 80034b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e005      	b.n	80034d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
 80034ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d04f      	beq.n	80035a4 <HAL_DMA_IRQHandler+0xc8>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04a      	beq.n	80035a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a66      	ldr	r2, [pc, #408]	; (80036cc <HAL_DMA_IRQHandler+0x1f0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d029      	beq.n	800358a <HAL_DMA_IRQHandler+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a65      	ldr	r2, [pc, #404]	; (80036d0 <HAL_DMA_IRQHandler+0x1f4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <HAL_DMA_IRQHandler+0xaa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <HAL_DMA_IRQHandler+0x1f8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01a      	beq.n	8003580 <HAL_DMA_IRQHandler+0xa4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a62      	ldr	r2, [pc, #392]	; (80036d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d012      	beq.n	800357a <HAL_DMA_IRQHandler+0x9e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a60      	ldr	r2, [pc, #384]	; (80036dc <HAL_DMA_IRQHandler+0x200>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00a      	beq.n	8003574 <HAL_DMA_IRQHandler+0x98>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a5f      	ldr	r2, [pc, #380]	; (80036e0 <HAL_DMA_IRQHandler+0x204>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d102      	bne.n	800356e <HAL_DMA_IRQHandler+0x92>
 8003568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800356c:	e00e      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 800356e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003572:	e00b      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 8003574:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003578:	e008      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 800357a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800357e:	e005      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 8003580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003584:	e002      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	e000      	b.n	800358c <HAL_DMA_IRQHandler+0xb0>
 800358a:	2304      	movs	r3, #4
 800358c:	4a55      	ldr	r2, [pc, #340]	; (80036e4 <HAL_DMA_IRQHandler+0x208>)
 800358e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8094 	beq.w	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035a2:	e08e      	b.n	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	2202      	movs	r2, #2
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d056      	beq.n	8003662 <HAL_DMA_IRQHandler+0x186>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d051      	beq.n	8003662 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 020a 	bic.w	r2, r2, #10
 80035da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_DMA_IRQHandler+0x1f0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d029      	beq.n	8003642 <HAL_DMA_IRQHandler+0x166>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a37      	ldr	r2, [pc, #220]	; (80036d0 <HAL_DMA_IRQHandler+0x1f4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_IRQHandler+0x162>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <HAL_DMA_IRQHandler+0x1f8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01a      	beq.n	8003638 <HAL_DMA_IRQHandler+0x15c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <HAL_DMA_IRQHandler+0x1fc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d012      	beq.n	8003632 <HAL_DMA_IRQHandler+0x156>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a32      	ldr	r2, [pc, #200]	; (80036dc <HAL_DMA_IRQHandler+0x200>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00a      	beq.n	800362c <HAL_DMA_IRQHandler+0x150>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <HAL_DMA_IRQHandler+0x204>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <HAL_DMA_IRQHandler+0x14a>
 8003620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003624:	e00e      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800362a:	e00b      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 800362c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003630:	e008      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003636:	e005      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800363c:	e002      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 800363e:	2320      	movs	r3, #32
 8003640:	e000      	b.n	8003644 <HAL_DMA_IRQHandler+0x168>
 8003642:	2302      	movs	r3, #2
 8003644:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <HAL_DMA_IRQHandler+0x208>)
 8003646:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d034      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003660:	e02f      	b.n	80036c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2208      	movs	r2, #8
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d028      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x1e8>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 020e 	bic.w	r2, r2, #14
 800368a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
    }
  }
  return;
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
}
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40020008 	.word	0x40020008
 80036d0:	4002001c 	.word	0x4002001c
 80036d4:	40020030 	.word	0x40020030
 80036d8:	40020044 	.word	0x40020044
 80036dc:	40020058 	.word	0x40020058
 80036e0:	4002006c 	.word	0x4002006c
 80036e4:	40020000 	.word	0x40020000

080036e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d108      	bne.n	8003728 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003726:	e007      	b.n	8003738 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
	...

08003744 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003744:	b480      	push	{r7}
 8003746:	b08b      	sub	sp, #44	; 0x2c
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003756:	e169      	b.n	8003a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003758:	2201      	movs	r2, #1
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	f040 8158 	bne.w	8003a26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a9a      	ldr	r2, [pc, #616]	; (80039e4 <HAL_GPIO_Init+0x2a0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d05e      	beq.n	800383e <HAL_GPIO_Init+0xfa>
 8003780:	4a98      	ldr	r2, [pc, #608]	; (80039e4 <HAL_GPIO_Init+0x2a0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d875      	bhi.n	8003872 <HAL_GPIO_Init+0x12e>
 8003786:	4a98      	ldr	r2, [pc, #608]	; (80039e8 <HAL_GPIO_Init+0x2a4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d058      	beq.n	800383e <HAL_GPIO_Init+0xfa>
 800378c:	4a96      	ldr	r2, [pc, #600]	; (80039e8 <HAL_GPIO_Init+0x2a4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d86f      	bhi.n	8003872 <HAL_GPIO_Init+0x12e>
 8003792:	4a96      	ldr	r2, [pc, #600]	; (80039ec <HAL_GPIO_Init+0x2a8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d052      	beq.n	800383e <HAL_GPIO_Init+0xfa>
 8003798:	4a94      	ldr	r2, [pc, #592]	; (80039ec <HAL_GPIO_Init+0x2a8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d869      	bhi.n	8003872 <HAL_GPIO_Init+0x12e>
 800379e:	4a94      	ldr	r2, [pc, #592]	; (80039f0 <HAL_GPIO_Init+0x2ac>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d04c      	beq.n	800383e <HAL_GPIO_Init+0xfa>
 80037a4:	4a92      	ldr	r2, [pc, #584]	; (80039f0 <HAL_GPIO_Init+0x2ac>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d863      	bhi.n	8003872 <HAL_GPIO_Init+0x12e>
 80037aa:	4a92      	ldr	r2, [pc, #584]	; (80039f4 <HAL_GPIO_Init+0x2b0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d046      	beq.n	800383e <HAL_GPIO_Init+0xfa>
 80037b0:	4a90      	ldr	r2, [pc, #576]	; (80039f4 <HAL_GPIO_Init+0x2b0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d85d      	bhi.n	8003872 <HAL_GPIO_Init+0x12e>
 80037b6:	2b12      	cmp	r3, #18
 80037b8:	d82a      	bhi.n	8003810 <HAL_GPIO_Init+0xcc>
 80037ba:	2b12      	cmp	r3, #18
 80037bc:	d859      	bhi.n	8003872 <HAL_GPIO_Init+0x12e>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_GPIO_Init+0x80>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	0800383f 	.word	0x0800383f
 80037c8:	08003819 	.word	0x08003819
 80037cc:	0800382b 	.word	0x0800382b
 80037d0:	0800386d 	.word	0x0800386d
 80037d4:	08003873 	.word	0x08003873
 80037d8:	08003873 	.word	0x08003873
 80037dc:	08003873 	.word	0x08003873
 80037e0:	08003873 	.word	0x08003873
 80037e4:	08003873 	.word	0x08003873
 80037e8:	08003873 	.word	0x08003873
 80037ec:	08003873 	.word	0x08003873
 80037f0:	08003873 	.word	0x08003873
 80037f4:	08003873 	.word	0x08003873
 80037f8:	08003873 	.word	0x08003873
 80037fc:	08003873 	.word	0x08003873
 8003800:	08003873 	.word	0x08003873
 8003804:	08003873 	.word	0x08003873
 8003808:	08003821 	.word	0x08003821
 800380c:	08003835 	.word	0x08003835
 8003810:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <HAL_GPIO_Init+0x2b4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d013      	beq.n	800383e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003816:	e02c      	b.n	8003872 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	623b      	str	r3, [r7, #32]
          break;
 800381e:	e029      	b.n	8003874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	3304      	adds	r3, #4
 8003826:	623b      	str	r3, [r7, #32]
          break;
 8003828:	e024      	b.n	8003874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	3308      	adds	r3, #8
 8003830:	623b      	str	r3, [r7, #32]
          break;
 8003832:	e01f      	b.n	8003874 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	330c      	adds	r3, #12
 800383a:	623b      	str	r3, [r7, #32]
          break;
 800383c:	e01a      	b.n	8003874 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d102      	bne.n	800384c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003846:	2304      	movs	r3, #4
 8003848:	623b      	str	r3, [r7, #32]
          break;
 800384a:	e013      	b.n	8003874 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003854:	2308      	movs	r3, #8
 8003856:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	611a      	str	r2, [r3, #16]
          break;
 800385e:	e009      	b.n	8003874 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003860:	2308      	movs	r3, #8
 8003862:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	615a      	str	r2, [r3, #20]
          break;
 800386a:	e003      	b.n	8003874 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800386c:	2300      	movs	r3, #0
 800386e:	623b      	str	r3, [r7, #32]
          break;
 8003870:	e000      	b.n	8003874 <HAL_GPIO_Init+0x130>
          break;
 8003872:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2bff      	cmp	r3, #255	; 0xff
 8003878:	d801      	bhi.n	800387e <HAL_GPIO_Init+0x13a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	e001      	b.n	8003882 <HAL_GPIO_Init+0x13e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2bff      	cmp	r3, #255	; 0xff
 8003888:	d802      	bhi.n	8003890 <HAL_GPIO_Init+0x14c>
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	e002      	b.n	8003896 <HAL_GPIO_Init+0x152>
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3b08      	subs	r3, #8
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	210f      	movs	r1, #15
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	6a39      	ldr	r1, [r7, #32]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	431a      	orrs	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80b1 	beq.w	8003a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038c4:	4b4d      	ldr	r3, [pc, #308]	; (80039fc <HAL_GPIO_Init+0x2b8>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_GPIO_Init+0x2b8>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6193      	str	r3, [r2, #24]
 80038d0:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_GPIO_Init+0x2b8>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038dc:	4a48      	ldr	r2, [pc, #288]	; (8003a00 <HAL_GPIO_Init+0x2bc>)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	3302      	adds	r3, #2
 80038e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	220f      	movs	r2, #15
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a40      	ldr	r2, [pc, #256]	; (8003a04 <HAL_GPIO_Init+0x2c0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_GPIO_Init+0x1ec>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3f      	ldr	r2, [pc, #252]	; (8003a08 <HAL_GPIO_Init+0x2c4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00d      	beq.n	800392c <HAL_GPIO_Init+0x1e8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <HAL_GPIO_Init+0x2c8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <HAL_GPIO_Init+0x1e4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3d      	ldr	r2, [pc, #244]	; (8003a10 <HAL_GPIO_Init+0x2cc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_GPIO_Init+0x1e0>
 8003920:	2303      	movs	r3, #3
 8003922:	e006      	b.n	8003932 <HAL_GPIO_Init+0x1ee>
 8003924:	2304      	movs	r3, #4
 8003926:	e004      	b.n	8003932 <HAL_GPIO_Init+0x1ee>
 8003928:	2302      	movs	r3, #2
 800392a:	e002      	b.n	8003932 <HAL_GPIO_Init+0x1ee>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_GPIO_Init+0x1ee>
 8003930:	2300      	movs	r3, #0
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	f002 0203 	and.w	r2, r2, #3
 8003938:	0092      	lsls	r2, r2, #2
 800393a:	4093      	lsls	r3, r2
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003942:	492f      	ldr	r1, [pc, #188]	; (8003a00 <HAL_GPIO_Init+0x2bc>)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	3302      	adds	r3, #2
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800395c:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	492c      	ldr	r1, [pc, #176]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800396a:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	43db      	mvns	r3, r3
 8003972:	4928      	ldr	r1, [pc, #160]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 8003974:	4013      	ands	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4922      	ldr	r1, [pc, #136]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
 8003990:	e006      	b.n	80039a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	43db      	mvns	r3, r3
 800399a:	491e      	ldr	r1, [pc, #120]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 800399c:	4013      	ands	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039ac:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	4918      	ldr	r1, [pc, #96]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	608b      	str	r3, [r1, #8]
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4914      	ldr	r1, [pc, #80]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d021      	beq.n	8003a18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60cb      	str	r3, [r1, #12]
 80039e0:	e021      	b.n	8003a26 <HAL_GPIO_Init+0x2e2>
 80039e2:	bf00      	nop
 80039e4:	10320000 	.word	0x10320000
 80039e8:	10310000 	.word	0x10310000
 80039ec:	10220000 	.word	0x10220000
 80039f0:	10210000 	.word	0x10210000
 80039f4:	10120000 	.word	0x10120000
 80039f8:	10110000 	.word	0x10110000
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40010800 	.word	0x40010800
 8003a08:	40010c00 	.word	0x40010c00
 8003a0c:	40011000 	.word	0x40011000
 8003a10:	40011400 	.word	0x40011400
 8003a14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_GPIO_Init+0x304>)
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	4909      	ldr	r1, [pc, #36]	; (8003a48 <HAL_GPIO_Init+0x304>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	3301      	adds	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f47f ae8e 	bne.w	8003758 <HAL_GPIO_Init+0x14>
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	372c      	adds	r7, #44	; 0x2c
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5c:	787b      	ldrb	r3, [r7, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a68:	e003      	b.n	8003a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	041a      	lsls	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a86:	4b08      	ldr	r3, [pc, #32]	; (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a92:	4a05      	ldr	r2, [pc, #20]	; (8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f806 	bl	8003aac <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40010400 	.word	0x40010400

08003aac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e11b      	b.n	8003d0a <HAL_I2C_Init+0x24a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe fb04 	bl	80020f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b04:	f001 f900 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8003b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a81      	ldr	r2, [pc, #516]	; (8003d14 <HAL_I2C_Init+0x254>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d807      	bhi.n	8003b24 <HAL_I2C_Init+0x64>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a80      	ldr	r2, [pc, #512]	; (8003d18 <HAL_I2C_Init+0x258>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e006      	b.n	8003b32 <HAL_I2C_Init+0x72>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a7d      	ldr	r2, [pc, #500]	; (8003d1c <HAL_I2C_Init+0x25c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf94      	ite	ls
 8003b2c:	2301      	movls	r3, #1
 8003b2e:	2300      	movhi	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0e7      	b.n	8003d0a <HAL_I2C_Init+0x24a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a78      	ldr	r2, [pc, #480]	; (8003d20 <HAL_I2C_Init+0x260>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0c9b      	lsrs	r3, r3, #18
 8003b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <HAL_I2C_Init+0x254>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <HAL_I2C_Init+0xb4>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	e009      	b.n	8003b88 <HAL_I2C_Init+0xc8>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_I2C_Init+0x264>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	3301      	adds	r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	495c      	ldr	r1, [pc, #368]	; (8003d14 <HAL_I2C_Init+0x254>)
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	d819      	bhi.n	8003bdc <HAL_I2C_Init+0x11c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e59      	subs	r1, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_I2C_Init+0x118>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e59      	subs	r1, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	e051      	b.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	e04f      	b.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d111      	bne.n	8003c08 <HAL_I2C_Init+0x148>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e012      	b.n	8003c2e <HAL_I2C_Init+0x16e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e58      	subs	r0, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	0099      	lsls	r1, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Init+0x176>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e022      	b.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10e      	bne.n	8003c5c <HAL_I2C_Init+0x19c>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e58      	subs	r0, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	440b      	add	r3, r1
 8003c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5a:	e00f      	b.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e58      	subs	r0, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	0099      	lsls	r1, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	6809      	ldr	r1, [r1, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6911      	ldr	r1, [r2, #16]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	000186a0 	.word	0x000186a0
 8003d18:	001e847f 	.word	0x001e847f
 8003d1c:	003d08ff 	.word	0x003d08ff
 8003d20:	431bde83 	.word	0x431bde83
 8003d24:	10624dd3 	.word	0x10624dd3

08003d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	817b      	strh	r3, [r7, #10]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7fe fcb4 	bl	80026a8 <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	f040 80e0 	bne.w	8003f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2319      	movs	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	4970      	ldr	r1, [pc, #448]	; (8003f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa7a 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0d3      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_I2C_Master_Transmit+0x50>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0cc      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d007      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	; 0x21
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2210      	movs	r2, #16
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003de0:	8979      	ldrh	r1, [r7, #10]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f9be 	bl	8004168 <I2C_MasterRequestWrite>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e08d      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e0c:	e066      	b.n	8003edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 faf4 	bl	8004400 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06b      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d11b      	bne.n	8003eb0 <HAL_I2C_Master_Transmit+0x188>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6a39      	ldr	r1, [r7, #32]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fae4 	bl	8004482 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e01a      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d194      	bne.n	8003e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	00100002 	.word	0x00100002
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	; 0x28
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7fe fbb8 	bl	80026a8 <HAL_GetTick>
 8003f38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 8105 	bne.w	8004156 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	4982      	ldr	r1, [pc, #520]	; (8004160 <HAL_I2C_IsDeviceReady+0x23c>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f97c 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0f8      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_IsDeviceReady+0x50>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0f1      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d007      	beq.n	8003f9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2224      	movs	r2, #36	; 0x24
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a6a      	ldr	r2, [pc, #424]	; (8004164 <HAL_I2C_IsDeviceReady+0x240>)
 8003fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f93a 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0b6      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fe fb55 	bl	80026a8 <HAL_GetTick>
 8003ffe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	bf0c      	ite	eq
 800400e:	2301      	moveq	r3, #1
 8004010:	2300      	movne	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	bf0c      	ite	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	2300      	movne	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800402e:	e025      	b.n	800407c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fe fb3a 	bl	80026a8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <HAL_I2C_IsDeviceReady+0x122>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	22a0      	movs	r2, #160	; 0xa0
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2ba0      	cmp	r3, #160	; 0xa0
 8004086:	d005      	beq.n	8004094 <HAL_I2C_IsDeviceReady+0x170>
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_I2C_IsDeviceReady+0x170>
 800408e:	7dbb      	ldrb	r3, [r7, #22]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0cd      	beq.n	8004030 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d129      	bne.n	80040fe <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	2319      	movs	r3, #25
 80040d6:	2201      	movs	r2, #1
 80040d8:	4921      	ldr	r1, [pc, #132]	; (8004160 <HAL_I2C_IsDeviceReady+0x23c>)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f8ba 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e036      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e02c      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004116:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2319      	movs	r3, #25
 800411e:	2201      	movs	r2, #1
 8004120:	490f      	ldr	r1, [pc, #60]	; (8004160 <HAL_I2C_IsDeviceReady+0x23c>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f896 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e012      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3301      	adds	r3, #1
 8004136:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	f4ff af3e 	bcc.w	8003fbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	00100002 	.word	0x00100002
 8004164:	ffff0000 	.word	0xffff0000

08004168 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	460b      	mov	r3, r1
 8004176:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b08      	cmp	r3, #8
 8004182:	d006      	beq.n	8004192 <I2C_MasterRequestWrite+0x2a>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d003      	beq.n	8004192 <I2C_MasterRequestWrite+0x2a>
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004190:	d108      	bne.n	80041a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e00b      	b.n	80041bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	2b12      	cmp	r3, #18
 80041aa:	d107      	bne.n	80041bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f843 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e035      	b.n	8004244 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e0:	d108      	bne.n	80041f4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041f0:	611a      	str	r2, [r3, #16]
 80041f2:	e01b      	b.n	800422c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	11db      	asrs	r3, r3, #7
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0306 	and.w	r3, r3, #6
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f063 030f 	orn	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <I2C_MasterRequestWrite+0xe4>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f875 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e010      	b.n	8004244 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004222:	897b      	ldrh	r3, [r7, #10]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4907      	ldr	r1, [pc, #28]	; (8004250 <I2C_MasterRequestWrite+0xe8>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f865 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00010008 	.word	0x00010008
 8004250:	00010002 	.word	0x00010002

08004254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004264:	e025      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d021      	beq.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fe fa1b 	bl	80026a8 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e023      	b.n	80042fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10d      	bne.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	e00c      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d0b6      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004310:	e051      	b.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004320:	d123      	bne.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e046      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d021      	beq.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fe f999 	bl	80026a8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e020      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10c      	bne.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e00b      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d18d      	bne.n	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440c:	e02d      	b.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f878 	bl	8004504 <I2C_IsAcknowledgeFailed>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02d      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d021      	beq.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fe f93f 	bl	80026a8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d1ca      	bne.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448e:	e02d      	b.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f837 	bl	8004504 <I2C_IsAcknowledgeFailed>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e02d      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d021      	beq.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fe f8fe 	bl	80026a8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d1ca      	bne.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451a:	d11b      	bne.n	8004554 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004524:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e26c      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8087 	beq.w	800468e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004580:	4b92      	ldr	r3, [pc, #584]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b04      	cmp	r3, #4
 800458a:	d00c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800458c:	4b8f      	ldr	r3, [pc, #572]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d112      	bne.n	80045be <HAL_RCC_OscConfig+0x5e>
 8004598:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d10b      	bne.n	80045be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a6:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d06c      	beq.n	800468c <HAL_RCC_OscConfig+0x12c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d168      	bne.n	800468c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e246      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x76>
 80045c8:	4b80      	ldr	r3, [pc, #512]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7f      	ldr	r2, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	e02e      	b.n	8004634 <HAL_RCC_OscConfig+0xd4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x98>
 80045de:	4b7b      	ldr	r3, [pc, #492]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a7a      	ldr	r2, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b78      	ldr	r3, [pc, #480]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a77      	ldr	r2, [pc, #476]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80045f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xd4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0xbc>
 8004602:	4b72      	ldr	r3, [pc, #456]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a71      	ldr	r2, [pc, #452]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b6f      	ldr	r3, [pc, #444]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6e      	ldr	r2, [pc, #440]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xd4>
 800461c:	4b6b      	ldr	r3, [pc, #428]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a6a      	ldr	r2, [pc, #424]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b68      	ldr	r3, [pc, #416]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a67      	ldr	r2, [pc, #412]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe f834 	bl	80026a8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fe f830 	bl	80026a8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e1fa      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xe4>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe f820 	bl	80026a8 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe f81c 	bl	80026a8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1e6      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b53      	ldr	r3, [pc, #332]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0x10c>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d063      	beq.n	8004762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800469a:	4b4c      	ldr	r3, [pc, #304]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d11c      	bne.n	80046ec <HAL_RCC_OscConfig+0x18c>
 80046b2:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	4b43      	ldr	r3, [pc, #268]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x176>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1ba      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4939      	ldr	r1, [pc, #228]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	e03a      	b.n	8004762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fd ffd5 	bl	80026a8 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004702:	f7fd ffd1 	bl	80026a8 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e19b      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4927      	ldr	r1, [pc, #156]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	e015      	b.n	8004762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x270>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473c:	f7fd ffb4 	bl	80026a8 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004744:	f7fd ffb0 	bl	80026a8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e17a      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d03a      	beq.n	80047e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d019      	beq.n	80047aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <HAL_RCC_OscConfig+0x274>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477c:	f7fd ff94 	bl	80026a8 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004784:	f7fd ff90 	bl	80026a8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e15a      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_RCC_OscConfig+0x26c>)
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047a2:	2001      	movs	r0, #1
 80047a4:	f000 fad8 	bl	8004d58 <RCC_Delay>
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <HAL_RCC_OscConfig+0x274>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b0:	f7fd ff7a 	bl	80026a8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b6:	e00f      	b.n	80047d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b8:	f7fd ff76 	bl	80026a8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d908      	bls.n	80047d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e140      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	42420000 	.word	0x42420000
 80047d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	4b9e      	ldr	r3, [pc, #632]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e9      	bne.n	80047b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a6 	beq.w	800493e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f6:	4b97      	ldr	r3, [pc, #604]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10d      	bne.n	800481e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	4b94      	ldr	r3, [pc, #592]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4a93      	ldr	r2, [pc, #588]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	61d3      	str	r3, [r2, #28]
 800480e:	4b91      	ldr	r3, [pc, #580]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b8e      	ldr	r3, [pc, #568]	; (8004a58 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482a:	4b8b      	ldr	r3, [pc, #556]	; (8004a58 <HAL_RCC_OscConfig+0x4f8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a8a      	ldr	r2, [pc, #552]	; (8004a58 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004836:	f7fd ff37 	bl	80026a8 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fd ff33 	bl	80026a8 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b64      	cmp	r3, #100	; 0x64
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0fd      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	4b81      	ldr	r3, [pc, #516]	; (8004a58 <HAL_RCC_OscConfig+0x4f8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x312>
 8004864:	4b7b      	ldr	r3, [pc, #492]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4a7a      	ldr	r2, [pc, #488]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6213      	str	r3, [r2, #32]
 8004870:	e02d      	b.n	80048ce <HAL_RCC_OscConfig+0x36e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x334>
 800487a:	4b76      	ldr	r3, [pc, #472]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a75      	ldr	r2, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6213      	str	r3, [r2, #32]
 8004886:	4b73      	ldr	r3, [pc, #460]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4a72      	ldr	r2, [pc, #456]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800488c:	f023 0304 	bic.w	r3, r3, #4
 8004890:	6213      	str	r3, [r2, #32]
 8004892:	e01c      	b.n	80048ce <HAL_RCC_OscConfig+0x36e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d10c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x356>
 800489c:	4b6d      	ldr	r3, [pc, #436]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4a6c      	ldr	r2, [pc, #432]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	6213      	str	r3, [r2, #32]
 80048a8:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	4a69      	ldr	r2, [pc, #420]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6213      	str	r3, [r2, #32]
 80048b4:	e00b      	b.n	80048ce <HAL_RCC_OscConfig+0x36e>
 80048b6:	4b67      	ldr	r3, [pc, #412]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4a66      	ldr	r2, [pc, #408]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	6213      	str	r3, [r2, #32]
 80048c2:	4b64      	ldr	r3, [pc, #400]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4a63      	ldr	r2, [pc, #396]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048c8:	f023 0304 	bic.w	r3, r3, #4
 80048cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d015      	beq.n	8004902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d6:	f7fd fee7 	bl	80026a8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd fee3 	bl	80026a8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e0ab      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f4:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ee      	beq.n	80048de <HAL_RCC_OscConfig+0x37e>
 8004900:	e014      	b.n	800492c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004902:	f7fd fed1 	bl	80026a8 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800490a:	f7fd fecd 	bl	80026a8 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	f241 3288 	movw	r2, #5000	; 0x1388
 8004918:	4293      	cmp	r3, r2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e095      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004920:	4b4c      	ldr	r3, [pc, #304]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ee      	bne.n	800490a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d105      	bne.n	800493e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004932:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	4a47      	ldr	r2, [pc, #284]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8081 	beq.w	8004a4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004948:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b08      	cmp	r3, #8
 8004952:	d061      	beq.n	8004a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d146      	bne.n	80049ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <HAL_RCC_OscConfig+0x4fc>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fd fea1 	bl	80026a8 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496a:	f7fd fe9d 	bl	80026a8 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e067      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497c:	4b35      	ldr	r3, [pc, #212]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f0      	bne.n	800496a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004990:	d108      	bne.n	80049a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004992:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	492d      	ldr	r1, [pc, #180]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a19      	ldr	r1, [r3, #32]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	430b      	orrs	r3, r1
 80049b6:	4927      	ldr	r1, [pc, #156]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <HAL_RCC_OscConfig+0x4fc>)
 80049be:	2201      	movs	r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c2:	f7fd fe71 	bl	80026a8 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ca:	f7fd fe6d 	bl	80026a8 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e037      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <HAL_RCC_OscConfig+0x46a>
 80049e8:	e02f      	b.n	8004a4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ea:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <HAL_RCC_OscConfig+0x4fc>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fd fe5a 	bl	80026a8 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd fe56 	bl	80026a8 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e020      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x498>
 8004a16:	e018      	b.n	8004a4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e013      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_OscConfig+0x4f4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	42420060 	.word	0x42420060

08004a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0d0      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d910      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 0207 	bic.w	r2, r3, #7
 8004a8a:	4965      	ldr	r1, [pc, #404]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0b8      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004abc:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	494d      	ldr	r1, [pc, #308]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d040      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d115      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e073      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06b      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4936      	ldr	r1, [pc, #216]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b50:	f7fd fdaa 	bl	80026a8 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fd fda6 	bl	80026a8 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e053      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b80:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d210      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 0207 	bic.w	r2, r3, #7
 8004b96:	4922      	ldr	r1, [pc, #136]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e032      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4916      	ldr	r1, [pc, #88]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	490e      	ldr	r1, [pc, #56]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bee:	f000 f821 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	490a      	ldr	r1, [pc, #40]	; (8004c28 <HAL_RCC_ClockConfig+0x1c8>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RCC_ClockConfig+0x1cc>)
 8004c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1d0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fd08 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40022000 	.word	0x40022000
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800cccc 	.word	0x0800cccc
 8004c2c:	20000018 	.word	0x20000018
 8004c30:	2000001c 	.word	0x2000001c

08004c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	b490      	push	{r4, r7}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c3c:	1d3c      	adds	r4, r7, #4
 8004c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c44:	f240 2301 	movw	r3, #513	; 0x201
 8004c48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	2300      	movs	r3, #0
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d002      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x40>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x46>
 8004c72:	e02d      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c76:	623b      	str	r3, [r7, #32]
      break;
 8004c78:	e02d      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	0c9b      	lsrs	r3, r3, #18
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c86:	4413      	add	r3, r2
 8004c88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0c5b      	lsrs	r3, r3, #17
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb2:	fb02 f203 	mul.w	r2, r2, r3
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbe:	e004      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cc4:	fb02 f303 	mul.w	r3, r2, r3
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	623b      	str	r3, [r7, #32]
      break;
 8004cce:	e002      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd2:	623b      	str	r3, [r7, #32]
      break;
 8004cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc90      	pop	{r4, r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	0800a498 	.word	0x0800a498
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	007a1200 	.word	0x007a1200
 8004cf0:	003d0900 	.word	0x003d0900

08004cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf8:	4b02      	ldr	r3, [pc, #8]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	20000018 	.word	0x20000018

08004d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d0c:	f7ff fff2 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4903      	ldr	r1, [pc, #12]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	0800ccdc 	.word	0x0800ccdc

08004d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d34:	f7ff ffde 	bl	8004cf4 <HAL_RCC_GetHCLKFreq>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	0adb      	lsrs	r3, r3, #11
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	4903      	ldr	r1, [pc, #12]	; (8004d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d46:	5ccb      	ldrb	r3, [r1, r3]
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	0800ccdc 	.word	0x0800ccdc

08004d58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <RCC_Delay+0x34>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <RCC_Delay+0x38>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	0a5b      	lsrs	r3, r3, #9
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d74:	bf00      	nop
  }
  while (Delay --);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1e5a      	subs	r2, r3, #1
 8004d7a:	60fa      	str	r2, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f9      	bne.n	8004d74 <RCC_Delay+0x1c>
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	20000018 	.word	0x20000018
 8004d90:	10624dd3 	.word	0x10624dd3

08004d94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d07d      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db4:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc0:	4b4c      	ldr	r3, [pc, #304]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4a4b      	ldr	r2, [pc, #300]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dca:	61d3      	str	r3, [r2, #28]
 8004dcc:	4b49      	ldr	r3, [pc, #292]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ddc:	4b46      	ldr	r3, [pc, #280]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d118      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de8:	4b43      	ldr	r3, [pc, #268]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a42      	ldr	r2, [pc, #264]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df4:	f7fd fc58 	bl	80026a8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfc:	f7fd fc54 	bl	80026a8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e06d      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e1a:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02e      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d027      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e38:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e42:	4b2e      	ldr	r3, [pc, #184]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e48:	4b2c      	ldr	r3, [pc, #176]	; (8004efc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e4e:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d014      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fd fc23 	bl	80026a8 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7fd fc1f 	bl	80026a8 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e036      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ee      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e88:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4917      	ldr	r1, [pc, #92]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4a13      	ldr	r2, [pc, #76]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	490b      	ldr	r1, [pc, #44]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ed6:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4904      	ldr	r1, [pc, #16]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40007000 	.word	0x40007000
 8004efc:	42420440 	.word	0x42420440

08004f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b08d      	sub	sp, #52	; 0x34
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f08:	4b5a      	ldr	r3, [pc, #360]	; (8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004f0a:	f107 040c 	add.w	r4, r7, #12
 8004f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f14:	f240 2301 	movw	r3, #513	; 0x201
 8004f18:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	2300      	movs	r3, #0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	f200 8091 	bhi.w	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d04c      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d07c      	beq.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f48:	e089      	b.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004f4a:	4b4b      	ldr	r3, [pc, #300]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f50:	4b49      	ldr	r3, [pc, #292]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8082 	beq.w	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	0c9b      	lsrs	r3, r3, #18
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f70:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d018      	beq.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f7c:	4b3e      	ldr	r3, [pc, #248]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	0c5b      	lsrs	r3, r3, #17
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004f9c:	4a37      	ldr	r2, [pc, #220]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	fb02 f303 	mul.w	r3, r2, r3
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fac:	e004      	b.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	4a33      	ldr	r2, [pc, #204]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004fb2:	fb02 f303 	mul.w	r3, r2, r3
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004fb8:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc4:	d102      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fca:	e04a      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	; (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fda:	e042      	b.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004fdc:	4b26      	ldr	r3, [pc, #152]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fec:	d108      	bne.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	e01f      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500a:	d109      	bne.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800500c:	4b1a      	ldr	r3, [pc, #104]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005018:	f649 4340 	movw	r3, #40000	; 0x9c40
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
 800501e:	e00f      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502a:	d11c      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800502c:	4b12      	ldr	r3, [pc, #72]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d016      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005038:	f24f 4324 	movw	r3, #62500	; 0xf424
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800503e:	e012      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005040:	e011      	b.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005042:	f7ff fe75 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 8005046:	4602      	mov	r2, r0
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0b9b      	lsrs	r3, r3, #14
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800505c:	e004      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005066:	bf00      	nop
    }
  }
  return (frequency);
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800506a:	4618      	mov	r0, r3
 800506c:	3734      	adds	r7, #52	; 0x34
 800506e:	46bd      	mov	sp, r7
 8005070:	bd90      	pop	{r4, r7, pc}
 8005072:	bf00      	nop
 8005074:	0800a4a8 	.word	0x0800a4a8
 8005078:	40021000 	.word	0x40021000
 800507c:	007a1200 	.word	0x007a1200
 8005080:	003d0900 	.word	0x003d0900
 8005084:	aaaaaaab 	.word	0xaaaaaaab

08005088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e01d      	b.n	80050d6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fd f8d0 	bl	8002254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f000 fb1e 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2201      	movs	r2, #1
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fcf2 	bl	8005adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a10      	ldr	r2, [pc, #64]	; (8005140 <HAL_TIM_PWM_Start+0x60>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d107      	bne.n	8005112 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b06      	cmp	r3, #6
 8005122:	d007      	beq.n	8005134 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00

08005144 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e07f      	b.n	8005258 <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fd f811 	bl	8002194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005188:	f023 0307 	bic.w	r3, r3, #7
 800518c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fab5 	bl	8005708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	f023 0303 	bic.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	4313      	orrs	r3, r2
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051e4:	f023 030c 	bic.w	r3, r3, #12
 80051e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	4313      	orrs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	031b      	lsls	r3, r3, #12
 8005214:	4313      	orrs	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	4313      	orrs	r3, r2
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_Encoder_Start_IT+0x18>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d010      	beq.n	8005298 <HAL_TIM_Encoder_Start_IT+0x38>
 8005276:	e01f      	b.n	80052b8 <HAL_TIM_Encoder_Start_IT+0x58>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2201      	movs	r2, #1
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fc2b 	bl	8005adc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0202 	orr.w	r2, r2, #2
 8005294:	60da      	str	r2, [r3, #12]
      break;
 8005296:	e02e      	b.n	80052f6 <HAL_TIM_Encoder_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	2104      	movs	r1, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fc1b 	bl	8005adc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0204 	orr.w	r2, r2, #4
 80052b4:	60da      	str	r2, [r3, #12]
      break;
 80052b6:	e01e      	b.n	80052f6 <HAL_TIM_Encoder_Start_IT+0x96>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2201      	movs	r2, #1
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fc0b 	bl	8005adc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	2104      	movs	r1, #4
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fc04 	bl	8005adc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0202 	orr.w	r2, r2, #2
 80052e2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0204 	orr.w	r2, r2, #4
 80052f2:	60da      	str	r2, [r3, #12]
      break;
 80052f4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b02      	cmp	r3, #2
 8005324:	d122      	bne.n	800536c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d11b      	bne.n	800536c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0202 	mvn.w	r2, #2
 800533c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9bc 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9af 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9be 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b04      	cmp	r3, #4
 8005378:	d122      	bne.n	80053c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d11b      	bne.n	80053c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0204 	mvn.w	r2, #4
 8005390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f992 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 80053ac:	e005      	b.n	80053ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f985 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f994 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d122      	bne.n	8005414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d11b      	bne.n	8005414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0208 	mvn.w	r2, #8
 80053e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2204      	movs	r2, #4
 80053ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f968 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 8005400:	e005      	b.n	800540e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f95b 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f96a 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b10      	cmp	r3, #16
 8005420:	d122      	bne.n	8005468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b10      	cmp	r3, #16
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0210 	mvn.w	r2, #16
 8005438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2208      	movs	r2, #8
 800543e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f93e 	bl	80056d0 <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f931 	bl	80056be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f940 	bl	80056e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0201 	mvn.w	r2, #1
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f90c 	bl	80056ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb7f 	bl	8005bbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f904 	bl	80056f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b20      	cmp	r3, #32
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0220 	mvn.w	r2, #32
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fb4a 	bl	8005bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005536:	2302      	movs	r3, #2
 8005538:	e0b4      	b.n	80056a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2202      	movs	r2, #2
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b0c      	cmp	r3, #12
 800554e:	f200 809f 	bhi.w	8005690 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005552:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	0800558d 	.word	0x0800558d
 800555c:	08005691 	.word	0x08005691
 8005560:	08005691 	.word	0x08005691
 8005564:	08005691 	.word	0x08005691
 8005568:	080055cd 	.word	0x080055cd
 800556c:	08005691 	.word	0x08005691
 8005570:	08005691 	.word	0x08005691
 8005574:	08005691 	.word	0x08005691
 8005578:	0800560f 	.word	0x0800560f
 800557c:	08005691 	.word	0x08005691
 8005580:	08005691 	.word	0x08005691
 8005584:	08005691 	.word	0x08005691
 8005588:	0800564f 	.word	0x0800564f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f91a 	bl	80057cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0208 	orr.w	r2, r2, #8
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0204 	bic.w	r2, r2, #4
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	619a      	str	r2, [r3, #24]
      break;
 80055ca:	e062      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f960 	bl	8005898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	619a      	str	r2, [r3, #24]
      break;
 800560c:	e041      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f9a9 	bl	800596c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0208 	orr.w	r2, r2, #8
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0204 	bic.w	r2, r2, #4
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	61da      	str	r2, [r3, #28]
      break;
 800564c:	e021      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f9f3 	bl	8005a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	021a      	lsls	r2, r3, #8
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	61da      	str	r2, [r3, #28]
      break;
 800568e:	e000      	b.n	8005692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005690:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
	...

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <TIM_Base_SetConfig+0xbc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <TIM_Base_SetConfig+0xc0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <TIM_Base_SetConfig+0xbc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <TIM_Base_SetConfig+0xc0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	615a      	str	r2, [r3, #20]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800

080057cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0303 	bic.w	r3, r3, #3
 8005802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 0302 	bic.w	r3, r3, #2
 8005814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <TIM_OC1_SetConfig+0xc8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d10c      	bne.n	8005842 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0308 	bic.w	r3, r3, #8
 800582e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f023 0304 	bic.w	r3, r3, #4
 8005840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <TIM_OC1_SetConfig+0xc8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40012c00 	.word	0x40012c00

08005898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0210 	bic.w	r2, r3, #16
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 0320 	bic.w	r3, r3, #32
 80058e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a1d      	ldr	r2, [pc, #116]	; (8005968 <TIM_OC2_SetConfig+0xd0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005912:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a14      	ldr	r2, [pc, #80]	; (8005968 <TIM_OC2_SetConfig+0xd0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d113      	bne.n	8005944 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00

0800596c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <TIM_OC3_SetConfig+0xd0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d10d      	bne.n	80059e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a14      	ldr	r2, [pc, #80]	; (8005a3c <TIM_OC3_SetConfig+0xd0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d113      	bne.n	8005a16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	011b      	lsls	r3, r3, #4
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00

08005a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	031b      	lsls	r3, r3, #12
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <TIM_OC4_SetConfig+0x98>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d109      	bne.n	8005ab4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	019b      	lsls	r3, r3, #6
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	40012c00 	.word	0x40012c00

08005adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2201      	movs	r2, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e032      	b.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b74:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <__errno>:
 8005bd0:	4b01      	ldr	r3, [pc, #4]	; (8005bd8 <__errno+0x8>)
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000024 	.word	0x20000024

08005bdc <__libc_init_array>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	2600      	movs	r6, #0
 8005be0:	4d0c      	ldr	r5, [pc, #48]	; (8005c14 <__libc_init_array+0x38>)
 8005be2:	4c0d      	ldr	r4, [pc, #52]	; (8005c18 <__libc_init_array+0x3c>)
 8005be4:	1b64      	subs	r4, r4, r5
 8005be6:	10a4      	asrs	r4, r4, #2
 8005be8:	42a6      	cmp	r6, r4
 8005bea:	d109      	bne.n	8005c00 <__libc_init_array+0x24>
 8005bec:	f004 fc2a 	bl	800a444 <_init>
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	4d0a      	ldr	r5, [pc, #40]	; (8005c1c <__libc_init_array+0x40>)
 8005bf4:	4c0a      	ldr	r4, [pc, #40]	; (8005c20 <__libc_init_array+0x44>)
 8005bf6:	1b64      	subs	r4, r4, r5
 8005bf8:	10a4      	asrs	r4, r4, #2
 8005bfa:	42a6      	cmp	r6, r4
 8005bfc:	d105      	bne.n	8005c0a <__libc_init_array+0x2e>
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c04:	4798      	blx	r3
 8005c06:	3601      	adds	r6, #1
 8005c08:	e7ee      	b.n	8005be8 <__libc_init_array+0xc>
 8005c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0e:	4798      	blx	r3
 8005c10:	3601      	adds	r6, #1
 8005c12:	e7f2      	b.n	8005bfa <__libc_init_array+0x1e>
 8005c14:	0800d1a4 	.word	0x0800d1a4
 8005c18:	0800d1a4 	.word	0x0800d1a4
 8005c1c:	0800d1a4 	.word	0x0800d1a4
 8005c20:	0800d1a8 	.word	0x0800d1a8

08005c24 <memset>:
 8005c24:	4603      	mov	r3, r0
 8005c26:	4402      	add	r2, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <__cvt>:
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	bfbb      	ittet	lt
 8005c3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	461f      	movlt	r7, r3
 8005c44:	2300      	movge	r3, #0
 8005c46:	232d      	movlt	r3, #45	; 0x2d
 8005c48:	b088      	sub	sp, #32
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c50:	7013      	strb	r3, [r2, #0]
 8005c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c54:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005c58:	f023 0820 	bic.w	r8, r3, #32
 8005c5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c60:	d005      	beq.n	8005c6e <__cvt+0x3a>
 8005c62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c66:	d100      	bne.n	8005c6a <__cvt+0x36>
 8005c68:	3501      	adds	r5, #1
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	e000      	b.n	8005c70 <__cvt+0x3c>
 8005c6e:	2303      	movs	r3, #3
 8005c70:	aa07      	add	r2, sp, #28
 8005c72:	9204      	str	r2, [sp, #16]
 8005c74:	aa06      	add	r2, sp, #24
 8005c76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c7a:	e9cd 3500 	strd	r3, r5, [sp]
 8005c7e:	4622      	mov	r2, r4
 8005c80:	463b      	mov	r3, r7
 8005c82:	f001 fda1 	bl	80077c8 <_dtoa_r>
 8005c86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	d102      	bne.n	8005c94 <__cvt+0x60>
 8005c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c90:	07db      	lsls	r3, r3, #31
 8005c92:	d522      	bpl.n	8005cda <__cvt+0xa6>
 8005c94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c98:	eb06 0905 	add.w	r9, r6, r5
 8005c9c:	d110      	bne.n	8005cc0 <__cvt+0x8c>
 8005c9e:	7833      	ldrb	r3, [r6, #0]
 8005ca0:	2b30      	cmp	r3, #48	; 0x30
 8005ca2:	d10a      	bne.n	8005cba <__cvt+0x86>
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa ff30 	bl	8000b10 <__aeabi_dcmpeq>
 8005cb0:	b918      	cbnz	r0, 8005cba <__cvt+0x86>
 8005cb2:	f1c5 0501 	rsb	r5, r5, #1
 8005cb6:	f8ca 5000 	str.w	r5, [sl]
 8005cba:	f8da 3000 	ldr.w	r3, [sl]
 8005cbe:	4499      	add	r9, r3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	f7fa ff22 	bl	8000b10 <__aeabi_dcmpeq>
 8005ccc:	b108      	cbz	r0, 8005cd2 <__cvt+0x9e>
 8005cce:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cd2:	2230      	movs	r2, #48	; 0x30
 8005cd4:	9b07      	ldr	r3, [sp, #28]
 8005cd6:	454b      	cmp	r3, r9
 8005cd8:	d307      	bcc.n	8005cea <__cvt+0xb6>
 8005cda:	4630      	mov	r0, r6
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ce0:	1b9b      	subs	r3, r3, r6
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	b008      	add	sp, #32
 8005ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cea:	1c59      	adds	r1, r3, #1
 8005cec:	9107      	str	r1, [sp, #28]
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	e7f0      	b.n	8005cd4 <__cvt+0xa0>

08005cf2 <__exponent>:
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cf6:	2900      	cmp	r1, #0
 8005cf8:	f803 2b02 	strb.w	r2, [r3], #2
 8005cfc:	bfb6      	itet	lt
 8005cfe:	222d      	movlt	r2, #45	; 0x2d
 8005d00:	222b      	movge	r2, #43	; 0x2b
 8005d02:	4249      	neglt	r1, r1
 8005d04:	2909      	cmp	r1, #9
 8005d06:	7042      	strb	r2, [r0, #1]
 8005d08:	dd2b      	ble.n	8005d62 <__exponent+0x70>
 8005d0a:	f10d 0407 	add.w	r4, sp, #7
 8005d0e:	46a4      	mov	ip, r4
 8005d10:	270a      	movs	r7, #10
 8005d12:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d16:	460a      	mov	r2, r1
 8005d18:	46a6      	mov	lr, r4
 8005d1a:	fb07 1516 	mls	r5, r7, r6, r1
 8005d1e:	2a63      	cmp	r2, #99	; 0x63
 8005d20:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005d24:	4631      	mov	r1, r6
 8005d26:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d2e:	dcf0      	bgt.n	8005d12 <__exponent+0x20>
 8005d30:	3130      	adds	r1, #48	; 0x30
 8005d32:	f1ae 0502 	sub.w	r5, lr, #2
 8005d36:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	1c44      	adds	r4, r0, #1
 8005d3e:	4561      	cmp	r1, ip
 8005d40:	d30a      	bcc.n	8005d58 <__exponent+0x66>
 8005d42:	f10d 0209 	add.w	r2, sp, #9
 8005d46:	eba2 020e 	sub.w	r2, r2, lr
 8005d4a:	4565      	cmp	r5, ip
 8005d4c:	bf88      	it	hi
 8005d4e:	2200      	movhi	r2, #0
 8005d50:	4413      	add	r3, r2
 8005d52:	1a18      	subs	r0, r3, r0
 8005d54:	b003      	add	sp, #12
 8005d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d5c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d60:	e7ed      	b.n	8005d3e <__exponent+0x4c>
 8005d62:	2330      	movs	r3, #48	; 0x30
 8005d64:	3130      	adds	r1, #48	; 0x30
 8005d66:	7083      	strb	r3, [r0, #2]
 8005d68:	70c1      	strb	r1, [r0, #3]
 8005d6a:	1d03      	adds	r3, r0, #4
 8005d6c:	e7f1      	b.n	8005d52 <__exponent+0x60>
	...

08005d70 <_printf_float>:
 8005d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d74:	b091      	sub	sp, #68	; 0x44
 8005d76:	460c      	mov	r4, r1
 8005d78:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	461f      	mov	r7, r3
 8005d80:	4605      	mov	r5, r0
 8005d82:	f002 fe75 	bl	8008a70 <_localeconv_r>
 8005d86:	6803      	ldr	r3, [r0, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8c:	f7fa f9e0 	bl	8000150 <strlen>
 8005d90:	2300      	movs	r3, #0
 8005d92:	930e      	str	r3, [sp, #56]	; 0x38
 8005d94:	f8d8 3000 	ldr.w	r3, [r8]
 8005d98:	900a      	str	r0, [sp, #40]	; 0x28
 8005d9a:	3307      	adds	r3, #7
 8005d9c:	f023 0307 	bic.w	r3, r3, #7
 8005da0:	f103 0208 	add.w	r2, r3, #8
 8005da4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005da8:	f8d4 b000 	ldr.w	fp, [r4]
 8005dac:	f8c8 2000 	str.w	r2, [r8]
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005db8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005dbc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4b9c      	ldr	r3, [pc, #624]	; (800603c <_printf_float+0x2cc>)
 8005dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dcc:	f7fa fed2 	bl	8000b74 <__aeabi_dcmpun>
 8005dd0:	bb70      	cbnz	r0, 8005e30 <_printf_float+0xc0>
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4b98      	ldr	r3, [pc, #608]	; (800603c <_printf_float+0x2cc>)
 8005dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ddc:	f7fa feac 	bl	8000b38 <__aeabi_dcmple>
 8005de0:	bb30      	cbnz	r0, 8005e30 <_printf_float+0xc0>
 8005de2:	2200      	movs	r2, #0
 8005de4:	2300      	movs	r3, #0
 8005de6:	4640      	mov	r0, r8
 8005de8:	4651      	mov	r1, sl
 8005dea:	f7fa fe9b 	bl	8000b24 <__aeabi_dcmplt>
 8005dee:	b110      	cbz	r0, 8005df6 <_printf_float+0x86>
 8005df0:	232d      	movs	r3, #45	; 0x2d
 8005df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df6:	4b92      	ldr	r3, [pc, #584]	; (8006040 <_printf_float+0x2d0>)
 8005df8:	4892      	ldr	r0, [pc, #584]	; (8006044 <_printf_float+0x2d4>)
 8005dfa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005dfe:	bf94      	ite	ls
 8005e00:	4698      	movls	r8, r3
 8005e02:	4680      	movhi	r8, r0
 8005e04:	2303      	movs	r3, #3
 8005e06:	f04f 0a00 	mov.w	sl, #0
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	f02b 0304 	bic.w	r3, fp, #4
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	4633      	mov	r3, r6
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	9700      	str	r7, [sp, #0]
 8005e1a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e1c:	f000 f9d4 	bl	80061c8 <_printf_common>
 8005e20:	3001      	adds	r0, #1
 8005e22:	f040 8090 	bne.w	8005f46 <_printf_float+0x1d6>
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	b011      	add	sp, #68	; 0x44
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e30:	4642      	mov	r2, r8
 8005e32:	4653      	mov	r3, sl
 8005e34:	4640      	mov	r0, r8
 8005e36:	4651      	mov	r1, sl
 8005e38:	f7fa fe9c 	bl	8000b74 <__aeabi_dcmpun>
 8005e3c:	b148      	cbz	r0, 8005e52 <_printf_float+0xe2>
 8005e3e:	f1ba 0f00 	cmp.w	sl, #0
 8005e42:	bfb8      	it	lt
 8005e44:	232d      	movlt	r3, #45	; 0x2d
 8005e46:	4880      	ldr	r0, [pc, #512]	; (8006048 <_printf_float+0x2d8>)
 8005e48:	bfb8      	it	lt
 8005e4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e4e:	4b7f      	ldr	r3, [pc, #508]	; (800604c <_printf_float+0x2dc>)
 8005e50:	e7d3      	b.n	8005dfa <_printf_float+0x8a>
 8005e52:	6863      	ldr	r3, [r4, #4]
 8005e54:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	d142      	bne.n	8005ee2 <_printf_float+0x172>
 8005e5c:	2306      	movs	r3, #6
 8005e5e:	6063      	str	r3, [r4, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	9206      	str	r2, [sp, #24]
 8005e64:	aa0e      	add	r2, sp, #56	; 0x38
 8005e66:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005e6a:	aa0d      	add	r2, sp, #52	; 0x34
 8005e6c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005e70:	9203      	str	r2, [sp, #12]
 8005e72:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005e76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	6863      	ldr	r3, [r4, #4]
 8005e7e:	4642      	mov	r2, r8
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	4628      	mov	r0, r5
 8005e84:	4653      	mov	r3, sl
 8005e86:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e88:	f7ff fed4 	bl	8005c34 <__cvt>
 8005e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e8e:	4680      	mov	r8, r0
 8005e90:	2947      	cmp	r1, #71	; 0x47
 8005e92:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e94:	d108      	bne.n	8005ea8 <_printf_float+0x138>
 8005e96:	1cc8      	adds	r0, r1, #3
 8005e98:	db02      	blt.n	8005ea0 <_printf_float+0x130>
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	dd40      	ble.n	8005f22 <_printf_float+0x1b2>
 8005ea0:	f1a9 0902 	sub.w	r9, r9, #2
 8005ea4:	fa5f f989 	uxtb.w	r9, r9
 8005ea8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005eac:	d81f      	bhi.n	8005eee <_printf_float+0x17e>
 8005eae:	464a      	mov	r2, r9
 8005eb0:	3901      	subs	r1, #1
 8005eb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005eb6:	910d      	str	r1, [sp, #52]	; 0x34
 8005eb8:	f7ff ff1b 	bl	8005cf2 <__exponent>
 8005ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	1813      	adds	r3, r2, r0
 8005ec2:	2a01      	cmp	r2, #1
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	dc02      	bgt.n	8005ece <_printf_float+0x15e>
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	07d2      	lsls	r2, r2, #31
 8005ecc:	d501      	bpl.n	8005ed2 <_printf_float+0x162>
 8005ece:	3301      	adds	r3, #1
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d09b      	beq.n	8005e12 <_printf_float+0xa2>
 8005eda:	232d      	movs	r3, #45	; 0x2d
 8005edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee0:	e797      	b.n	8005e12 <_printf_float+0xa2>
 8005ee2:	2947      	cmp	r1, #71	; 0x47
 8005ee4:	d1bc      	bne.n	8005e60 <_printf_float+0xf0>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1ba      	bne.n	8005e60 <_printf_float+0xf0>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e7b7      	b.n	8005e5e <_printf_float+0xee>
 8005eee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ef2:	d118      	bne.n	8005f26 <_printf_float+0x1b6>
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	6863      	ldr	r3, [r4, #4]
 8005ef8:	dd0b      	ble.n	8005f12 <_printf_float+0x1a2>
 8005efa:	6121      	str	r1, [r4, #16]
 8005efc:	b913      	cbnz	r3, 8005f04 <_printf_float+0x194>
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	07d0      	lsls	r0, r2, #31
 8005f02:	d502      	bpl.n	8005f0a <_printf_float+0x19a>
 8005f04:	3301      	adds	r3, #1
 8005f06:	440b      	add	r3, r1
 8005f08:	6123      	str	r3, [r4, #16]
 8005f0a:	f04f 0a00 	mov.w	sl, #0
 8005f0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f10:	e7df      	b.n	8005ed2 <_printf_float+0x162>
 8005f12:	b913      	cbnz	r3, 8005f1a <_printf_float+0x1aa>
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	07d2      	lsls	r2, r2, #31
 8005f18:	d501      	bpl.n	8005f1e <_printf_float+0x1ae>
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	e7f4      	b.n	8005f08 <_printf_float+0x198>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e7f2      	b.n	8005f08 <_printf_float+0x198>
 8005f22:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f28:	4299      	cmp	r1, r3
 8005f2a:	db05      	blt.n	8005f38 <_printf_float+0x1c8>
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	6121      	str	r1, [r4, #16]
 8005f30:	07d8      	lsls	r0, r3, #31
 8005f32:	d5ea      	bpl.n	8005f0a <_printf_float+0x19a>
 8005f34:	1c4b      	adds	r3, r1, #1
 8005f36:	e7e7      	b.n	8005f08 <_printf_float+0x198>
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	bfcc      	ite	gt
 8005f3c:	2201      	movgt	r2, #1
 8005f3e:	f1c1 0202 	rsble	r2, r1, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	e7e0      	b.n	8005f08 <_printf_float+0x198>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	055a      	lsls	r2, r3, #21
 8005f4a:	d407      	bmi.n	8005f5c <_printf_float+0x1ec>
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	4642      	mov	r2, r8
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	d12b      	bne.n	8005fb2 <_printf_float+0x242>
 8005f5a:	e764      	b.n	8005e26 <_printf_float+0xb6>
 8005f5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f60:	f240 80dd 	bls.w	800611e <_printf_float+0x3ae>
 8005f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f7fa fdd0 	bl	8000b10 <__aeabi_dcmpeq>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d033      	beq.n	8005fdc <_printf_float+0x26c>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	4a35      	ldr	r2, [pc, #212]	; (8006050 <_printf_float+0x2e0>)
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f af51 	beq.w	8005e26 <_printf_float+0xb6>
 8005f84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	db02      	blt.n	8005f92 <_printf_float+0x222>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	07d8      	lsls	r0, r3, #31
 8005f90:	d50f      	bpl.n	8005fb2 <_printf_float+0x242>
 8005f92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b8      	blx	r7
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	f43f af42 	beq.w	8005e26 <_printf_float+0xb6>
 8005fa2:	f04f 0800 	mov.w	r8, #0
 8005fa6:	f104 091a 	add.w	r9, r4, #26
 8005faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4543      	cmp	r3, r8
 8005fb0:	dc09      	bgt.n	8005fc6 <_printf_float+0x256>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	079b      	lsls	r3, r3, #30
 8005fb6:	f100 8102 	bmi.w	80061be <_printf_float+0x44e>
 8005fba:	68e0      	ldr	r0, [r4, #12]
 8005fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fbe:	4298      	cmp	r0, r3
 8005fc0:	bfb8      	it	lt
 8005fc2:	4618      	movlt	r0, r3
 8005fc4:	e731      	b.n	8005e2a <_printf_float+0xba>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	464a      	mov	r2, r9
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f af28 	beq.w	8005e26 <_printf_float+0xb6>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e7e6      	b.n	8005faa <_printf_float+0x23a>
 8005fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	dc38      	bgt.n	8006054 <_printf_float+0x2e4>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <_printf_float+0x2e0>)
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	f43f af1a 	beq.w	8005e26 <_printf_float+0xb6>
 8005ff2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d102      	bne.n	8006000 <_printf_float+0x290>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	07d9      	lsls	r1, r3, #31
 8005ffe:	d5d8      	bpl.n	8005fb2 <_printf_float+0x242>
 8006000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f af0b 	beq.w	8005e26 <_printf_float+0xb6>
 8006010:	f04f 0900 	mov.w	r9, #0
 8006014:	f104 0a1a 	add.w	sl, r4, #26
 8006018:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800601a:	425b      	negs	r3, r3
 800601c:	454b      	cmp	r3, r9
 800601e:	dc01      	bgt.n	8006024 <_printf_float+0x2b4>
 8006020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006022:	e794      	b.n	8005f4e <_printf_float+0x1de>
 8006024:	2301      	movs	r3, #1
 8006026:	4652      	mov	r2, sl
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f aef9 	beq.w	8005e26 <_printf_float+0xb6>
 8006034:	f109 0901 	add.w	r9, r9, #1
 8006038:	e7ee      	b.n	8006018 <_printf_float+0x2a8>
 800603a:	bf00      	nop
 800603c:	7fefffff 	.word	0x7fefffff
 8006040:	0800cce8 	.word	0x0800cce8
 8006044:	0800ccec 	.word	0x0800ccec
 8006048:	0800ccf4 	.word	0x0800ccf4
 800604c:	0800ccf0 	.word	0x0800ccf0
 8006050:	0800ccf8 	.word	0x0800ccf8
 8006054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006058:	429a      	cmp	r2, r3
 800605a:	bfa8      	it	ge
 800605c:	461a      	movge	r2, r3
 800605e:	2a00      	cmp	r2, #0
 8006060:	4691      	mov	r9, r2
 8006062:	dc37      	bgt.n	80060d4 <_printf_float+0x364>
 8006064:	f04f 0b00 	mov.w	fp, #0
 8006068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800606c:	f104 021a 	add.w	r2, r4, #26
 8006070:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006074:	ebaa 0309 	sub.w	r3, sl, r9
 8006078:	455b      	cmp	r3, fp
 800607a:	dc33      	bgt.n	80060e4 <_printf_float+0x374>
 800607c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006080:	429a      	cmp	r2, r3
 8006082:	db3b      	blt.n	80060fc <_printf_float+0x38c>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07da      	lsls	r2, r3, #31
 8006088:	d438      	bmi.n	80060fc <_printf_float+0x38c>
 800608a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800608c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800608e:	eba2 030a 	sub.w	r3, r2, sl
 8006092:	eba2 0901 	sub.w	r9, r2, r1
 8006096:	4599      	cmp	r9, r3
 8006098:	bfa8      	it	ge
 800609a:	4699      	movge	r9, r3
 800609c:	f1b9 0f00 	cmp.w	r9, #0
 80060a0:	dc34      	bgt.n	800610c <_printf_float+0x39c>
 80060a2:	f04f 0800 	mov.w	r8, #0
 80060a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060aa:	f104 0a1a 	add.w	sl, r4, #26
 80060ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	eba3 0309 	sub.w	r3, r3, r9
 80060b8:	4543      	cmp	r3, r8
 80060ba:	f77f af7a 	ble.w	8005fb2 <_printf_float+0x242>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f aeac 	beq.w	8005e26 <_printf_float+0xb6>
 80060ce:	f108 0801 	add.w	r8, r8, #1
 80060d2:	e7ec      	b.n	80060ae <_printf_float+0x33e>
 80060d4:	4613      	mov	r3, r2
 80060d6:	4631      	mov	r1, r6
 80060d8:	4642      	mov	r2, r8
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	d1c0      	bne.n	8006064 <_printf_float+0x2f4>
 80060e2:	e6a0      	b.n	8005e26 <_printf_float+0xb6>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f ae99 	beq.w	8005e26 <_printf_float+0xb6>
 80060f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060f6:	f10b 0b01 	add.w	fp, fp, #1
 80060fa:	e7b9      	b.n	8006070 <_printf_float+0x300>
 80060fc:	4631      	mov	r1, r6
 80060fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006102:	4628      	mov	r0, r5
 8006104:	47b8      	blx	r7
 8006106:	3001      	adds	r0, #1
 8006108:	d1bf      	bne.n	800608a <_printf_float+0x31a>
 800610a:	e68c      	b.n	8005e26 <_printf_float+0xb6>
 800610c:	464b      	mov	r3, r9
 800610e:	4631      	mov	r1, r6
 8006110:	4628      	mov	r0, r5
 8006112:	eb08 020a 	add.w	r2, r8, sl
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	d1c2      	bne.n	80060a2 <_printf_float+0x332>
 800611c:	e683      	b.n	8005e26 <_printf_float+0xb6>
 800611e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006120:	2a01      	cmp	r2, #1
 8006122:	dc01      	bgt.n	8006128 <_printf_float+0x3b8>
 8006124:	07db      	lsls	r3, r3, #31
 8006126:	d537      	bpl.n	8006198 <_printf_float+0x428>
 8006128:	2301      	movs	r3, #1
 800612a:	4642      	mov	r2, r8
 800612c:	4631      	mov	r1, r6
 800612e:	4628      	mov	r0, r5
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	f43f ae77 	beq.w	8005e26 <_printf_float+0xb6>
 8006138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f ae6f 	beq.w	8005e26 <_printf_float+0xb6>
 8006148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800614c:	2200      	movs	r2, #0
 800614e:	2300      	movs	r3, #0
 8006150:	f7fa fcde 	bl	8000b10 <__aeabi_dcmpeq>
 8006154:	b9d8      	cbnz	r0, 800618e <_printf_float+0x41e>
 8006156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006158:	f108 0201 	add.w	r2, r8, #1
 800615c:	3b01      	subs	r3, #1
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	d10e      	bne.n	8006186 <_printf_float+0x416>
 8006168:	e65d      	b.n	8005e26 <_printf_float+0xb6>
 800616a:	2301      	movs	r3, #1
 800616c:	464a      	mov	r2, r9
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	f43f ae56 	beq.w	8005e26 <_printf_float+0xb6>
 800617a:	f108 0801 	add.w	r8, r8, #1
 800617e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006180:	3b01      	subs	r3, #1
 8006182:	4543      	cmp	r3, r8
 8006184:	dcf1      	bgt.n	800616a <_printf_float+0x3fa>
 8006186:	4653      	mov	r3, sl
 8006188:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800618c:	e6e0      	b.n	8005f50 <_printf_float+0x1e0>
 800618e:	f04f 0800 	mov.w	r8, #0
 8006192:	f104 091a 	add.w	r9, r4, #26
 8006196:	e7f2      	b.n	800617e <_printf_float+0x40e>
 8006198:	2301      	movs	r3, #1
 800619a:	4642      	mov	r2, r8
 800619c:	e7df      	b.n	800615e <_printf_float+0x3ee>
 800619e:	2301      	movs	r3, #1
 80061a0:	464a      	mov	r2, r9
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f ae3c 	beq.w	8005e26 <_printf_float+0xb6>
 80061ae:	f108 0801 	add.w	r8, r8, #1
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80061b6:	1a5b      	subs	r3, r3, r1
 80061b8:	4543      	cmp	r3, r8
 80061ba:	dcf0      	bgt.n	800619e <_printf_float+0x42e>
 80061bc:	e6fd      	b.n	8005fba <_printf_float+0x24a>
 80061be:	f04f 0800 	mov.w	r8, #0
 80061c2:	f104 0919 	add.w	r9, r4, #25
 80061c6:	e7f4      	b.n	80061b2 <_printf_float+0x442>

080061c8 <_printf_common>:
 80061c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061cc:	4616      	mov	r6, r2
 80061ce:	4699      	mov	r9, r3
 80061d0:	688a      	ldr	r2, [r1, #8]
 80061d2:	690b      	ldr	r3, [r1, #16]
 80061d4:	4607      	mov	r7, r0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	bfb8      	it	lt
 80061da:	4613      	movlt	r3, r2
 80061dc:	6033      	str	r3, [r6, #0]
 80061de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e2:	460c      	mov	r4, r1
 80061e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061e8:	b10a      	cbz	r2, 80061ee <_printf_common+0x26>
 80061ea:	3301      	adds	r3, #1
 80061ec:	6033      	str	r3, [r6, #0]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	0699      	lsls	r1, r3, #26
 80061f2:	bf42      	ittt	mi
 80061f4:	6833      	ldrmi	r3, [r6, #0]
 80061f6:	3302      	addmi	r3, #2
 80061f8:	6033      	strmi	r3, [r6, #0]
 80061fa:	6825      	ldr	r5, [r4, #0]
 80061fc:	f015 0506 	ands.w	r5, r5, #6
 8006200:	d106      	bne.n	8006210 <_printf_common+0x48>
 8006202:	f104 0a19 	add.w	sl, r4, #25
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	6832      	ldr	r2, [r6, #0]
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	42ab      	cmp	r3, r5
 800620e:	dc28      	bgt.n	8006262 <_printf_common+0x9a>
 8006210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006214:	1e13      	subs	r3, r2, #0
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	bf18      	it	ne
 800621a:	2301      	movne	r3, #1
 800621c:	0692      	lsls	r2, r2, #26
 800621e:	d42d      	bmi.n	800627c <_printf_common+0xb4>
 8006220:	4649      	mov	r1, r9
 8006222:	4638      	mov	r0, r7
 8006224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006228:	47c0      	blx	r8
 800622a:	3001      	adds	r0, #1
 800622c:	d020      	beq.n	8006270 <_printf_common+0xa8>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	68e5      	ldr	r5, [r4, #12]
 8006232:	f003 0306 	and.w	r3, r3, #6
 8006236:	2b04      	cmp	r3, #4
 8006238:	bf18      	it	ne
 800623a:	2500      	movne	r5, #0
 800623c:	6832      	ldr	r2, [r6, #0]
 800623e:	f04f 0600 	mov.w	r6, #0
 8006242:	68a3      	ldr	r3, [r4, #8]
 8006244:	bf08      	it	eq
 8006246:	1aad      	subeq	r5, r5, r2
 8006248:	6922      	ldr	r2, [r4, #16]
 800624a:	bf08      	it	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	4293      	cmp	r3, r2
 8006252:	bfc4      	itt	gt
 8006254:	1a9b      	subgt	r3, r3, r2
 8006256:	18ed      	addgt	r5, r5, r3
 8006258:	341a      	adds	r4, #26
 800625a:	42b5      	cmp	r5, r6
 800625c:	d11a      	bne.n	8006294 <_printf_common+0xcc>
 800625e:	2000      	movs	r0, #0
 8006260:	e008      	b.n	8006274 <_printf_common+0xac>
 8006262:	2301      	movs	r3, #1
 8006264:	4652      	mov	r2, sl
 8006266:	4649      	mov	r1, r9
 8006268:	4638      	mov	r0, r7
 800626a:	47c0      	blx	r8
 800626c:	3001      	adds	r0, #1
 800626e:	d103      	bne.n	8006278 <_printf_common+0xb0>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	3501      	adds	r5, #1
 800627a:	e7c4      	b.n	8006206 <_printf_common+0x3e>
 800627c:	2030      	movs	r0, #48	; 0x30
 800627e:	18e1      	adds	r1, r4, r3
 8006280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800628a:	4422      	add	r2, r4
 800628c:	3302      	adds	r3, #2
 800628e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006292:	e7c5      	b.n	8006220 <_printf_common+0x58>
 8006294:	2301      	movs	r3, #1
 8006296:	4622      	mov	r2, r4
 8006298:	4649      	mov	r1, r9
 800629a:	4638      	mov	r0, r7
 800629c:	47c0      	blx	r8
 800629e:	3001      	adds	r0, #1
 80062a0:	d0e6      	beq.n	8006270 <_printf_common+0xa8>
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7d9      	b.n	800625a <_printf_common+0x92>
	...

080062a8 <_printf_i>:
 80062a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	7e27      	ldrb	r7, [r4, #24]
 80062b0:	4691      	mov	r9, r2
 80062b2:	2f78      	cmp	r7, #120	; 0x78
 80062b4:	4680      	mov	r8, r0
 80062b6:	469a      	mov	sl, r3
 80062b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062be:	d807      	bhi.n	80062d0 <_printf_i+0x28>
 80062c0:	2f62      	cmp	r7, #98	; 0x62
 80062c2:	d80a      	bhi.n	80062da <_printf_i+0x32>
 80062c4:	2f00      	cmp	r7, #0
 80062c6:	f000 80d9 	beq.w	800647c <_printf_i+0x1d4>
 80062ca:	2f58      	cmp	r7, #88	; 0x58
 80062cc:	f000 80a4 	beq.w	8006418 <_printf_i+0x170>
 80062d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d8:	e03a      	b.n	8006350 <_printf_i+0xa8>
 80062da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062de:	2b15      	cmp	r3, #21
 80062e0:	d8f6      	bhi.n	80062d0 <_printf_i+0x28>
 80062e2:	a001      	add	r0, pc, #4	; (adr r0, 80062e8 <_printf_i+0x40>)
 80062e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062e8:	08006341 	.word	0x08006341
 80062ec:	08006355 	.word	0x08006355
 80062f0:	080062d1 	.word	0x080062d1
 80062f4:	080062d1 	.word	0x080062d1
 80062f8:	080062d1 	.word	0x080062d1
 80062fc:	080062d1 	.word	0x080062d1
 8006300:	08006355 	.word	0x08006355
 8006304:	080062d1 	.word	0x080062d1
 8006308:	080062d1 	.word	0x080062d1
 800630c:	080062d1 	.word	0x080062d1
 8006310:	080062d1 	.word	0x080062d1
 8006314:	08006463 	.word	0x08006463
 8006318:	08006385 	.word	0x08006385
 800631c:	08006445 	.word	0x08006445
 8006320:	080062d1 	.word	0x080062d1
 8006324:	080062d1 	.word	0x080062d1
 8006328:	08006485 	.word	0x08006485
 800632c:	080062d1 	.word	0x080062d1
 8006330:	08006385 	.word	0x08006385
 8006334:	080062d1 	.word	0x080062d1
 8006338:	080062d1 	.word	0x080062d1
 800633c:	0800644d 	.word	0x0800644d
 8006340:	680b      	ldr	r3, [r1, #0]
 8006342:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	600a      	str	r2, [r1, #0]
 800634c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006350:	2301      	movs	r3, #1
 8006352:	e0a4      	b.n	800649e <_printf_i+0x1f6>
 8006354:	6825      	ldr	r5, [r4, #0]
 8006356:	6808      	ldr	r0, [r1, #0]
 8006358:	062e      	lsls	r6, r5, #24
 800635a:	f100 0304 	add.w	r3, r0, #4
 800635e:	d50a      	bpl.n	8006376 <_printf_i+0xce>
 8006360:	6805      	ldr	r5, [r0, #0]
 8006362:	600b      	str	r3, [r1, #0]
 8006364:	2d00      	cmp	r5, #0
 8006366:	da03      	bge.n	8006370 <_printf_i+0xc8>
 8006368:	232d      	movs	r3, #45	; 0x2d
 800636a:	426d      	negs	r5, r5
 800636c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006370:	230a      	movs	r3, #10
 8006372:	485e      	ldr	r0, [pc, #376]	; (80064ec <_printf_i+0x244>)
 8006374:	e019      	b.n	80063aa <_printf_i+0x102>
 8006376:	f015 0f40 	tst.w	r5, #64	; 0x40
 800637a:	6805      	ldr	r5, [r0, #0]
 800637c:	600b      	str	r3, [r1, #0]
 800637e:	bf18      	it	ne
 8006380:	b22d      	sxthne	r5, r5
 8006382:	e7ef      	b.n	8006364 <_printf_i+0xbc>
 8006384:	680b      	ldr	r3, [r1, #0]
 8006386:	6825      	ldr	r5, [r4, #0]
 8006388:	1d18      	adds	r0, r3, #4
 800638a:	6008      	str	r0, [r1, #0]
 800638c:	0628      	lsls	r0, r5, #24
 800638e:	d501      	bpl.n	8006394 <_printf_i+0xec>
 8006390:	681d      	ldr	r5, [r3, #0]
 8006392:	e002      	b.n	800639a <_printf_i+0xf2>
 8006394:	0669      	lsls	r1, r5, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0xe8>
 8006398:	881d      	ldrh	r5, [r3, #0]
 800639a:	2f6f      	cmp	r7, #111	; 0x6f
 800639c:	bf0c      	ite	eq
 800639e:	2308      	moveq	r3, #8
 80063a0:	230a      	movne	r3, #10
 80063a2:	4852      	ldr	r0, [pc, #328]	; (80064ec <_printf_i+0x244>)
 80063a4:	2100      	movs	r1, #0
 80063a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063aa:	6866      	ldr	r6, [r4, #4]
 80063ac:	2e00      	cmp	r6, #0
 80063ae:	bfa8      	it	ge
 80063b0:	6821      	ldrge	r1, [r4, #0]
 80063b2:	60a6      	str	r6, [r4, #8]
 80063b4:	bfa4      	itt	ge
 80063b6:	f021 0104 	bicge.w	r1, r1, #4
 80063ba:	6021      	strge	r1, [r4, #0]
 80063bc:	b90d      	cbnz	r5, 80063c2 <_printf_i+0x11a>
 80063be:	2e00      	cmp	r6, #0
 80063c0:	d04d      	beq.n	800645e <_printf_i+0x1b6>
 80063c2:	4616      	mov	r6, r2
 80063c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80063c8:	fb03 5711 	mls	r7, r3, r1, r5
 80063cc:	5dc7      	ldrb	r7, [r0, r7]
 80063ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063d2:	462f      	mov	r7, r5
 80063d4:	42bb      	cmp	r3, r7
 80063d6:	460d      	mov	r5, r1
 80063d8:	d9f4      	bls.n	80063c4 <_printf_i+0x11c>
 80063da:	2b08      	cmp	r3, #8
 80063dc:	d10b      	bne.n	80063f6 <_printf_i+0x14e>
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	07df      	lsls	r7, r3, #31
 80063e2:	d508      	bpl.n	80063f6 <_printf_i+0x14e>
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	6861      	ldr	r1, [r4, #4]
 80063e8:	4299      	cmp	r1, r3
 80063ea:	bfde      	ittt	le
 80063ec:	2330      	movle	r3, #48	; 0x30
 80063ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063f6:	1b92      	subs	r2, r2, r6
 80063f8:	6122      	str	r2, [r4, #16]
 80063fa:	464b      	mov	r3, r9
 80063fc:	4621      	mov	r1, r4
 80063fe:	4640      	mov	r0, r8
 8006400:	f8cd a000 	str.w	sl, [sp]
 8006404:	aa03      	add	r2, sp, #12
 8006406:	f7ff fedf 	bl	80061c8 <_printf_common>
 800640a:	3001      	adds	r0, #1
 800640c:	d14c      	bne.n	80064a8 <_printf_i+0x200>
 800640e:	f04f 30ff 	mov.w	r0, #4294967295
 8006412:	b004      	add	sp, #16
 8006414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006418:	4834      	ldr	r0, [pc, #208]	; (80064ec <_printf_i+0x244>)
 800641a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800641e:	680e      	ldr	r6, [r1, #0]
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	f856 5b04 	ldr.w	r5, [r6], #4
 8006426:	061f      	lsls	r7, r3, #24
 8006428:	600e      	str	r6, [r1, #0]
 800642a:	d514      	bpl.n	8006456 <_printf_i+0x1ae>
 800642c:	07d9      	lsls	r1, r3, #31
 800642e:	bf44      	itt	mi
 8006430:	f043 0320 	orrmi.w	r3, r3, #32
 8006434:	6023      	strmi	r3, [r4, #0]
 8006436:	b91d      	cbnz	r5, 8006440 <_printf_i+0x198>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	f023 0320 	bic.w	r3, r3, #32
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	2310      	movs	r3, #16
 8006442:	e7af      	b.n	80063a4 <_printf_i+0xfc>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f043 0320 	orr.w	r3, r3, #32
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	2378      	movs	r3, #120	; 0x78
 800644e:	4828      	ldr	r0, [pc, #160]	; (80064f0 <_printf_i+0x248>)
 8006450:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006454:	e7e3      	b.n	800641e <_printf_i+0x176>
 8006456:	065e      	lsls	r6, r3, #25
 8006458:	bf48      	it	mi
 800645a:	b2ad      	uxthmi	r5, r5
 800645c:	e7e6      	b.n	800642c <_printf_i+0x184>
 800645e:	4616      	mov	r6, r2
 8006460:	e7bb      	b.n	80063da <_printf_i+0x132>
 8006462:	680b      	ldr	r3, [r1, #0]
 8006464:	6826      	ldr	r6, [r4, #0]
 8006466:	1d1d      	adds	r5, r3, #4
 8006468:	6960      	ldr	r0, [r4, #20]
 800646a:	600d      	str	r5, [r1, #0]
 800646c:	0635      	lsls	r5, r6, #24
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	d501      	bpl.n	8006476 <_printf_i+0x1ce>
 8006472:	6018      	str	r0, [r3, #0]
 8006474:	e002      	b.n	800647c <_printf_i+0x1d4>
 8006476:	0671      	lsls	r1, r6, #25
 8006478:	d5fb      	bpl.n	8006472 <_printf_i+0x1ca>
 800647a:	8018      	strh	r0, [r3, #0]
 800647c:	2300      	movs	r3, #0
 800647e:	4616      	mov	r6, r2
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	e7ba      	b.n	80063fa <_printf_i+0x152>
 8006484:	680b      	ldr	r3, [r1, #0]
 8006486:	1d1a      	adds	r2, r3, #4
 8006488:	600a      	str	r2, [r1, #0]
 800648a:	681e      	ldr	r6, [r3, #0]
 800648c:	2100      	movs	r1, #0
 800648e:	4630      	mov	r0, r6
 8006490:	6862      	ldr	r2, [r4, #4]
 8006492:	f002 fb0b 	bl	8008aac <memchr>
 8006496:	b108      	cbz	r0, 800649c <_printf_i+0x1f4>
 8006498:	1b80      	subs	r0, r0, r6
 800649a:	6060      	str	r0, [r4, #4]
 800649c:	6863      	ldr	r3, [r4, #4]
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	2300      	movs	r3, #0
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a6:	e7a8      	b.n	80063fa <_printf_i+0x152>
 80064a8:	4632      	mov	r2, r6
 80064aa:	4649      	mov	r1, r9
 80064ac:	4640      	mov	r0, r8
 80064ae:	6923      	ldr	r3, [r4, #16]
 80064b0:	47d0      	blx	sl
 80064b2:	3001      	adds	r0, #1
 80064b4:	d0ab      	beq.n	800640e <_printf_i+0x166>
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	079b      	lsls	r3, r3, #30
 80064ba:	d413      	bmi.n	80064e4 <_printf_i+0x23c>
 80064bc:	68e0      	ldr	r0, [r4, #12]
 80064be:	9b03      	ldr	r3, [sp, #12]
 80064c0:	4298      	cmp	r0, r3
 80064c2:	bfb8      	it	lt
 80064c4:	4618      	movlt	r0, r3
 80064c6:	e7a4      	b.n	8006412 <_printf_i+0x16a>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4632      	mov	r2, r6
 80064cc:	4649      	mov	r1, r9
 80064ce:	4640      	mov	r0, r8
 80064d0:	47d0      	blx	sl
 80064d2:	3001      	adds	r0, #1
 80064d4:	d09b      	beq.n	800640e <_printf_i+0x166>
 80064d6:	3501      	adds	r5, #1
 80064d8:	68e3      	ldr	r3, [r4, #12]
 80064da:	9903      	ldr	r1, [sp, #12]
 80064dc:	1a5b      	subs	r3, r3, r1
 80064de:	42ab      	cmp	r3, r5
 80064e0:	dcf2      	bgt.n	80064c8 <_printf_i+0x220>
 80064e2:	e7eb      	b.n	80064bc <_printf_i+0x214>
 80064e4:	2500      	movs	r5, #0
 80064e6:	f104 0619 	add.w	r6, r4, #25
 80064ea:	e7f5      	b.n	80064d8 <_printf_i+0x230>
 80064ec:	0800ccfa 	.word	0x0800ccfa
 80064f0:	0800cd0b 	.word	0x0800cd0b

080064f4 <_scanf_float>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	b087      	sub	sp, #28
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	688b      	ldr	r3, [r1, #8]
 80064fe:	4617      	mov	r7, r2
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006506:	bf85      	ittet	hi
 8006508:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800650c:	195b      	addhi	r3, r3, r5
 800650e:	2300      	movls	r3, #0
 8006510:	9302      	strhi	r3, [sp, #8]
 8006512:	bf88      	it	hi
 8006514:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006518:	468b      	mov	fp, r1
 800651a:	f04f 0500 	mov.w	r5, #0
 800651e:	bf8c      	ite	hi
 8006520:	608b      	strhi	r3, [r1, #8]
 8006522:	9302      	strls	r3, [sp, #8]
 8006524:	680b      	ldr	r3, [r1, #0]
 8006526:	4680      	mov	r8, r0
 8006528:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800652c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006530:	460c      	mov	r4, r1
 8006532:	465e      	mov	r6, fp
 8006534:	46aa      	mov	sl, r5
 8006536:	46a9      	mov	r9, r5
 8006538:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800653c:	9501      	str	r5, [sp, #4]
 800653e:	68a2      	ldr	r2, [r4, #8]
 8006540:	b152      	cbz	r2, 8006558 <_scanf_float+0x64>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b4e      	cmp	r3, #78	; 0x4e
 8006548:	d864      	bhi.n	8006614 <_scanf_float+0x120>
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d83c      	bhi.n	80065c8 <_scanf_float+0xd4>
 800654e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006552:	b2c8      	uxtb	r0, r1
 8006554:	280e      	cmp	r0, #14
 8006556:	d93a      	bls.n	80065ce <_scanf_float+0xda>
 8006558:	f1b9 0f00 	cmp.w	r9, #0
 800655c:	d003      	beq.n	8006566 <_scanf_float+0x72>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800656a:	f1ba 0f01 	cmp.w	sl, #1
 800656e:	f200 8113 	bhi.w	8006798 <_scanf_float+0x2a4>
 8006572:	455e      	cmp	r6, fp
 8006574:	f200 8105 	bhi.w	8006782 <_scanf_float+0x28e>
 8006578:	2501      	movs	r5, #1
 800657a:	4628      	mov	r0, r5
 800657c:	b007      	add	sp, #28
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006586:	2a0d      	cmp	r2, #13
 8006588:	d8e6      	bhi.n	8006558 <_scanf_float+0x64>
 800658a:	a101      	add	r1, pc, #4	; (adr r1, 8006590 <_scanf_float+0x9c>)
 800658c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006590:	080066cf 	.word	0x080066cf
 8006594:	08006559 	.word	0x08006559
 8006598:	08006559 	.word	0x08006559
 800659c:	08006559 	.word	0x08006559
 80065a0:	0800672f 	.word	0x0800672f
 80065a4:	08006707 	.word	0x08006707
 80065a8:	08006559 	.word	0x08006559
 80065ac:	08006559 	.word	0x08006559
 80065b0:	080066dd 	.word	0x080066dd
 80065b4:	08006559 	.word	0x08006559
 80065b8:	08006559 	.word	0x08006559
 80065bc:	08006559 	.word	0x08006559
 80065c0:	08006559 	.word	0x08006559
 80065c4:	08006695 	.word	0x08006695
 80065c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065cc:	e7db      	b.n	8006586 <_scanf_float+0x92>
 80065ce:	290e      	cmp	r1, #14
 80065d0:	d8c2      	bhi.n	8006558 <_scanf_float+0x64>
 80065d2:	a001      	add	r0, pc, #4	; (adr r0, 80065d8 <_scanf_float+0xe4>)
 80065d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065d8:	08006687 	.word	0x08006687
 80065dc:	08006559 	.word	0x08006559
 80065e0:	08006687 	.word	0x08006687
 80065e4:	0800671b 	.word	0x0800671b
 80065e8:	08006559 	.word	0x08006559
 80065ec:	08006635 	.word	0x08006635
 80065f0:	08006671 	.word	0x08006671
 80065f4:	08006671 	.word	0x08006671
 80065f8:	08006671 	.word	0x08006671
 80065fc:	08006671 	.word	0x08006671
 8006600:	08006671 	.word	0x08006671
 8006604:	08006671 	.word	0x08006671
 8006608:	08006671 	.word	0x08006671
 800660c:	08006671 	.word	0x08006671
 8006610:	08006671 	.word	0x08006671
 8006614:	2b6e      	cmp	r3, #110	; 0x6e
 8006616:	d809      	bhi.n	800662c <_scanf_float+0x138>
 8006618:	2b60      	cmp	r3, #96	; 0x60
 800661a:	d8b2      	bhi.n	8006582 <_scanf_float+0x8e>
 800661c:	2b54      	cmp	r3, #84	; 0x54
 800661e:	d077      	beq.n	8006710 <_scanf_float+0x21c>
 8006620:	2b59      	cmp	r3, #89	; 0x59
 8006622:	d199      	bne.n	8006558 <_scanf_float+0x64>
 8006624:	2d07      	cmp	r5, #7
 8006626:	d197      	bne.n	8006558 <_scanf_float+0x64>
 8006628:	2508      	movs	r5, #8
 800662a:	e029      	b.n	8006680 <_scanf_float+0x18c>
 800662c:	2b74      	cmp	r3, #116	; 0x74
 800662e:	d06f      	beq.n	8006710 <_scanf_float+0x21c>
 8006630:	2b79      	cmp	r3, #121	; 0x79
 8006632:	e7f6      	b.n	8006622 <_scanf_float+0x12e>
 8006634:	6821      	ldr	r1, [r4, #0]
 8006636:	05c8      	lsls	r0, r1, #23
 8006638:	d51a      	bpl.n	8006670 <_scanf_float+0x17c>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006640:	6021      	str	r1, [r4, #0]
 8006642:	f109 0901 	add.w	r9, r9, #1
 8006646:	b11b      	cbz	r3, 8006650 <_scanf_float+0x15c>
 8006648:	3b01      	subs	r3, #1
 800664a:	3201      	adds	r2, #1
 800664c:	9302      	str	r3, [sp, #8]
 800664e:	60a2      	str	r2, [r4, #8]
 8006650:	68a3      	ldr	r3, [r4, #8]
 8006652:	3b01      	subs	r3, #1
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	3301      	adds	r3, #1
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3b01      	subs	r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	f340 8084 	ble.w	8006770 <_scanf_float+0x27c>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	e766      	b.n	800653e <_scanf_float+0x4a>
 8006670:	eb1a 0f05 	cmn.w	sl, r5
 8006674:	f47f af70 	bne.w	8006558 <_scanf_float+0x64>
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	f806 3b01 	strb.w	r3, [r6], #1
 8006684:	e7e4      	b.n	8006650 <_scanf_float+0x15c>
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	0610      	lsls	r0, r2, #24
 800668a:	f57f af65 	bpl.w	8006558 <_scanf_float+0x64>
 800668e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006692:	e7f4      	b.n	800667e <_scanf_float+0x18a>
 8006694:	f1ba 0f00 	cmp.w	sl, #0
 8006698:	d10e      	bne.n	80066b8 <_scanf_float+0x1c4>
 800669a:	f1b9 0f00 	cmp.w	r9, #0
 800669e:	d10e      	bne.n	80066be <_scanf_float+0x1ca>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066aa:	d108      	bne.n	80066be <_scanf_float+0x1ca>
 80066ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066b0:	f04f 0a01 	mov.w	sl, #1
 80066b4:	6022      	str	r2, [r4, #0]
 80066b6:	e7e3      	b.n	8006680 <_scanf_float+0x18c>
 80066b8:	f1ba 0f02 	cmp.w	sl, #2
 80066bc:	d055      	beq.n	800676a <_scanf_float+0x276>
 80066be:	2d01      	cmp	r5, #1
 80066c0:	d002      	beq.n	80066c8 <_scanf_float+0x1d4>
 80066c2:	2d04      	cmp	r5, #4
 80066c4:	f47f af48 	bne.w	8006558 <_scanf_float+0x64>
 80066c8:	3501      	adds	r5, #1
 80066ca:	b2ed      	uxtb	r5, r5
 80066cc:	e7d8      	b.n	8006680 <_scanf_float+0x18c>
 80066ce:	f1ba 0f01 	cmp.w	sl, #1
 80066d2:	f47f af41 	bne.w	8006558 <_scanf_float+0x64>
 80066d6:	f04f 0a02 	mov.w	sl, #2
 80066da:	e7d1      	b.n	8006680 <_scanf_float+0x18c>
 80066dc:	b97d      	cbnz	r5, 80066fe <_scanf_float+0x20a>
 80066de:	f1b9 0f00 	cmp.w	r9, #0
 80066e2:	f47f af3c 	bne.w	800655e <_scanf_float+0x6a>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066f0:	f47f af39 	bne.w	8006566 <_scanf_float+0x72>
 80066f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066f8:	2501      	movs	r5, #1
 80066fa:	6022      	str	r2, [r4, #0]
 80066fc:	e7c0      	b.n	8006680 <_scanf_float+0x18c>
 80066fe:	2d03      	cmp	r5, #3
 8006700:	d0e2      	beq.n	80066c8 <_scanf_float+0x1d4>
 8006702:	2d05      	cmp	r5, #5
 8006704:	e7de      	b.n	80066c4 <_scanf_float+0x1d0>
 8006706:	2d02      	cmp	r5, #2
 8006708:	f47f af26 	bne.w	8006558 <_scanf_float+0x64>
 800670c:	2503      	movs	r5, #3
 800670e:	e7b7      	b.n	8006680 <_scanf_float+0x18c>
 8006710:	2d06      	cmp	r5, #6
 8006712:	f47f af21 	bne.w	8006558 <_scanf_float+0x64>
 8006716:	2507      	movs	r5, #7
 8006718:	e7b2      	b.n	8006680 <_scanf_float+0x18c>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	0591      	lsls	r1, r2, #22
 800671e:	f57f af1b 	bpl.w	8006558 <_scanf_float+0x64>
 8006722:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	f8cd 9004 	str.w	r9, [sp, #4]
 800672c:	e7a8      	b.n	8006680 <_scanf_float+0x18c>
 800672e:	6822      	ldr	r2, [r4, #0]
 8006730:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006734:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006738:	d006      	beq.n	8006748 <_scanf_float+0x254>
 800673a:	0550      	lsls	r0, r2, #21
 800673c:	f57f af0c 	bpl.w	8006558 <_scanf_float+0x64>
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	f43f af0f 	beq.w	8006566 <_scanf_float+0x72>
 8006748:	0591      	lsls	r1, r2, #22
 800674a:	bf58      	it	pl
 800674c:	9901      	ldrpl	r1, [sp, #4]
 800674e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006752:	bf58      	it	pl
 8006754:	eba9 0101 	subpl.w	r1, r9, r1
 8006758:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800675c:	f04f 0900 	mov.w	r9, #0
 8006760:	bf58      	it	pl
 8006762:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006766:	6022      	str	r2, [r4, #0]
 8006768:	e78a      	b.n	8006680 <_scanf_float+0x18c>
 800676a:	f04f 0a03 	mov.w	sl, #3
 800676e:	e787      	b.n	8006680 <_scanf_float+0x18c>
 8006770:	4639      	mov	r1, r7
 8006772:	4640      	mov	r0, r8
 8006774:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006778:	4798      	blx	r3
 800677a:	2800      	cmp	r0, #0
 800677c:	f43f aedf 	beq.w	800653e <_scanf_float+0x4a>
 8006780:	e6ea      	b.n	8006558 <_scanf_float+0x64>
 8006782:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006786:	463a      	mov	r2, r7
 8006788:	4640      	mov	r0, r8
 800678a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800678e:	4798      	blx	r3
 8006790:	6923      	ldr	r3, [r4, #16]
 8006792:	3b01      	subs	r3, #1
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	e6ec      	b.n	8006572 <_scanf_float+0x7e>
 8006798:	1e6b      	subs	r3, r5, #1
 800679a:	2b06      	cmp	r3, #6
 800679c:	d825      	bhi.n	80067ea <_scanf_float+0x2f6>
 800679e:	2d02      	cmp	r5, #2
 80067a0:	d836      	bhi.n	8006810 <_scanf_float+0x31c>
 80067a2:	455e      	cmp	r6, fp
 80067a4:	f67f aee8 	bls.w	8006578 <_scanf_float+0x84>
 80067a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067ac:	463a      	mov	r2, r7
 80067ae:	4640      	mov	r0, r8
 80067b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067b4:	4798      	blx	r3
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	e7f1      	b.n	80067a2 <_scanf_float+0x2ae>
 80067be:	9802      	ldr	r0, [sp, #8]
 80067c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067c8:	463a      	mov	r2, r7
 80067ca:	9002      	str	r0, [sp, #8]
 80067cc:	4640      	mov	r0, r8
 80067ce:	4798      	blx	r3
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067da:	fa5f fa8a 	uxtb.w	sl, sl
 80067de:	f1ba 0f02 	cmp.w	sl, #2
 80067e2:	d1ec      	bne.n	80067be <_scanf_float+0x2ca>
 80067e4:	3d03      	subs	r5, #3
 80067e6:	b2ed      	uxtb	r5, r5
 80067e8:	1b76      	subs	r6, r6, r5
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	05da      	lsls	r2, r3, #23
 80067ee:	d52f      	bpl.n	8006850 <_scanf_float+0x35c>
 80067f0:	055b      	lsls	r3, r3, #21
 80067f2:	d510      	bpl.n	8006816 <_scanf_float+0x322>
 80067f4:	455e      	cmp	r6, fp
 80067f6:	f67f aebf 	bls.w	8006578 <_scanf_float+0x84>
 80067fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067fe:	463a      	mov	r2, r7
 8006800:	4640      	mov	r0, r8
 8006802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006806:	4798      	blx	r3
 8006808:	6923      	ldr	r3, [r4, #16]
 800680a:	3b01      	subs	r3, #1
 800680c:	6123      	str	r3, [r4, #16]
 800680e:	e7f1      	b.n	80067f4 <_scanf_float+0x300>
 8006810:	46aa      	mov	sl, r5
 8006812:	9602      	str	r6, [sp, #8]
 8006814:	e7df      	b.n	80067d6 <_scanf_float+0x2e2>
 8006816:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	2965      	cmp	r1, #101	; 0x65
 800681e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006822:	f106 35ff 	add.w	r5, r6, #4294967295
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	d00c      	beq.n	8006844 <_scanf_float+0x350>
 800682a:	2945      	cmp	r1, #69	; 0x45
 800682c:	d00a      	beq.n	8006844 <_scanf_float+0x350>
 800682e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006832:	463a      	mov	r2, r7
 8006834:	4640      	mov	r0, r8
 8006836:	4798      	blx	r3
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800683e:	3b01      	subs	r3, #1
 8006840:	1eb5      	subs	r5, r6, #2
 8006842:	6123      	str	r3, [r4, #16]
 8006844:	463a      	mov	r2, r7
 8006846:	4640      	mov	r0, r8
 8006848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800684c:	4798      	blx	r3
 800684e:	462e      	mov	r6, r5
 8006850:	6825      	ldr	r5, [r4, #0]
 8006852:	f015 0510 	ands.w	r5, r5, #16
 8006856:	d159      	bne.n	800690c <_scanf_float+0x418>
 8006858:	7035      	strb	r5, [r6, #0]
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006864:	d11c      	bne.n	80068a0 <_scanf_float+0x3ac>
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	454b      	cmp	r3, r9
 800686a:	eba3 0209 	sub.w	r2, r3, r9
 800686e:	d124      	bne.n	80068ba <_scanf_float+0x3c6>
 8006870:	2200      	movs	r2, #0
 8006872:	4659      	mov	r1, fp
 8006874:	4640      	mov	r0, r8
 8006876:	f000 fe8b 	bl	8007590 <_strtod_r>
 800687a:	f8d4 c000 	ldr.w	ip, [r4]
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	f01c 0f02 	tst.w	ip, #2
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	d021      	beq.n	80068d0 <_scanf_float+0x3dc>
 800688c:	9903      	ldr	r1, [sp, #12]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	600a      	str	r2, [r1, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	e9c3 6700 	strd	r6, r7, [r3]
 8006898:	68e3      	ldr	r3, [r4, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60e3      	str	r3, [r4, #12]
 800689e:	e66c      	b.n	800657a <_scanf_float+0x86>
 80068a0:	9b04      	ldr	r3, [sp, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0e4      	beq.n	8006870 <_scanf_float+0x37c>
 80068a6:	9905      	ldr	r1, [sp, #20]
 80068a8:	230a      	movs	r3, #10
 80068aa:	462a      	mov	r2, r5
 80068ac:	4640      	mov	r0, r8
 80068ae:	3101      	adds	r1, #1
 80068b0:	f000 fefa 	bl	80076a8 <_strtol_r>
 80068b4:	9b04      	ldr	r3, [sp, #16]
 80068b6:	9e05      	ldr	r6, [sp, #20]
 80068b8:	1ac2      	subs	r2, r0, r3
 80068ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80068be:	429e      	cmp	r6, r3
 80068c0:	bf28      	it	cs
 80068c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80068c6:	4630      	mov	r0, r6
 80068c8:	4911      	ldr	r1, [pc, #68]	; (8006910 <_scanf_float+0x41c>)
 80068ca:	f000 f829 	bl	8006920 <siprintf>
 80068ce:	e7cf      	b.n	8006870 <_scanf_float+0x37c>
 80068d0:	f01c 0f04 	tst.w	ip, #4
 80068d4:	f103 0e04 	add.w	lr, r3, #4
 80068d8:	d003      	beq.n	80068e2 <_scanf_float+0x3ee>
 80068da:	9903      	ldr	r1, [sp, #12]
 80068dc:	f8c1 e000 	str.w	lr, [r1]
 80068e0:	e7d7      	b.n	8006892 <_scanf_float+0x39e>
 80068e2:	9a03      	ldr	r2, [sp, #12]
 80068e4:	f8c2 e000 	str.w	lr, [r2]
 80068e8:	f8d3 8000 	ldr.w	r8, [r3]
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	f7fa f940 	bl	8000b74 <__aeabi_dcmpun>
 80068f4:	b128      	cbz	r0, 8006902 <_scanf_float+0x40e>
 80068f6:	4807      	ldr	r0, [pc, #28]	; (8006914 <_scanf_float+0x420>)
 80068f8:	f000 f80e 	bl	8006918 <nanf>
 80068fc:	f8c8 0000 	str.w	r0, [r8]
 8006900:	e7ca      	b.n	8006898 <_scanf_float+0x3a4>
 8006902:	4630      	mov	r0, r6
 8006904:	4639      	mov	r1, r7
 8006906:	f7fa f993 	bl	8000c30 <__aeabi_d2f>
 800690a:	e7f7      	b.n	80068fc <_scanf_float+0x408>
 800690c:	2500      	movs	r5, #0
 800690e:	e634      	b.n	800657a <_scanf_float+0x86>
 8006910:	0800cd1c 	.word	0x0800cd1c
 8006914:	0800d138 	.word	0x0800d138

08006918 <nanf>:
 8006918:	4800      	ldr	r0, [pc, #0]	; (800691c <nanf+0x4>)
 800691a:	4770      	bx	lr
 800691c:	7fc00000 	.word	0x7fc00000

08006920 <siprintf>:
 8006920:	b40e      	push	{r1, r2, r3}
 8006922:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006926:	b500      	push	{lr}
 8006928:	b09c      	sub	sp, #112	; 0x70
 800692a:	ab1d      	add	r3, sp, #116	; 0x74
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	9006      	str	r0, [sp, #24]
 8006930:	9107      	str	r1, [sp, #28]
 8006932:	9104      	str	r1, [sp, #16]
 8006934:	4808      	ldr	r0, [pc, #32]	; (8006958 <siprintf+0x38>)
 8006936:	4909      	ldr	r1, [pc, #36]	; (800695c <siprintf+0x3c>)
 8006938:	f853 2b04 	ldr.w	r2, [r3], #4
 800693c:	9105      	str	r1, [sp, #20]
 800693e:	6800      	ldr	r0, [r0, #0]
 8006940:	a902      	add	r1, sp, #8
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f002 fe96 	bl	8009674 <_svfiprintf_r>
 8006948:	2200      	movs	r2, #0
 800694a:	9b02      	ldr	r3, [sp, #8]
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	b01c      	add	sp, #112	; 0x70
 8006950:	f85d eb04 	ldr.w	lr, [sp], #4
 8006954:	b003      	add	sp, #12
 8006956:	4770      	bx	lr
 8006958:	20000024 	.word	0x20000024
 800695c:	ffff0208 	.word	0xffff0208

08006960 <sulp>:
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	460f      	mov	r7, r1
 8006966:	4690      	mov	r8, r2
 8006968:	f002 fc2c 	bl	80091c4 <__ulp>
 800696c:	4604      	mov	r4, r0
 800696e:	460d      	mov	r5, r1
 8006970:	f1b8 0f00 	cmp.w	r8, #0
 8006974:	d011      	beq.n	800699a <sulp+0x3a>
 8006976:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800697a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800697e:	2b00      	cmp	r3, #0
 8006980:	dd0b      	ble.n	800699a <sulp+0x3a>
 8006982:	2400      	movs	r4, #0
 8006984:	051b      	lsls	r3, r3, #20
 8006986:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800698a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800698e:	4622      	mov	r2, r4
 8006990:	462b      	mov	r3, r5
 8006992:	f7f9 fe55 	bl	8000640 <__aeabi_dmul>
 8006996:	4604      	mov	r4, r0
 8006998:	460d      	mov	r5, r1
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a2:	0000      	movs	r0, r0
 80069a4:	0000      	movs	r0, r0
	...

080069a8 <_strtod_l>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	469b      	mov	fp, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	b0a1      	sub	sp, #132	; 0x84
 80069b2:	931c      	str	r3, [sp, #112]	; 0x70
 80069b4:	4ba1      	ldr	r3, [pc, #644]	; (8006c3c <_strtod_l+0x294>)
 80069b6:	4682      	mov	sl, r0
 80069b8:	681f      	ldr	r7, [r3, #0]
 80069ba:	460e      	mov	r6, r1
 80069bc:	4638      	mov	r0, r7
 80069be:	9217      	str	r2, [sp, #92]	; 0x5c
 80069c0:	f7f9 fbc6 	bl	8000150 <strlen>
 80069c4:	f04f 0800 	mov.w	r8, #0
 80069c8:	4604      	mov	r4, r0
 80069ca:	f04f 0900 	mov.w	r9, #0
 80069ce:	961b      	str	r6, [sp, #108]	; 0x6c
 80069d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	2a2b      	cmp	r2, #43	; 0x2b
 80069d6:	d04c      	beq.n	8006a72 <_strtod_l+0xca>
 80069d8:	d83a      	bhi.n	8006a50 <_strtod_l+0xa8>
 80069da:	2a0d      	cmp	r2, #13
 80069dc:	d833      	bhi.n	8006a46 <_strtod_l+0x9e>
 80069de:	2a08      	cmp	r2, #8
 80069e0:	d833      	bhi.n	8006a4a <_strtod_l+0xa2>
 80069e2:	2a00      	cmp	r2, #0
 80069e4:	d03d      	beq.n	8006a62 <_strtod_l+0xba>
 80069e6:	2300      	movs	r3, #0
 80069e8:	930c      	str	r3, [sp, #48]	; 0x30
 80069ea:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80069ec:	782b      	ldrb	r3, [r5, #0]
 80069ee:	2b30      	cmp	r3, #48	; 0x30
 80069f0:	f040 80af 	bne.w	8006b52 <_strtod_l+0x1aa>
 80069f4:	786b      	ldrb	r3, [r5, #1]
 80069f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80069fa:	2b58      	cmp	r3, #88	; 0x58
 80069fc:	d16c      	bne.n	8006ad8 <_strtod_l+0x130>
 80069fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a00:	4650      	mov	r0, sl
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	ab1c      	add	r3, sp, #112	; 0x70
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4a8d      	ldr	r2, [pc, #564]	; (8006c40 <_strtod_l+0x298>)
 8006a0a:	f8cd b008 	str.w	fp, [sp, #8]
 8006a0e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a10:	a91b      	add	r1, sp, #108	; 0x6c
 8006a12:	f001 fd2f 	bl	8008474 <__gethex>
 8006a16:	f010 0607 	ands.w	r6, r0, #7
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	d005      	beq.n	8006a2a <_strtod_l+0x82>
 8006a1e:	2e06      	cmp	r6, #6
 8006a20:	d129      	bne.n	8006a76 <_strtod_l+0xce>
 8006a22:	2300      	movs	r3, #0
 8006a24:	3501      	adds	r5, #1
 8006a26:	951b      	str	r5, [sp, #108]	; 0x6c
 8006a28:	930c      	str	r3, [sp, #48]	; 0x30
 8006a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 8596 	bne.w	800755e <_strtod_l+0xbb6>
 8006a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a34:	b1d3      	cbz	r3, 8006a6c <_strtod_l+0xc4>
 8006a36:	4642      	mov	r2, r8
 8006a38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	b021      	add	sp, #132	; 0x84
 8006a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a46:	2a20      	cmp	r2, #32
 8006a48:	d1cd      	bne.n	80069e6 <_strtod_l+0x3e>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a4e:	e7bf      	b.n	80069d0 <_strtod_l+0x28>
 8006a50:	2a2d      	cmp	r2, #45	; 0x2d
 8006a52:	d1c8      	bne.n	80069e6 <_strtod_l+0x3e>
 8006a54:	2201      	movs	r2, #1
 8006a56:	920c      	str	r2, [sp, #48]	; 0x30
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1c3      	bne.n	80069ea <_strtod_l+0x42>
 8006a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a64:	961b      	str	r6, [sp, #108]	; 0x6c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 8577 	bne.w	800755a <_strtod_l+0xbb2>
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	e7e4      	b.n	8006a3c <_strtod_l+0x94>
 8006a72:	2200      	movs	r2, #0
 8006a74:	e7ef      	b.n	8006a56 <_strtod_l+0xae>
 8006a76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a78:	b13a      	cbz	r2, 8006a8a <_strtod_l+0xe2>
 8006a7a:	2135      	movs	r1, #53	; 0x35
 8006a7c:	a81e      	add	r0, sp, #120	; 0x78
 8006a7e:	f002 fca5 	bl	80093cc <__copybits>
 8006a82:	4650      	mov	r0, sl
 8006a84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a86:	f002 f86d 	bl	8008b64 <_Bfree>
 8006a8a:	3e01      	subs	r6, #1
 8006a8c:	2e05      	cmp	r6, #5
 8006a8e:	d807      	bhi.n	8006aa0 <_strtod_l+0xf8>
 8006a90:	e8df f006 	tbb	[pc, r6]
 8006a94:	1d180b0e 	.word	0x1d180b0e
 8006a98:	030e      	.short	0x030e
 8006a9a:	f04f 0900 	mov.w	r9, #0
 8006a9e:	46c8      	mov	r8, r9
 8006aa0:	0721      	lsls	r1, r4, #28
 8006aa2:	d5c2      	bpl.n	8006a2a <_strtod_l+0x82>
 8006aa4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006aa8:	e7bf      	b.n	8006a2a <_strtod_l+0x82>
 8006aaa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8006aae:	e7f7      	b.n	8006aa0 <_strtod_l+0xf8>
 8006ab0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006ab2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8006ab6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006aba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006abe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006ac2:	e7ed      	b.n	8006aa0 <_strtod_l+0xf8>
 8006ac4:	f04f 0800 	mov.w	r8, #0
 8006ac8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006c44 <_strtod_l+0x29c>
 8006acc:	e7e8      	b.n	8006aa0 <_strtod_l+0xf8>
 8006ace:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ad2:	f04f 38ff 	mov.w	r8, #4294967295
 8006ad6:	e7e3      	b.n	8006aa0 <_strtod_l+0xf8>
 8006ad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b30      	cmp	r3, #48	; 0x30
 8006ae2:	d0f9      	beq.n	8006ad8 <_strtod_l+0x130>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0a0      	beq.n	8006a2a <_strtod_l+0x82>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006aee:	220a      	movs	r2, #10
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	2300      	movs	r3, #0
 8006af4:	469b      	mov	fp, r3
 8006af6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006afa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006afc:	7805      	ldrb	r5, [r0, #0]
 8006afe:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006b02:	b2d9      	uxtb	r1, r3
 8006b04:	2909      	cmp	r1, #9
 8006b06:	d926      	bls.n	8006b56 <_strtod_l+0x1ae>
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f002 fec8 	bl	80098a0 <strncmp>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d032      	beq.n	8006b7a <_strtod_l+0x1d2>
 8006b14:	2000      	movs	r0, #0
 8006b16:	462b      	mov	r3, r5
 8006b18:	465c      	mov	r4, fp
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	9004      	str	r0, [sp, #16]
 8006b1e:	2b65      	cmp	r3, #101	; 0x65
 8006b20:	d001      	beq.n	8006b26 <_strtod_l+0x17e>
 8006b22:	2b45      	cmp	r3, #69	; 0x45
 8006b24:	d113      	bne.n	8006b4e <_strtod_l+0x1a6>
 8006b26:	b91c      	cbnz	r4, 8006b30 <_strtod_l+0x188>
 8006b28:	9b07      	ldr	r3, [sp, #28]
 8006b2a:	4303      	orrs	r3, r0
 8006b2c:	d099      	beq.n	8006a62 <_strtod_l+0xba>
 8006b2e:	2400      	movs	r4, #0
 8006b30:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006b32:	1c73      	adds	r3, r6, #1
 8006b34:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b36:	7873      	ldrb	r3, [r6, #1]
 8006b38:	2b2b      	cmp	r3, #43	; 0x2b
 8006b3a:	d078      	beq.n	8006c2e <_strtod_l+0x286>
 8006b3c:	2b2d      	cmp	r3, #45	; 0x2d
 8006b3e:	d07b      	beq.n	8006c38 <_strtod_l+0x290>
 8006b40:	2700      	movs	r7, #0
 8006b42:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006b46:	2909      	cmp	r1, #9
 8006b48:	f240 8082 	bls.w	8006c50 <_strtod_l+0x2a8>
 8006b4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8006b4e:	2500      	movs	r5, #0
 8006b50:	e09e      	b.n	8006c90 <_strtod_l+0x2e8>
 8006b52:	2300      	movs	r3, #0
 8006b54:	e7c9      	b.n	8006aea <_strtod_l+0x142>
 8006b56:	f1bb 0f08 	cmp.w	fp, #8
 8006b5a:	bfd5      	itete	le
 8006b5c:	9906      	ldrle	r1, [sp, #24]
 8006b5e:	9905      	ldrgt	r1, [sp, #20]
 8006b60:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b64:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b68:	f100 0001 	add.w	r0, r0, #1
 8006b6c:	bfd4      	ite	le
 8006b6e:	9306      	strle	r3, [sp, #24]
 8006b70:	9305      	strgt	r3, [sp, #20]
 8006b72:	f10b 0b01 	add.w	fp, fp, #1
 8006b76:	901b      	str	r0, [sp, #108]	; 0x6c
 8006b78:	e7bf      	b.n	8006afa <_strtod_l+0x152>
 8006b7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b7c:	191a      	adds	r2, r3, r4
 8006b7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b80:	5d1b      	ldrb	r3, [r3, r4]
 8006b82:	f1bb 0f00 	cmp.w	fp, #0
 8006b86:	d036      	beq.n	8006bf6 <_strtod_l+0x24e>
 8006b88:	465c      	mov	r4, fp
 8006b8a:	9004      	str	r0, [sp, #16]
 8006b8c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b90:	2a09      	cmp	r2, #9
 8006b92:	d912      	bls.n	8006bba <_strtod_l+0x212>
 8006b94:	2201      	movs	r2, #1
 8006b96:	e7c2      	b.n	8006b1e <_strtod_l+0x176>
 8006b98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b30      	cmp	r3, #48	; 0x30
 8006ba4:	d0f8      	beq.n	8006b98 <_strtod_l+0x1f0>
 8006ba6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006baa:	2a08      	cmp	r2, #8
 8006bac:	f200 84dc 	bhi.w	8007568 <_strtod_l+0xbc0>
 8006bb0:	9004      	str	r0, [sp, #16]
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006bb8:	9208      	str	r2, [sp, #32]
 8006bba:	3b30      	subs	r3, #48	; 0x30
 8006bbc:	f100 0201 	add.w	r2, r0, #1
 8006bc0:	d013      	beq.n	8006bea <_strtod_l+0x242>
 8006bc2:	9904      	ldr	r1, [sp, #16]
 8006bc4:	1905      	adds	r5, r0, r4
 8006bc6:	4411      	add	r1, r2
 8006bc8:	9104      	str	r1, [sp, #16]
 8006bca:	4622      	mov	r2, r4
 8006bcc:	210a      	movs	r1, #10
 8006bce:	42aa      	cmp	r2, r5
 8006bd0:	d113      	bne.n	8006bfa <_strtod_l+0x252>
 8006bd2:	1822      	adds	r2, r4, r0
 8006bd4:	2a08      	cmp	r2, #8
 8006bd6:	f104 0401 	add.w	r4, r4, #1
 8006bda:	4404      	add	r4, r0
 8006bdc:	dc1b      	bgt.n	8006c16 <_strtod_l+0x26e>
 8006bde:	220a      	movs	r2, #10
 8006be0:	9906      	ldr	r1, [sp, #24]
 8006be2:	fb02 3301 	mla	r3, r2, r1, r3
 8006be6:	9306      	str	r3, [sp, #24]
 8006be8:	2200      	movs	r2, #0
 8006bea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006bec:	4610      	mov	r0, r2
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	911b      	str	r1, [sp, #108]	; 0x6c
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	e7ca      	b.n	8006b8c <_strtod_l+0x1e4>
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	e7d3      	b.n	8006ba2 <_strtod_l+0x1fa>
 8006bfa:	2a08      	cmp	r2, #8
 8006bfc:	dc04      	bgt.n	8006c08 <_strtod_l+0x260>
 8006bfe:	9f06      	ldr	r7, [sp, #24]
 8006c00:	434f      	muls	r7, r1
 8006c02:	9706      	str	r7, [sp, #24]
 8006c04:	3201      	adds	r2, #1
 8006c06:	e7e2      	b.n	8006bce <_strtod_l+0x226>
 8006c08:	1c57      	adds	r7, r2, #1
 8006c0a:	2f10      	cmp	r7, #16
 8006c0c:	bfde      	ittt	le
 8006c0e:	9f05      	ldrle	r7, [sp, #20]
 8006c10:	434f      	mulle	r7, r1
 8006c12:	9705      	strle	r7, [sp, #20]
 8006c14:	e7f6      	b.n	8006c04 <_strtod_l+0x25c>
 8006c16:	2c10      	cmp	r4, #16
 8006c18:	bfdf      	itttt	le
 8006c1a:	220a      	movle	r2, #10
 8006c1c:	9905      	ldrle	r1, [sp, #20]
 8006c1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c22:	9305      	strle	r3, [sp, #20]
 8006c24:	e7e0      	b.n	8006be8 <_strtod_l+0x240>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2201      	movs	r2, #1
 8006c2a:	9304      	str	r3, [sp, #16]
 8006c2c:	e77c      	b.n	8006b28 <_strtod_l+0x180>
 8006c2e:	2700      	movs	r7, #0
 8006c30:	1cb3      	adds	r3, r6, #2
 8006c32:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c34:	78b3      	ldrb	r3, [r6, #2]
 8006c36:	e784      	b.n	8006b42 <_strtod_l+0x19a>
 8006c38:	2701      	movs	r7, #1
 8006c3a:	e7f9      	b.n	8006c30 <_strtod_l+0x288>
 8006c3c:	0800cf78 	.word	0x0800cf78
 8006c40:	0800cd24 	.word	0x0800cd24
 8006c44:	7ff00000 	.word	0x7ff00000
 8006c48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c4a:	1c59      	adds	r1, r3, #1
 8006c4c:	911b      	str	r1, [sp, #108]	; 0x6c
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b30      	cmp	r3, #48	; 0x30
 8006c52:	d0f9      	beq.n	8006c48 <_strtod_l+0x2a0>
 8006c54:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006c58:	2908      	cmp	r1, #8
 8006c5a:	f63f af78 	bhi.w	8006b4e <_strtod_l+0x1a6>
 8006c5e:	f04f 0e0a 	mov.w	lr, #10
 8006c62:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8006c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c68:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c6c:	1c59      	adds	r1, r3, #1
 8006c6e:	911b      	str	r1, [sp, #108]	; 0x6c
 8006c70:	785b      	ldrb	r3, [r3, #1]
 8006c72:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8006c76:	2d09      	cmp	r5, #9
 8006c78:	d935      	bls.n	8006ce6 <_strtod_l+0x33e>
 8006c7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c7c:	1b49      	subs	r1, r1, r5
 8006c7e:	2908      	cmp	r1, #8
 8006c80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006c84:	dc02      	bgt.n	8006c8c <_strtod_l+0x2e4>
 8006c86:	4565      	cmp	r5, ip
 8006c88:	bfa8      	it	ge
 8006c8a:	4665      	movge	r5, ip
 8006c8c:	b107      	cbz	r7, 8006c90 <_strtod_l+0x2e8>
 8006c8e:	426d      	negs	r5, r5
 8006c90:	2c00      	cmp	r4, #0
 8006c92:	d14c      	bne.n	8006d2e <_strtod_l+0x386>
 8006c94:	9907      	ldr	r1, [sp, #28]
 8006c96:	4301      	orrs	r1, r0
 8006c98:	f47f aec7 	bne.w	8006a2a <_strtod_l+0x82>
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	f47f aee0 	bne.w	8006a62 <_strtod_l+0xba>
 8006ca2:	2b69      	cmp	r3, #105	; 0x69
 8006ca4:	d026      	beq.n	8006cf4 <_strtod_l+0x34c>
 8006ca6:	dc23      	bgt.n	8006cf0 <_strtod_l+0x348>
 8006ca8:	2b49      	cmp	r3, #73	; 0x49
 8006caa:	d023      	beq.n	8006cf4 <_strtod_l+0x34c>
 8006cac:	2b4e      	cmp	r3, #78	; 0x4e
 8006cae:	f47f aed8 	bne.w	8006a62 <_strtod_l+0xba>
 8006cb2:	499c      	ldr	r1, [pc, #624]	; (8006f24 <_strtod_l+0x57c>)
 8006cb4:	a81b      	add	r0, sp, #108	; 0x6c
 8006cb6:	f001 fe2b 	bl	8008910 <__match>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	f43f aed1 	beq.w	8006a62 <_strtod_l+0xba>
 8006cc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b28      	cmp	r3, #40	; 0x28
 8006cc6:	d12c      	bne.n	8006d22 <_strtod_l+0x37a>
 8006cc8:	4997      	ldr	r1, [pc, #604]	; (8006f28 <_strtod_l+0x580>)
 8006cca:	aa1e      	add	r2, sp, #120	; 0x78
 8006ccc:	a81b      	add	r0, sp, #108	; 0x6c
 8006cce:	f001 fe33 	bl	8008938 <__hexnan>
 8006cd2:	2805      	cmp	r0, #5
 8006cd4:	d125      	bne.n	8006d22 <_strtod_l+0x37a>
 8006cd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cd8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8006cdc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006ce0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006ce4:	e6a1      	b.n	8006a2a <_strtod_l+0x82>
 8006ce6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8006cea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006cee:	e7bc      	b.n	8006c6a <_strtod_l+0x2c2>
 8006cf0:	2b6e      	cmp	r3, #110	; 0x6e
 8006cf2:	e7dc      	b.n	8006cae <_strtod_l+0x306>
 8006cf4:	498d      	ldr	r1, [pc, #564]	; (8006f2c <_strtod_l+0x584>)
 8006cf6:	a81b      	add	r0, sp, #108	; 0x6c
 8006cf8:	f001 fe0a 	bl	8008910 <__match>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	f43f aeb0 	beq.w	8006a62 <_strtod_l+0xba>
 8006d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d04:	498a      	ldr	r1, [pc, #552]	; (8006f30 <_strtod_l+0x588>)
 8006d06:	3b01      	subs	r3, #1
 8006d08:	a81b      	add	r0, sp, #108	; 0x6c
 8006d0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d0c:	f001 fe00 	bl	8008910 <__match>
 8006d10:	b910      	cbnz	r0, 8006d18 <_strtod_l+0x370>
 8006d12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d14:	3301      	adds	r3, #1
 8006d16:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d18:	f04f 0800 	mov.w	r8, #0
 8006d1c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006f40 <_strtod_l+0x598>
 8006d20:	e683      	b.n	8006a2a <_strtod_l+0x82>
 8006d22:	4884      	ldr	r0, [pc, #528]	; (8006f34 <_strtod_l+0x58c>)
 8006d24:	f002 fda6 	bl	8009874 <nan>
 8006d28:	4680      	mov	r8, r0
 8006d2a:	4689      	mov	r9, r1
 8006d2c:	e67d      	b.n	8006a2a <_strtod_l+0x82>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	f1bb 0f00 	cmp.w	fp, #0
 8006d34:	bf08      	it	eq
 8006d36:	46a3      	moveq	fp, r4
 8006d38:	1aeb      	subs	r3, r5, r3
 8006d3a:	2c10      	cmp	r4, #16
 8006d3c:	9806      	ldr	r0, [sp, #24]
 8006d3e:	4626      	mov	r6, r4
 8006d40:	9307      	str	r3, [sp, #28]
 8006d42:	bfa8      	it	ge
 8006d44:	2610      	movge	r6, #16
 8006d46:	f7f9 fc01 	bl	800054c <__aeabi_ui2d>
 8006d4a:	2c09      	cmp	r4, #9
 8006d4c:	4680      	mov	r8, r0
 8006d4e:	4689      	mov	r9, r1
 8006d50:	dd13      	ble.n	8006d7a <_strtod_l+0x3d2>
 8006d52:	4b79      	ldr	r3, [pc, #484]	; (8006f38 <_strtod_l+0x590>)
 8006d54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d58:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006d5c:	f7f9 fc70 	bl	8000640 <__aeabi_dmul>
 8006d60:	4680      	mov	r8, r0
 8006d62:	9805      	ldr	r0, [sp, #20]
 8006d64:	4689      	mov	r9, r1
 8006d66:	f7f9 fbf1 	bl	800054c <__aeabi_ui2d>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 faaf 	bl	80002d4 <__adddf3>
 8006d76:	4680      	mov	r8, r0
 8006d78:	4689      	mov	r9, r1
 8006d7a:	2c0f      	cmp	r4, #15
 8006d7c:	dc36      	bgt.n	8006dec <_strtod_l+0x444>
 8006d7e:	9b07      	ldr	r3, [sp, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f43f ae52 	beq.w	8006a2a <_strtod_l+0x82>
 8006d86:	dd22      	ble.n	8006dce <_strtod_l+0x426>
 8006d88:	2b16      	cmp	r3, #22
 8006d8a:	dc09      	bgt.n	8006da0 <_strtod_l+0x3f8>
 8006d8c:	4c6a      	ldr	r4, [pc, #424]	; (8006f38 <_strtod_l+0x590>)
 8006d8e:	4642      	mov	r2, r8
 8006d90:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8006d94:	464b      	mov	r3, r9
 8006d96:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006d9a:	f7f9 fc51 	bl	8000640 <__aeabi_dmul>
 8006d9e:	e7c3      	b.n	8006d28 <_strtod_l+0x380>
 8006da0:	9a07      	ldr	r2, [sp, #28]
 8006da2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006da6:	4293      	cmp	r3, r2
 8006da8:	db20      	blt.n	8006dec <_strtod_l+0x444>
 8006daa:	4d63      	ldr	r5, [pc, #396]	; (8006f38 <_strtod_l+0x590>)
 8006dac:	f1c4 040f 	rsb	r4, r4, #15
 8006db0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006db4:	4642      	mov	r2, r8
 8006db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dba:	464b      	mov	r3, r9
 8006dbc:	f7f9 fc40 	bl	8000640 <__aeabi_dmul>
 8006dc0:	9b07      	ldr	r3, [sp, #28]
 8006dc2:	1b1c      	subs	r4, r3, r4
 8006dc4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dcc:	e7e5      	b.n	8006d9a <_strtod_l+0x3f2>
 8006dce:	9b07      	ldr	r3, [sp, #28]
 8006dd0:	3316      	adds	r3, #22
 8006dd2:	db0b      	blt.n	8006dec <_strtod_l+0x444>
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	4a58      	ldr	r2, [pc, #352]	; (8006f38 <_strtod_l+0x590>)
 8006dd8:	1b5d      	subs	r5, r3, r5
 8006dda:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006dde:	4640      	mov	r0, r8
 8006de0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006de4:	4649      	mov	r1, r9
 8006de6:	f7f9 fd55 	bl	8000894 <__aeabi_ddiv>
 8006dea:	e79d      	b.n	8006d28 <_strtod_l+0x380>
 8006dec:	9b07      	ldr	r3, [sp, #28]
 8006dee:	1ba6      	subs	r6, r4, r6
 8006df0:	441e      	add	r6, r3
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	dd71      	ble.n	8006eda <_strtod_l+0x532>
 8006df6:	f016 030f 	ands.w	r3, r6, #15
 8006dfa:	d00a      	beq.n	8006e12 <_strtod_l+0x46a>
 8006dfc:	494e      	ldr	r1, [pc, #312]	; (8006f38 <_strtod_l+0x590>)
 8006dfe:	4642      	mov	r2, r8
 8006e00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e08:	464b      	mov	r3, r9
 8006e0a:	f7f9 fc19 	bl	8000640 <__aeabi_dmul>
 8006e0e:	4680      	mov	r8, r0
 8006e10:	4689      	mov	r9, r1
 8006e12:	f036 060f 	bics.w	r6, r6, #15
 8006e16:	d050      	beq.n	8006eba <_strtod_l+0x512>
 8006e18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006e1c:	dd27      	ble.n	8006e6e <_strtod_l+0x4c6>
 8006e1e:	f04f 0b00 	mov.w	fp, #0
 8006e22:	f8cd b010 	str.w	fp, [sp, #16]
 8006e26:	f8cd b020 	str.w	fp, [sp, #32]
 8006e2a:	f8cd b018 	str.w	fp, [sp, #24]
 8006e2e:	2322      	movs	r3, #34	; 0x22
 8006e30:	f04f 0800 	mov.w	r8, #0
 8006e34:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006f40 <_strtod_l+0x598>
 8006e38:	f8ca 3000 	str.w	r3, [sl]
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f43f adf3 	beq.w	8006a2a <_strtod_l+0x82>
 8006e44:	4650      	mov	r0, sl
 8006e46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e48:	f001 fe8c 	bl	8008b64 <_Bfree>
 8006e4c:	4650      	mov	r0, sl
 8006e4e:	9906      	ldr	r1, [sp, #24]
 8006e50:	f001 fe88 	bl	8008b64 <_Bfree>
 8006e54:	4650      	mov	r0, sl
 8006e56:	9904      	ldr	r1, [sp, #16]
 8006e58:	f001 fe84 	bl	8008b64 <_Bfree>
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	9908      	ldr	r1, [sp, #32]
 8006e60:	f001 fe80 	bl	8008b64 <_Bfree>
 8006e64:	4659      	mov	r1, fp
 8006e66:	4650      	mov	r0, sl
 8006e68:	f001 fe7c 	bl	8008b64 <_Bfree>
 8006e6c:	e5dd      	b.n	8006a2a <_strtod_l+0x82>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	461f      	mov	r7, r3
 8006e76:	1136      	asrs	r6, r6, #4
 8006e78:	2e01      	cmp	r6, #1
 8006e7a:	dc21      	bgt.n	8006ec0 <_strtod_l+0x518>
 8006e7c:	b10b      	cbz	r3, 8006e82 <_strtod_l+0x4da>
 8006e7e:	4680      	mov	r8, r0
 8006e80:	4689      	mov	r9, r1
 8006e82:	4b2e      	ldr	r3, [pc, #184]	; (8006f3c <_strtod_l+0x594>)
 8006e84:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006e88:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e92:	464b      	mov	r3, r9
 8006e94:	f7f9 fbd4 	bl	8000640 <__aeabi_dmul>
 8006e98:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <_strtod_l+0x598>)
 8006e9a:	460a      	mov	r2, r1
 8006e9c:	400b      	ands	r3, r1
 8006e9e:	4929      	ldr	r1, [pc, #164]	; (8006f44 <_strtod_l+0x59c>)
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	428b      	cmp	r3, r1
 8006ea4:	d8bb      	bhi.n	8006e1e <_strtod_l+0x476>
 8006ea6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006eaa:	428b      	cmp	r3, r1
 8006eac:	bf86      	itte	hi
 8006eae:	f04f 38ff 	movhi.w	r8, #4294967295
 8006eb2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006f48 <_strtod_l+0x5a0>
 8006eb6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9305      	str	r3, [sp, #20]
 8006ebe:	e07e      	b.n	8006fbe <_strtod_l+0x616>
 8006ec0:	07f2      	lsls	r2, r6, #31
 8006ec2:	d507      	bpl.n	8006ed4 <_strtod_l+0x52c>
 8006ec4:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <_strtod_l+0x594>)
 8006ec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f7f9 fbb7 	bl	8000640 <__aeabi_dmul>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	3701      	adds	r7, #1
 8006ed6:	1076      	asrs	r6, r6, #1
 8006ed8:	e7ce      	b.n	8006e78 <_strtod_l+0x4d0>
 8006eda:	d0ee      	beq.n	8006eba <_strtod_l+0x512>
 8006edc:	4276      	negs	r6, r6
 8006ede:	f016 020f 	ands.w	r2, r6, #15
 8006ee2:	d00a      	beq.n	8006efa <_strtod_l+0x552>
 8006ee4:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <_strtod_l+0x590>)
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eec:	4649      	mov	r1, r9
 8006eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef2:	f7f9 fccf 	bl	8000894 <__aeabi_ddiv>
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	4689      	mov	r9, r1
 8006efa:	1136      	asrs	r6, r6, #4
 8006efc:	d0dd      	beq.n	8006eba <_strtod_l+0x512>
 8006efe:	2e1f      	cmp	r6, #31
 8006f00:	dd24      	ble.n	8006f4c <_strtod_l+0x5a4>
 8006f02:	f04f 0b00 	mov.w	fp, #0
 8006f06:	f8cd b010 	str.w	fp, [sp, #16]
 8006f0a:	f8cd b020 	str.w	fp, [sp, #32]
 8006f0e:	f8cd b018 	str.w	fp, [sp, #24]
 8006f12:	2322      	movs	r3, #34	; 0x22
 8006f14:	f04f 0800 	mov.w	r8, #0
 8006f18:	f04f 0900 	mov.w	r9, #0
 8006f1c:	f8ca 3000 	str.w	r3, [sl]
 8006f20:	e78c      	b.n	8006e3c <_strtod_l+0x494>
 8006f22:	bf00      	nop
 8006f24:	0800ccf5 	.word	0x0800ccf5
 8006f28:	0800cd38 	.word	0x0800cd38
 8006f2c:	0800cced 	.word	0x0800cced
 8006f30:	0800ce7c 	.word	0x0800ce7c
 8006f34:	0800d138 	.word	0x0800d138
 8006f38:	0800d018 	.word	0x0800d018
 8006f3c:	0800cff0 	.word	0x0800cff0
 8006f40:	7ff00000 	.word	0x7ff00000
 8006f44:	7ca00000 	.word	0x7ca00000
 8006f48:	7fefffff 	.word	0x7fefffff
 8006f4c:	f016 0310 	ands.w	r3, r6, #16
 8006f50:	bf18      	it	ne
 8006f52:	236a      	movne	r3, #106	; 0x6a
 8006f54:	4640      	mov	r0, r8
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	4649      	mov	r1, r9
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4fb2      	ldr	r7, [pc, #712]	; (8007228 <_strtod_l+0x880>)
 8006f5e:	07f2      	lsls	r2, r6, #31
 8006f60:	d504      	bpl.n	8006f6c <_strtod_l+0x5c4>
 8006f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f66:	f7f9 fb6b 	bl	8000640 <__aeabi_dmul>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	1076      	asrs	r6, r6, #1
 8006f6e:	f107 0708 	add.w	r7, r7, #8
 8006f72:	d1f4      	bne.n	8006f5e <_strtod_l+0x5b6>
 8006f74:	b10b      	cbz	r3, 8006f7a <_strtod_l+0x5d2>
 8006f76:	4680      	mov	r8, r0
 8006f78:	4689      	mov	r9, r1
 8006f7a:	9b05      	ldr	r3, [sp, #20]
 8006f7c:	b1bb      	cbz	r3, 8006fae <_strtod_l+0x606>
 8006f7e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8006f82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	4649      	mov	r1, r9
 8006f8a:	dd10      	ble.n	8006fae <_strtod_l+0x606>
 8006f8c:	2b1f      	cmp	r3, #31
 8006f8e:	f340 812b 	ble.w	80071e8 <_strtod_l+0x840>
 8006f92:	2b34      	cmp	r3, #52	; 0x34
 8006f94:	bfd8      	it	le
 8006f96:	f04f 32ff 	movle.w	r2, #4294967295
 8006f9a:	f04f 0800 	mov.w	r8, #0
 8006f9e:	bfcf      	iteee	gt
 8006fa0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006fa4:	3b20      	suble	r3, #32
 8006fa6:	fa02 f303 	lslle.w	r3, r2, r3
 8006faa:	ea03 0901 	andle.w	r9, r3, r1
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	f7f9 fdab 	bl	8000b10 <__aeabi_dcmpeq>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d1a1      	bne.n	8006f02 <_strtod_l+0x55a>
 8006fbe:	9b06      	ldr	r3, [sp, #24]
 8006fc0:	465a      	mov	r2, fp
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	4623      	mov	r3, r4
 8006fc8:	9908      	ldr	r1, [sp, #32]
 8006fca:	f001 fe37 	bl	8008c3c <__s2b>
 8006fce:	9008      	str	r0, [sp, #32]
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f43f af24 	beq.w	8006e1e <_strtod_l+0x476>
 8006fd6:	9b04      	ldr	r3, [sp, #16]
 8006fd8:	f04f 0b00 	mov.w	fp, #0
 8006fdc:	1b5d      	subs	r5, r3, r5
 8006fde:	9b07      	ldr	r3, [sp, #28]
 8006fe0:	f8cd b010 	str.w	fp, [sp, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bfb4      	ite	lt
 8006fe8:	462b      	movlt	r3, r5
 8006fea:	2300      	movge	r3, #0
 8006fec:	930e      	str	r3, [sp, #56]	; 0x38
 8006fee:	9b07      	ldr	r3, [sp, #28]
 8006ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ff4:	9316      	str	r3, [sp, #88]	; 0x58
 8006ff6:	9b08      	ldr	r3, [sp, #32]
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	6859      	ldr	r1, [r3, #4]
 8006ffc:	f001 fd72 	bl	8008ae4 <_Balloc>
 8007000:	9006      	str	r0, [sp, #24]
 8007002:	2800      	cmp	r0, #0
 8007004:	f43f af13 	beq.w	8006e2e <_strtod_l+0x486>
 8007008:	9b08      	ldr	r3, [sp, #32]
 800700a:	300c      	adds	r0, #12
 800700c:	691a      	ldr	r2, [r3, #16]
 800700e:	f103 010c 	add.w	r1, r3, #12
 8007012:	3202      	adds	r2, #2
 8007014:	0092      	lsls	r2, r2, #2
 8007016:	f001 fd57 	bl	8008ac8 <memcpy>
 800701a:	ab1e      	add	r3, sp, #120	; 0x78
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	ab1d      	add	r3, sp, #116	; 0x74
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4642      	mov	r2, r8
 8007024:	464b      	mov	r3, r9
 8007026:	4650      	mov	r0, sl
 8007028:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800702c:	f002 f944 	bl	80092b8 <__d2b>
 8007030:	901c      	str	r0, [sp, #112]	; 0x70
 8007032:	2800      	cmp	r0, #0
 8007034:	f43f aefb 	beq.w	8006e2e <_strtod_l+0x486>
 8007038:	2101      	movs	r1, #1
 800703a:	4650      	mov	r0, sl
 800703c:	f001 fe96 	bl	8008d6c <__i2b>
 8007040:	4603      	mov	r3, r0
 8007042:	9004      	str	r0, [sp, #16]
 8007044:	2800      	cmp	r0, #0
 8007046:	f43f aef2 	beq.w	8006e2e <_strtod_l+0x486>
 800704a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800704c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800704e:	2d00      	cmp	r5, #0
 8007050:	bfab      	itete	ge
 8007052:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007054:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007056:	18ee      	addge	r6, r5, r3
 8007058:	1b5c      	sublt	r4, r3, r5
 800705a:	9b05      	ldr	r3, [sp, #20]
 800705c:	bfa8      	it	ge
 800705e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007060:	eba5 0503 	sub.w	r5, r5, r3
 8007064:	4415      	add	r5, r2
 8007066:	4b71      	ldr	r3, [pc, #452]	; (800722c <_strtod_l+0x884>)
 8007068:	f105 35ff 	add.w	r5, r5, #4294967295
 800706c:	bfb8      	it	lt
 800706e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007070:	429d      	cmp	r5, r3
 8007072:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007076:	f280 80c9 	bge.w	800720c <_strtod_l+0x864>
 800707a:	1b5b      	subs	r3, r3, r5
 800707c:	2b1f      	cmp	r3, #31
 800707e:	f04f 0701 	mov.w	r7, #1
 8007082:	eba2 0203 	sub.w	r2, r2, r3
 8007086:	f300 80b6 	bgt.w	80071f6 <_strtod_l+0x84e>
 800708a:	2500      	movs	r5, #0
 800708c:	fa07 f303 	lsl.w	r3, r7, r3
 8007090:	930f      	str	r3, [sp, #60]	; 0x3c
 8007092:	18b7      	adds	r7, r6, r2
 8007094:	9b05      	ldr	r3, [sp, #20]
 8007096:	42be      	cmp	r6, r7
 8007098:	4414      	add	r4, r2
 800709a:	441c      	add	r4, r3
 800709c:	4633      	mov	r3, r6
 800709e:	bfa8      	it	ge
 80070a0:	463b      	movge	r3, r7
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	bfa8      	it	ge
 80070a6:	4623      	movge	r3, r4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bfc2      	ittt	gt
 80070ac:	1aff      	subgt	r7, r7, r3
 80070ae:	1ae4      	subgt	r4, r4, r3
 80070b0:	1af6      	subgt	r6, r6, r3
 80070b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dd17      	ble.n	80070e8 <_strtod_l+0x740>
 80070b8:	461a      	mov	r2, r3
 80070ba:	4650      	mov	r0, sl
 80070bc:	9904      	ldr	r1, [sp, #16]
 80070be:	f001 ff0f 	bl	8008ee0 <__pow5mult>
 80070c2:	9004      	str	r0, [sp, #16]
 80070c4:	2800      	cmp	r0, #0
 80070c6:	f43f aeb2 	beq.w	8006e2e <_strtod_l+0x486>
 80070ca:	4601      	mov	r1, r0
 80070cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070ce:	4650      	mov	r0, sl
 80070d0:	f001 fe62 	bl	8008d98 <__multiply>
 80070d4:	9009      	str	r0, [sp, #36]	; 0x24
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f aea9 	beq.w	8006e2e <_strtod_l+0x486>
 80070dc:	4650      	mov	r0, sl
 80070de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070e0:	f001 fd40 	bl	8008b64 <_Bfree>
 80070e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e6:	931c      	str	r3, [sp, #112]	; 0x70
 80070e8:	2f00      	cmp	r7, #0
 80070ea:	f300 8093 	bgt.w	8007214 <_strtod_l+0x86c>
 80070ee:	9b07      	ldr	r3, [sp, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	dd08      	ble.n	8007106 <_strtod_l+0x75e>
 80070f4:	4650      	mov	r0, sl
 80070f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070f8:	9906      	ldr	r1, [sp, #24]
 80070fa:	f001 fef1 	bl	8008ee0 <__pow5mult>
 80070fe:	9006      	str	r0, [sp, #24]
 8007100:	2800      	cmp	r0, #0
 8007102:	f43f ae94 	beq.w	8006e2e <_strtod_l+0x486>
 8007106:	2c00      	cmp	r4, #0
 8007108:	dd08      	ble.n	800711c <_strtod_l+0x774>
 800710a:	4622      	mov	r2, r4
 800710c:	4650      	mov	r0, sl
 800710e:	9906      	ldr	r1, [sp, #24]
 8007110:	f001 ff40 	bl	8008f94 <__lshift>
 8007114:	9006      	str	r0, [sp, #24]
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f ae89 	beq.w	8006e2e <_strtod_l+0x486>
 800711c:	2e00      	cmp	r6, #0
 800711e:	dd08      	ble.n	8007132 <_strtod_l+0x78a>
 8007120:	4632      	mov	r2, r6
 8007122:	4650      	mov	r0, sl
 8007124:	9904      	ldr	r1, [sp, #16]
 8007126:	f001 ff35 	bl	8008f94 <__lshift>
 800712a:	9004      	str	r0, [sp, #16]
 800712c:	2800      	cmp	r0, #0
 800712e:	f43f ae7e 	beq.w	8006e2e <_strtod_l+0x486>
 8007132:	4650      	mov	r0, sl
 8007134:	9a06      	ldr	r2, [sp, #24]
 8007136:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007138:	f001 ffb4 	bl	80090a4 <__mdiff>
 800713c:	4683      	mov	fp, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f ae75 	beq.w	8006e2e <_strtod_l+0x486>
 8007144:	2400      	movs	r4, #0
 8007146:	68c3      	ldr	r3, [r0, #12]
 8007148:	9904      	ldr	r1, [sp, #16]
 800714a:	60c4      	str	r4, [r0, #12]
 800714c:	930d      	str	r3, [sp, #52]	; 0x34
 800714e:	f001 ff8d 	bl	800906c <__mcmp>
 8007152:	42a0      	cmp	r0, r4
 8007154:	da70      	bge.n	8007238 <_strtod_l+0x890>
 8007156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007158:	ea53 0308 	orrs.w	r3, r3, r8
 800715c:	f040 8096 	bne.w	800728c <_strtod_l+0x8e4>
 8007160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 8091 	bne.w	800728c <_strtod_l+0x8e4>
 800716a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800716e:	0d1b      	lsrs	r3, r3, #20
 8007170:	051b      	lsls	r3, r3, #20
 8007172:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007176:	f240 8089 	bls.w	800728c <_strtod_l+0x8e4>
 800717a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800717e:	b923      	cbnz	r3, 800718a <_strtod_l+0x7e2>
 8007180:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007184:	2b01      	cmp	r3, #1
 8007186:	f340 8081 	ble.w	800728c <_strtod_l+0x8e4>
 800718a:	4659      	mov	r1, fp
 800718c:	2201      	movs	r2, #1
 800718e:	4650      	mov	r0, sl
 8007190:	f001 ff00 	bl	8008f94 <__lshift>
 8007194:	9904      	ldr	r1, [sp, #16]
 8007196:	4683      	mov	fp, r0
 8007198:	f001 ff68 	bl	800906c <__mcmp>
 800719c:	2800      	cmp	r0, #0
 800719e:	dd75      	ble.n	800728c <_strtod_l+0x8e4>
 80071a0:	9905      	ldr	r1, [sp, #20]
 80071a2:	464b      	mov	r3, r9
 80071a4:	4a22      	ldr	r2, [pc, #136]	; (8007230 <_strtod_l+0x888>)
 80071a6:	2900      	cmp	r1, #0
 80071a8:	f000 8091 	beq.w	80072ce <_strtod_l+0x926>
 80071ac:	ea02 0109 	and.w	r1, r2, r9
 80071b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80071b4:	f300 808b 	bgt.w	80072ce <_strtod_l+0x926>
 80071b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071bc:	f77f aea9 	ble.w	8006f12 <_strtod_l+0x56a>
 80071c0:	2300      	movs	r3, #0
 80071c2:	4a1c      	ldr	r2, [pc, #112]	; (8007234 <_strtod_l+0x88c>)
 80071c4:	4640      	mov	r0, r8
 80071c6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80071ca:	4649      	mov	r1, r9
 80071cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80071d0:	f7f9 fa36 	bl	8000640 <__aeabi_dmul>
 80071d4:	460b      	mov	r3, r1
 80071d6:	4303      	orrs	r3, r0
 80071d8:	bf08      	it	eq
 80071da:	2322      	moveq	r3, #34	; 0x22
 80071dc:	4680      	mov	r8, r0
 80071de:	4689      	mov	r9, r1
 80071e0:	bf08      	it	eq
 80071e2:	f8ca 3000 	streq.w	r3, [sl]
 80071e6:	e62d      	b.n	8006e44 <_strtod_l+0x49c>
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	ea03 0808 	and.w	r8, r3, r8
 80071f4:	e6db      	b.n	8006fae <_strtod_l+0x606>
 80071f6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80071fa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80071fe:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007202:	35e2      	adds	r5, #226	; 0xe2
 8007204:	fa07 f505 	lsl.w	r5, r7, r5
 8007208:	970f      	str	r7, [sp, #60]	; 0x3c
 800720a:	e742      	b.n	8007092 <_strtod_l+0x6ea>
 800720c:	2301      	movs	r3, #1
 800720e:	2500      	movs	r5, #0
 8007210:	930f      	str	r3, [sp, #60]	; 0x3c
 8007212:	e73e      	b.n	8007092 <_strtod_l+0x6ea>
 8007214:	463a      	mov	r2, r7
 8007216:	4650      	mov	r0, sl
 8007218:	991c      	ldr	r1, [sp, #112]	; 0x70
 800721a:	f001 febb 	bl	8008f94 <__lshift>
 800721e:	901c      	str	r0, [sp, #112]	; 0x70
 8007220:	2800      	cmp	r0, #0
 8007222:	f47f af64 	bne.w	80070ee <_strtod_l+0x746>
 8007226:	e602      	b.n	8006e2e <_strtod_l+0x486>
 8007228:	0800cd50 	.word	0x0800cd50
 800722c:	fffffc02 	.word	0xfffffc02
 8007230:	7ff00000 	.word	0x7ff00000
 8007234:	39500000 	.word	0x39500000
 8007238:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800723c:	d166      	bne.n	800730c <_strtod_l+0x964>
 800723e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007244:	b35a      	cbz	r2, 800729e <_strtod_l+0x8f6>
 8007246:	4a9c      	ldr	r2, [pc, #624]	; (80074b8 <_strtod_l+0xb10>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d12c      	bne.n	80072a6 <_strtod_l+0x8fe>
 800724c:	9b05      	ldr	r3, [sp, #20]
 800724e:	4640      	mov	r0, r8
 8007250:	b303      	cbz	r3, 8007294 <_strtod_l+0x8ec>
 8007252:	464b      	mov	r3, r9
 8007254:	4a99      	ldr	r2, [pc, #612]	; (80074bc <_strtod_l+0xb14>)
 8007256:	f04f 31ff 	mov.w	r1, #4294967295
 800725a:	401a      	ands	r2, r3
 800725c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007260:	d81b      	bhi.n	800729a <_strtod_l+0x8f2>
 8007262:	0d12      	lsrs	r2, r2, #20
 8007264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007268:	fa01 f303 	lsl.w	r3, r1, r3
 800726c:	4298      	cmp	r0, r3
 800726e:	d11a      	bne.n	80072a6 <_strtod_l+0x8fe>
 8007270:	4b93      	ldr	r3, [pc, #588]	; (80074c0 <_strtod_l+0xb18>)
 8007272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007274:	429a      	cmp	r2, r3
 8007276:	d102      	bne.n	800727e <_strtod_l+0x8d6>
 8007278:	3001      	adds	r0, #1
 800727a:	f43f add8 	beq.w	8006e2e <_strtod_l+0x486>
 800727e:	f04f 0800 	mov.w	r8, #0
 8007282:	4b8e      	ldr	r3, [pc, #568]	; (80074bc <_strtod_l+0xb14>)
 8007284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007286:	401a      	ands	r2, r3
 8007288:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800728c:	9b05      	ldr	r3, [sp, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d196      	bne.n	80071c0 <_strtod_l+0x818>
 8007292:	e5d7      	b.n	8006e44 <_strtod_l+0x49c>
 8007294:	f04f 33ff 	mov.w	r3, #4294967295
 8007298:	e7e8      	b.n	800726c <_strtod_l+0x8c4>
 800729a:	460b      	mov	r3, r1
 800729c:	e7e6      	b.n	800726c <_strtod_l+0x8c4>
 800729e:	ea53 0308 	orrs.w	r3, r3, r8
 80072a2:	f43f af7d 	beq.w	80071a0 <_strtod_l+0x7f8>
 80072a6:	b1e5      	cbz	r5, 80072e2 <_strtod_l+0x93a>
 80072a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072aa:	421d      	tst	r5, r3
 80072ac:	d0ee      	beq.n	800728c <_strtod_l+0x8e4>
 80072ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b0:	4640      	mov	r0, r8
 80072b2:	4649      	mov	r1, r9
 80072b4:	9a05      	ldr	r2, [sp, #20]
 80072b6:	b1c3      	cbz	r3, 80072ea <_strtod_l+0x942>
 80072b8:	f7ff fb52 	bl	8006960 <sulp>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072c4:	f7f9 f806 	bl	80002d4 <__adddf3>
 80072c8:	4680      	mov	r8, r0
 80072ca:	4689      	mov	r9, r1
 80072cc:	e7de      	b.n	800728c <_strtod_l+0x8e4>
 80072ce:	4013      	ands	r3, r2
 80072d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072d4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80072d8:	f04f 38ff 	mov.w	r8, #4294967295
 80072dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80072e0:	e7d4      	b.n	800728c <_strtod_l+0x8e4>
 80072e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072e4:	ea13 0f08 	tst.w	r3, r8
 80072e8:	e7e0      	b.n	80072ac <_strtod_l+0x904>
 80072ea:	f7ff fb39 	bl	8006960 <sulp>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072f6:	f7f8 ffeb 	bl	80002d0 <__aeabi_dsub>
 80072fa:	2200      	movs	r2, #0
 80072fc:	2300      	movs	r3, #0
 80072fe:	4680      	mov	r8, r0
 8007300:	4689      	mov	r9, r1
 8007302:	f7f9 fc05 	bl	8000b10 <__aeabi_dcmpeq>
 8007306:	2800      	cmp	r0, #0
 8007308:	d0c0      	beq.n	800728c <_strtod_l+0x8e4>
 800730a:	e602      	b.n	8006f12 <_strtod_l+0x56a>
 800730c:	4658      	mov	r0, fp
 800730e:	9904      	ldr	r1, [sp, #16]
 8007310:	f002 f82e 	bl	8009370 <__ratio>
 8007314:	2200      	movs	r2, #0
 8007316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	f7f9 fc0b 	bl	8000b38 <__aeabi_dcmple>
 8007322:	2800      	cmp	r0, #0
 8007324:	d075      	beq.n	8007412 <_strtod_l+0xa6a>
 8007326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007328:	2b00      	cmp	r3, #0
 800732a:	d047      	beq.n	80073bc <_strtod_l+0xa14>
 800732c:	2600      	movs	r6, #0
 800732e:	4f65      	ldr	r7, [pc, #404]	; (80074c4 <_strtod_l+0xb1c>)
 8007330:	4d64      	ldr	r5, [pc, #400]	; (80074c4 <_strtod_l+0xb1c>)
 8007332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007338:	0d1b      	lsrs	r3, r3, #20
 800733a:	051b      	lsls	r3, r3, #20
 800733c:	930f      	str	r3, [sp, #60]	; 0x3c
 800733e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007340:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <_strtod_l+0xb20>)
 8007342:	429a      	cmp	r2, r3
 8007344:	f040 80c8 	bne.w	80074d8 <_strtod_l+0xb30>
 8007348:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800734c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007352:	4640      	mov	r0, r8
 8007354:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007358:	4649      	mov	r1, r9
 800735a:	f001 ff33 	bl	80091c4 <__ulp>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4630      	mov	r0, r6
 8007364:	4639      	mov	r1, r7
 8007366:	f7f9 f96b 	bl	8000640 <__aeabi_dmul>
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	f7f8 ffb1 	bl	80002d4 <__adddf3>
 8007372:	460b      	mov	r3, r1
 8007374:	4951      	ldr	r1, [pc, #324]	; (80074bc <_strtod_l+0xb14>)
 8007376:	4a55      	ldr	r2, [pc, #340]	; (80074cc <_strtod_l+0xb24>)
 8007378:	4019      	ands	r1, r3
 800737a:	4291      	cmp	r1, r2
 800737c:	4680      	mov	r8, r0
 800737e:	d95e      	bls.n	800743e <_strtod_l+0xa96>
 8007380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007382:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007386:	4293      	cmp	r3, r2
 8007388:	d103      	bne.n	8007392 <_strtod_l+0x9ea>
 800738a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738c:	3301      	adds	r3, #1
 800738e:	f43f ad4e 	beq.w	8006e2e <_strtod_l+0x486>
 8007392:	f04f 38ff 	mov.w	r8, #4294967295
 8007396:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80074c0 <_strtod_l+0xb18>
 800739a:	4650      	mov	r0, sl
 800739c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800739e:	f001 fbe1 	bl	8008b64 <_Bfree>
 80073a2:	4650      	mov	r0, sl
 80073a4:	9906      	ldr	r1, [sp, #24]
 80073a6:	f001 fbdd 	bl	8008b64 <_Bfree>
 80073aa:	4650      	mov	r0, sl
 80073ac:	9904      	ldr	r1, [sp, #16]
 80073ae:	f001 fbd9 	bl	8008b64 <_Bfree>
 80073b2:	4659      	mov	r1, fp
 80073b4:	4650      	mov	r0, sl
 80073b6:	f001 fbd5 	bl	8008b64 <_Bfree>
 80073ba:	e61c      	b.n	8006ff6 <_strtod_l+0x64e>
 80073bc:	f1b8 0f00 	cmp.w	r8, #0
 80073c0:	d119      	bne.n	80073f6 <_strtod_l+0xa4e>
 80073c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073c8:	b9e3      	cbnz	r3, 8007404 <_strtod_l+0xa5c>
 80073ca:	2200      	movs	r2, #0
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	4b3c      	ldr	r3, [pc, #240]	; (80074c4 <_strtod_l+0xb1c>)
 80073d2:	f7f9 fba7 	bl	8000b24 <__aeabi_dcmplt>
 80073d6:	b9c8      	cbnz	r0, 800740c <_strtod_l+0xa64>
 80073d8:	2200      	movs	r2, #0
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	4b3c      	ldr	r3, [pc, #240]	; (80074d0 <_strtod_l+0xb28>)
 80073e0:	f7f9 f92e 	bl	8000640 <__aeabi_dmul>
 80073e4:	4604      	mov	r4, r0
 80073e6:	460d      	mov	r5, r1
 80073e8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80073ec:	9418      	str	r4, [sp, #96]	; 0x60
 80073ee:	9319      	str	r3, [sp, #100]	; 0x64
 80073f0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80073f4:	e79d      	b.n	8007332 <_strtod_l+0x98a>
 80073f6:	f1b8 0f01 	cmp.w	r8, #1
 80073fa:	d103      	bne.n	8007404 <_strtod_l+0xa5c>
 80073fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f43f ad87 	beq.w	8006f12 <_strtod_l+0x56a>
 8007404:	2600      	movs	r6, #0
 8007406:	2400      	movs	r4, #0
 8007408:	4f32      	ldr	r7, [pc, #200]	; (80074d4 <_strtod_l+0xb2c>)
 800740a:	e791      	b.n	8007330 <_strtod_l+0x988>
 800740c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800740e:	4d30      	ldr	r5, [pc, #192]	; (80074d0 <_strtod_l+0xb28>)
 8007410:	e7ea      	b.n	80073e8 <_strtod_l+0xa40>
 8007412:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <_strtod_l+0xb28>)
 8007414:	2200      	movs	r2, #0
 8007416:	4630      	mov	r0, r6
 8007418:	4639      	mov	r1, r7
 800741a:	f7f9 f911 	bl	8000640 <__aeabi_dmul>
 800741e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007420:	4604      	mov	r4, r0
 8007422:	460d      	mov	r5, r1
 8007424:	b933      	cbnz	r3, 8007434 <_strtod_l+0xa8c>
 8007426:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800742a:	9010      	str	r0, [sp, #64]	; 0x40
 800742c:	9311      	str	r3, [sp, #68]	; 0x44
 800742e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007432:	e77e      	b.n	8007332 <_strtod_l+0x98a>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800743c:	e7f7      	b.n	800742e <_strtod_l+0xa86>
 800743e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007442:	9b05      	ldr	r3, [sp, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1a8      	bne.n	800739a <_strtod_l+0x9f2>
 8007448:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800744c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800744e:	0d1b      	lsrs	r3, r3, #20
 8007450:	051b      	lsls	r3, r3, #20
 8007452:	429a      	cmp	r2, r3
 8007454:	d1a1      	bne.n	800739a <_strtod_l+0x9f2>
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 fcc7 	bl	8000dec <__aeabi_d2lz>
 800745e:	f7f9 f8c1 	bl	80005e4 <__aeabi_l2d>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	f7f8 ff31 	bl	80002d0 <__aeabi_dsub>
 800746e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007474:	ea43 0308 	orr.w	r3, r3, r8
 8007478:	4313      	orrs	r3, r2
 800747a:	4604      	mov	r4, r0
 800747c:	460d      	mov	r5, r1
 800747e:	d066      	beq.n	800754e <_strtod_l+0xba6>
 8007480:	a309      	add	r3, pc, #36	; (adr r3, 80074a8 <_strtod_l+0xb00>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f7f9 fb4d 	bl	8000b24 <__aeabi_dcmplt>
 800748a:	2800      	cmp	r0, #0
 800748c:	f47f acda 	bne.w	8006e44 <_strtod_l+0x49c>
 8007490:	a307      	add	r3, pc, #28	; (adr r3, 80074b0 <_strtod_l+0xb08>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f9 fb61 	bl	8000b60 <__aeabi_dcmpgt>
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f af7b 	beq.w	800739a <_strtod_l+0x9f2>
 80074a4:	e4ce      	b.n	8006e44 <_strtod_l+0x49c>
 80074a6:	bf00      	nop
 80074a8:	94a03595 	.word	0x94a03595
 80074ac:	3fdfffff 	.word	0x3fdfffff
 80074b0:	35afe535 	.word	0x35afe535
 80074b4:	3fe00000 	.word	0x3fe00000
 80074b8:	000fffff 	.word	0x000fffff
 80074bc:	7ff00000 	.word	0x7ff00000
 80074c0:	7fefffff 	.word	0x7fefffff
 80074c4:	3ff00000 	.word	0x3ff00000
 80074c8:	7fe00000 	.word	0x7fe00000
 80074cc:	7c9fffff 	.word	0x7c9fffff
 80074d0:	3fe00000 	.word	0x3fe00000
 80074d4:	bff00000 	.word	0xbff00000
 80074d8:	9b05      	ldr	r3, [sp, #20]
 80074da:	b313      	cbz	r3, 8007522 <_strtod_l+0xb7a>
 80074dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074e2:	d81e      	bhi.n	8007522 <_strtod_l+0xb7a>
 80074e4:	a326      	add	r3, pc, #152	; (adr r3, 8007580 <_strtod_l+0xbd8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	4620      	mov	r0, r4
 80074ec:	4629      	mov	r1, r5
 80074ee:	f7f9 fb23 	bl	8000b38 <__aeabi_dcmple>
 80074f2:	b190      	cbz	r0, 800751a <_strtod_l+0xb72>
 80074f4:	4629      	mov	r1, r5
 80074f6:	4620      	mov	r0, r4
 80074f8:	f7f9 fb7a 	bl	8000bf0 <__aeabi_d2uiz>
 80074fc:	2801      	cmp	r0, #1
 80074fe:	bf38      	it	cc
 8007500:	2001      	movcc	r0, #1
 8007502:	f7f9 f823 	bl	800054c <__aeabi_ui2d>
 8007506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	b9d3      	cbnz	r3, 8007544 <_strtod_l+0xb9c>
 800750e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007512:	9012      	str	r0, [sp, #72]	; 0x48
 8007514:	9313      	str	r3, [sp, #76]	; 0x4c
 8007516:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800751a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800751c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007520:	1a9f      	subs	r7, r3, r2
 8007522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007526:	f001 fe4d 	bl	80091c4 <__ulp>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4630      	mov	r0, r6
 8007530:	4639      	mov	r1, r7
 8007532:	f7f9 f885 	bl	8000640 <__aeabi_dmul>
 8007536:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800753a:	f7f8 fecb 	bl	80002d4 <__adddf3>
 800753e:	4680      	mov	r8, r0
 8007540:	4689      	mov	r9, r1
 8007542:	e77e      	b.n	8007442 <_strtod_l+0xa9a>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800754c:	e7e3      	b.n	8007516 <_strtod_l+0xb6e>
 800754e:	a30e      	add	r3, pc, #56	; (adr r3, 8007588 <_strtod_l+0xbe0>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f7f9 fae6 	bl	8000b24 <__aeabi_dcmplt>
 8007558:	e7a1      	b.n	800749e <_strtod_l+0xaf6>
 800755a:	2300      	movs	r3, #0
 800755c:	930c      	str	r3, [sp, #48]	; 0x30
 800755e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007560:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	f7ff ba65 	b.w	8006a32 <_strtod_l+0x8a>
 8007568:	2b65      	cmp	r3, #101	; 0x65
 800756a:	f43f ab5c 	beq.w	8006c26 <_strtod_l+0x27e>
 800756e:	2b45      	cmp	r3, #69	; 0x45
 8007570:	f43f ab59 	beq.w	8006c26 <_strtod_l+0x27e>
 8007574:	2201      	movs	r2, #1
 8007576:	f7ff bb8d 	b.w	8006c94 <_strtod_l+0x2ec>
 800757a:	bf00      	nop
 800757c:	f3af 8000 	nop.w
 8007580:	ffc00000 	.word	0xffc00000
 8007584:	41dfffff 	.word	0x41dfffff
 8007588:	94a03595 	.word	0x94a03595
 800758c:	3fcfffff 	.word	0x3fcfffff

08007590 <_strtod_r>:
 8007590:	4b01      	ldr	r3, [pc, #4]	; (8007598 <_strtod_r+0x8>)
 8007592:	f7ff ba09 	b.w	80069a8 <_strtod_l>
 8007596:	bf00      	nop
 8007598:	2000008c 	.word	0x2000008c

0800759c <_strtol_l.isra.0>:
 800759c:	2b01      	cmp	r3, #1
 800759e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a2:	4686      	mov	lr, r0
 80075a4:	d001      	beq.n	80075aa <_strtol_l.isra.0+0xe>
 80075a6:	2b24      	cmp	r3, #36	; 0x24
 80075a8:	d906      	bls.n	80075b8 <_strtol_l.isra.0+0x1c>
 80075aa:	f7fe fb11 	bl	8005bd0 <__errno>
 80075ae:	2316      	movs	r3, #22
 80075b0:	6003      	str	r3, [r0, #0]
 80075b2:	2000      	movs	r0, #0
 80075b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b8:	468c      	mov	ip, r1
 80075ba:	4e3a      	ldr	r6, [pc, #232]	; (80076a4 <_strtol_l.isra.0+0x108>)
 80075bc:	4660      	mov	r0, ip
 80075be:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80075c2:	5da5      	ldrb	r5, [r4, r6]
 80075c4:	f015 0508 	ands.w	r5, r5, #8
 80075c8:	d1f8      	bne.n	80075bc <_strtol_l.isra.0+0x20>
 80075ca:	2c2d      	cmp	r4, #45	; 0x2d
 80075cc:	d133      	bne.n	8007636 <_strtol_l.isra.0+0x9a>
 80075ce:	f04f 0801 	mov.w	r8, #1
 80075d2:	f89c 4000 	ldrb.w	r4, [ip]
 80075d6:	f100 0c02 	add.w	ip, r0, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d05d      	beq.n	800769a <_strtol_l.isra.0+0xfe>
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d10c      	bne.n	80075fc <_strtol_l.isra.0+0x60>
 80075e2:	2c30      	cmp	r4, #48	; 0x30
 80075e4:	d10a      	bne.n	80075fc <_strtol_l.isra.0+0x60>
 80075e6:	f89c 0000 	ldrb.w	r0, [ip]
 80075ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80075ee:	2858      	cmp	r0, #88	; 0x58
 80075f0:	d14e      	bne.n	8007690 <_strtol_l.isra.0+0xf4>
 80075f2:	2310      	movs	r3, #16
 80075f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80075f8:	f10c 0c02 	add.w	ip, ip, #2
 80075fc:	2500      	movs	r5, #0
 80075fe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007602:	3f01      	subs	r7, #1
 8007604:	fbb7 f9f3 	udiv	r9, r7, r3
 8007608:	4628      	mov	r0, r5
 800760a:	fb03 7a19 	mls	sl, r3, r9, r7
 800760e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007612:	2e09      	cmp	r6, #9
 8007614:	d818      	bhi.n	8007648 <_strtol_l.isra.0+0xac>
 8007616:	4634      	mov	r4, r6
 8007618:	42a3      	cmp	r3, r4
 800761a:	dd24      	ble.n	8007666 <_strtol_l.isra.0+0xca>
 800761c:	2d00      	cmp	r5, #0
 800761e:	db1f      	blt.n	8007660 <_strtol_l.isra.0+0xc4>
 8007620:	4581      	cmp	r9, r0
 8007622:	d31d      	bcc.n	8007660 <_strtol_l.isra.0+0xc4>
 8007624:	d101      	bne.n	800762a <_strtol_l.isra.0+0x8e>
 8007626:	45a2      	cmp	sl, r4
 8007628:	db1a      	blt.n	8007660 <_strtol_l.isra.0+0xc4>
 800762a:	2501      	movs	r5, #1
 800762c:	fb00 4003 	mla	r0, r0, r3, r4
 8007630:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007634:	e7eb      	b.n	800760e <_strtol_l.isra.0+0x72>
 8007636:	2c2b      	cmp	r4, #43	; 0x2b
 8007638:	bf08      	it	eq
 800763a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800763e:	46a8      	mov	r8, r5
 8007640:	bf08      	it	eq
 8007642:	f100 0c02 	addeq.w	ip, r0, #2
 8007646:	e7c8      	b.n	80075da <_strtol_l.isra.0+0x3e>
 8007648:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800764c:	2e19      	cmp	r6, #25
 800764e:	d801      	bhi.n	8007654 <_strtol_l.isra.0+0xb8>
 8007650:	3c37      	subs	r4, #55	; 0x37
 8007652:	e7e1      	b.n	8007618 <_strtol_l.isra.0+0x7c>
 8007654:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007658:	2e19      	cmp	r6, #25
 800765a:	d804      	bhi.n	8007666 <_strtol_l.isra.0+0xca>
 800765c:	3c57      	subs	r4, #87	; 0x57
 800765e:	e7db      	b.n	8007618 <_strtol_l.isra.0+0x7c>
 8007660:	f04f 35ff 	mov.w	r5, #4294967295
 8007664:	e7e4      	b.n	8007630 <_strtol_l.isra.0+0x94>
 8007666:	2d00      	cmp	r5, #0
 8007668:	da08      	bge.n	800767c <_strtol_l.isra.0+0xe0>
 800766a:	2322      	movs	r3, #34	; 0x22
 800766c:	4638      	mov	r0, r7
 800766e:	f8ce 3000 	str.w	r3, [lr]
 8007672:	2a00      	cmp	r2, #0
 8007674:	d09e      	beq.n	80075b4 <_strtol_l.isra.0+0x18>
 8007676:	f10c 31ff 	add.w	r1, ip, #4294967295
 800767a:	e007      	b.n	800768c <_strtol_l.isra.0+0xf0>
 800767c:	f1b8 0f00 	cmp.w	r8, #0
 8007680:	d000      	beq.n	8007684 <_strtol_l.isra.0+0xe8>
 8007682:	4240      	negs	r0, r0
 8007684:	2a00      	cmp	r2, #0
 8007686:	d095      	beq.n	80075b4 <_strtol_l.isra.0+0x18>
 8007688:	2d00      	cmp	r5, #0
 800768a:	d1f4      	bne.n	8007676 <_strtol_l.isra.0+0xda>
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	e791      	b.n	80075b4 <_strtol_l.isra.0+0x18>
 8007690:	2430      	movs	r4, #48	; 0x30
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1b2      	bne.n	80075fc <_strtol_l.isra.0+0x60>
 8007696:	2308      	movs	r3, #8
 8007698:	e7b0      	b.n	80075fc <_strtol_l.isra.0+0x60>
 800769a:	2c30      	cmp	r4, #48	; 0x30
 800769c:	d0a3      	beq.n	80075e6 <_strtol_l.isra.0+0x4a>
 800769e:	230a      	movs	r3, #10
 80076a0:	e7ac      	b.n	80075fc <_strtol_l.isra.0+0x60>
 80076a2:	bf00      	nop
 80076a4:	0800cd79 	.word	0x0800cd79

080076a8 <_strtol_r>:
 80076a8:	f7ff bf78 	b.w	800759c <_strtol_l.isra.0>

080076ac <quorem>:
 80076ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b0:	6903      	ldr	r3, [r0, #16]
 80076b2:	690c      	ldr	r4, [r1, #16]
 80076b4:	4607      	mov	r7, r0
 80076b6:	42a3      	cmp	r3, r4
 80076b8:	f2c0 8083 	blt.w	80077c2 <quorem+0x116>
 80076bc:	3c01      	subs	r4, #1
 80076be:	f100 0514 	add.w	r5, r0, #20
 80076c2:	f101 0814 	add.w	r8, r1, #20
 80076c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d4:	3301      	adds	r3, #1
 80076d6:	429a      	cmp	r2, r3
 80076d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80076dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076e4:	d332      	bcc.n	800774c <quorem+0xa0>
 80076e6:	f04f 0e00 	mov.w	lr, #0
 80076ea:	4640      	mov	r0, r8
 80076ec:	46ac      	mov	ip, r5
 80076ee:	46f2      	mov	sl, lr
 80076f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80076f4:	b293      	uxth	r3, r2
 80076f6:	fb06 e303 	mla	r3, r6, r3, lr
 80076fa:	0c12      	lsrs	r2, r2, #16
 80076fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007700:	fb06 e202 	mla	r2, r6, r2, lr
 8007704:	b29b      	uxth	r3, r3
 8007706:	ebaa 0303 	sub.w	r3, sl, r3
 800770a:	f8dc a000 	ldr.w	sl, [ip]
 800770e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007712:	fa1f fa8a 	uxth.w	sl, sl
 8007716:	4453      	add	r3, sl
 8007718:	fa1f fa82 	uxth.w	sl, r2
 800771c:	f8dc 2000 	ldr.w	r2, [ip]
 8007720:	4581      	cmp	r9, r0
 8007722:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007726:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800772a:	b29b      	uxth	r3, r3
 800772c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007730:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007734:	f84c 3b04 	str.w	r3, [ip], #4
 8007738:	d2da      	bcs.n	80076f0 <quorem+0x44>
 800773a:	f855 300b 	ldr.w	r3, [r5, fp]
 800773e:	b92b      	cbnz	r3, 800774c <quorem+0xa0>
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	3b04      	subs	r3, #4
 8007744:	429d      	cmp	r5, r3
 8007746:	461a      	mov	r2, r3
 8007748:	d32f      	bcc.n	80077aa <quorem+0xfe>
 800774a:	613c      	str	r4, [r7, #16]
 800774c:	4638      	mov	r0, r7
 800774e:	f001 fc8d 	bl	800906c <__mcmp>
 8007752:	2800      	cmp	r0, #0
 8007754:	db25      	blt.n	80077a2 <quorem+0xf6>
 8007756:	4628      	mov	r0, r5
 8007758:	f04f 0c00 	mov.w	ip, #0
 800775c:	3601      	adds	r6, #1
 800775e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007762:	f8d0 e000 	ldr.w	lr, [r0]
 8007766:	b28b      	uxth	r3, r1
 8007768:	ebac 0303 	sub.w	r3, ip, r3
 800776c:	fa1f f28e 	uxth.w	r2, lr
 8007770:	4413      	add	r3, r2
 8007772:	0c0a      	lsrs	r2, r1, #16
 8007774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800777c:	b29b      	uxth	r3, r3
 800777e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007782:	45c1      	cmp	r9, r8
 8007784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007788:	f840 3b04 	str.w	r3, [r0], #4
 800778c:	d2e7      	bcs.n	800775e <quorem+0xb2>
 800778e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007796:	b922      	cbnz	r2, 80077a2 <quorem+0xf6>
 8007798:	3b04      	subs	r3, #4
 800779a:	429d      	cmp	r5, r3
 800779c:	461a      	mov	r2, r3
 800779e:	d30a      	bcc.n	80077b6 <quorem+0x10a>
 80077a0:	613c      	str	r4, [r7, #16]
 80077a2:	4630      	mov	r0, r6
 80077a4:	b003      	add	sp, #12
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	3b04      	subs	r3, #4
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d1cb      	bne.n	800774a <quorem+0x9e>
 80077b2:	3c01      	subs	r4, #1
 80077b4:	e7c6      	b.n	8007744 <quorem+0x98>
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	3b04      	subs	r3, #4
 80077ba:	2a00      	cmp	r2, #0
 80077bc:	d1f0      	bne.n	80077a0 <quorem+0xf4>
 80077be:	3c01      	subs	r4, #1
 80077c0:	e7eb      	b.n	800779a <quorem+0xee>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e7ee      	b.n	80077a4 <quorem+0xf8>
	...

080077c8 <_dtoa_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	4616      	mov	r6, r2
 80077ce:	461f      	mov	r7, r3
 80077d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80077d2:	b099      	sub	sp, #100	; 0x64
 80077d4:	4605      	mov	r5, r0
 80077d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80077da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80077de:	b974      	cbnz	r4, 80077fe <_dtoa_r+0x36>
 80077e0:	2010      	movs	r0, #16
 80077e2:	f001 f949 	bl	8008a78 <malloc>
 80077e6:	4602      	mov	r2, r0
 80077e8:	6268      	str	r0, [r5, #36]	; 0x24
 80077ea:	b920      	cbnz	r0, 80077f6 <_dtoa_r+0x2e>
 80077ec:	21ea      	movs	r1, #234	; 0xea
 80077ee:	4bae      	ldr	r3, [pc, #696]	; (8007aa8 <_dtoa_r+0x2e0>)
 80077f0:	48ae      	ldr	r0, [pc, #696]	; (8007aac <_dtoa_r+0x2e4>)
 80077f2:	f002 f875 	bl	80098e0 <__assert_func>
 80077f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077fa:	6004      	str	r4, [r0, #0]
 80077fc:	60c4      	str	r4, [r0, #12]
 80077fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007800:	6819      	ldr	r1, [r3, #0]
 8007802:	b151      	cbz	r1, 800781a <_dtoa_r+0x52>
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	2301      	movs	r3, #1
 8007808:	4093      	lsls	r3, r2
 800780a:	604a      	str	r2, [r1, #4]
 800780c:	608b      	str	r3, [r1, #8]
 800780e:	4628      	mov	r0, r5
 8007810:	f001 f9a8 	bl	8008b64 <_Bfree>
 8007814:	2200      	movs	r2, #0
 8007816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	1e3b      	subs	r3, r7, #0
 800781c:	bfaf      	iteee	ge
 800781e:	2300      	movge	r3, #0
 8007820:	2201      	movlt	r2, #1
 8007822:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007826:	9305      	strlt	r3, [sp, #20]
 8007828:	bfa8      	it	ge
 800782a:	f8c8 3000 	strge.w	r3, [r8]
 800782e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007832:	4b9f      	ldr	r3, [pc, #636]	; (8007ab0 <_dtoa_r+0x2e8>)
 8007834:	bfb8      	it	lt
 8007836:	f8c8 2000 	strlt.w	r2, [r8]
 800783a:	ea33 0309 	bics.w	r3, r3, r9
 800783e:	d119      	bne.n	8007874 <_dtoa_r+0xac>
 8007840:	f242 730f 	movw	r3, #9999	; 0x270f
 8007844:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007846:	6013      	str	r3, [r2, #0]
 8007848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800784c:	4333      	orrs	r3, r6
 800784e:	f000 8580 	beq.w	8008352 <_dtoa_r+0xb8a>
 8007852:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007854:	b953      	cbnz	r3, 800786c <_dtoa_r+0xa4>
 8007856:	4b97      	ldr	r3, [pc, #604]	; (8007ab4 <_dtoa_r+0x2ec>)
 8007858:	e022      	b.n	80078a0 <_dtoa_r+0xd8>
 800785a:	4b97      	ldr	r3, [pc, #604]	; (8007ab8 <_dtoa_r+0x2f0>)
 800785c:	9308      	str	r3, [sp, #32]
 800785e:	3308      	adds	r3, #8
 8007860:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	9808      	ldr	r0, [sp, #32]
 8007866:	b019      	add	sp, #100	; 0x64
 8007868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786c:	4b91      	ldr	r3, [pc, #580]	; (8007ab4 <_dtoa_r+0x2ec>)
 800786e:	9308      	str	r3, [sp, #32]
 8007870:	3303      	adds	r3, #3
 8007872:	e7f5      	b.n	8007860 <_dtoa_r+0x98>
 8007874:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007878:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800787c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007880:	2200      	movs	r2, #0
 8007882:	2300      	movs	r3, #0
 8007884:	f7f9 f944 	bl	8000b10 <__aeabi_dcmpeq>
 8007888:	4680      	mov	r8, r0
 800788a:	b158      	cbz	r0, 80078a4 <_dtoa_r+0xdc>
 800788c:	2301      	movs	r3, #1
 800788e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8559 	beq.w	800834c <_dtoa_r+0xb84>
 800789a:	4888      	ldr	r0, [pc, #544]	; (8007abc <_dtoa_r+0x2f4>)
 800789c:	6018      	str	r0, [r3, #0]
 800789e:	1e43      	subs	r3, r0, #1
 80078a0:	9308      	str	r3, [sp, #32]
 80078a2:	e7df      	b.n	8007864 <_dtoa_r+0x9c>
 80078a4:	ab16      	add	r3, sp, #88	; 0x58
 80078a6:	9301      	str	r3, [sp, #4]
 80078a8:	ab17      	add	r3, sp, #92	; 0x5c
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	4628      	mov	r0, r5
 80078ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078b2:	f001 fd01 	bl	80092b8 <__d2b>
 80078b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80078ba:	4682      	mov	sl, r0
 80078bc:	2c00      	cmp	r4, #0
 80078be:	d07e      	beq.n	80079be <_dtoa_r+0x1f6>
 80078c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80078ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80078d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80078d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80078da:	2200      	movs	r2, #0
 80078dc:	4b78      	ldr	r3, [pc, #480]	; (8007ac0 <_dtoa_r+0x2f8>)
 80078de:	f7f8 fcf7 	bl	80002d0 <__aeabi_dsub>
 80078e2:	a36b      	add	r3, pc, #428	; (adr r3, 8007a90 <_dtoa_r+0x2c8>)
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	f7f8 feaa 	bl	8000640 <__aeabi_dmul>
 80078ec:	a36a      	add	r3, pc, #424	; (adr r3, 8007a98 <_dtoa_r+0x2d0>)
 80078ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f2:	f7f8 fcef 	bl	80002d4 <__adddf3>
 80078f6:	4606      	mov	r6, r0
 80078f8:	4620      	mov	r0, r4
 80078fa:	460f      	mov	r7, r1
 80078fc:	f7f8 fe36 	bl	800056c <__aeabi_i2d>
 8007900:	a367      	add	r3, pc, #412	; (adr r3, 8007aa0 <_dtoa_r+0x2d8>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fe9b 	bl	8000640 <__aeabi_dmul>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4630      	mov	r0, r6
 8007910:	4639      	mov	r1, r7
 8007912:	f7f8 fcdf 	bl	80002d4 <__adddf3>
 8007916:	4606      	mov	r6, r0
 8007918:	460f      	mov	r7, r1
 800791a:	f7f9 f941 	bl	8000ba0 <__aeabi_d2iz>
 800791e:	2200      	movs	r2, #0
 8007920:	4681      	mov	r9, r0
 8007922:	2300      	movs	r3, #0
 8007924:	4630      	mov	r0, r6
 8007926:	4639      	mov	r1, r7
 8007928:	f7f9 f8fc 	bl	8000b24 <__aeabi_dcmplt>
 800792c:	b148      	cbz	r0, 8007942 <_dtoa_r+0x17a>
 800792e:	4648      	mov	r0, r9
 8007930:	f7f8 fe1c 	bl	800056c <__aeabi_i2d>
 8007934:	4632      	mov	r2, r6
 8007936:	463b      	mov	r3, r7
 8007938:	f7f9 f8ea 	bl	8000b10 <__aeabi_dcmpeq>
 800793c:	b908      	cbnz	r0, 8007942 <_dtoa_r+0x17a>
 800793e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007942:	f1b9 0f16 	cmp.w	r9, #22
 8007946:	d857      	bhi.n	80079f8 <_dtoa_r+0x230>
 8007948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800794c:	4b5d      	ldr	r3, [pc, #372]	; (8007ac4 <_dtoa_r+0x2fc>)
 800794e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f7f9 f8e5 	bl	8000b24 <__aeabi_dcmplt>
 800795a:	2800      	cmp	r0, #0
 800795c:	d04e      	beq.n	80079fc <_dtoa_r+0x234>
 800795e:	2300      	movs	r3, #0
 8007960:	f109 39ff 	add.w	r9, r9, #4294967295
 8007964:	930f      	str	r3, [sp, #60]	; 0x3c
 8007966:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007968:	1b1c      	subs	r4, r3, r4
 800796a:	1e63      	subs	r3, r4, #1
 800796c:	9309      	str	r3, [sp, #36]	; 0x24
 800796e:	bf49      	itett	mi
 8007970:	f1c4 0301 	rsbmi	r3, r4, #1
 8007974:	2300      	movpl	r3, #0
 8007976:	9306      	strmi	r3, [sp, #24]
 8007978:	2300      	movmi	r3, #0
 800797a:	bf54      	ite	pl
 800797c:	9306      	strpl	r3, [sp, #24]
 800797e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007980:	f1b9 0f00 	cmp.w	r9, #0
 8007984:	db3c      	blt.n	8007a00 <_dtoa_r+0x238>
 8007986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007988:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800798c:	444b      	add	r3, r9
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2300      	movs	r3, #0
 8007992:	930a      	str	r3, [sp, #40]	; 0x28
 8007994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007996:	2b09      	cmp	r3, #9
 8007998:	d86c      	bhi.n	8007a74 <_dtoa_r+0x2ac>
 800799a:	2b05      	cmp	r3, #5
 800799c:	bfc4      	itt	gt
 800799e:	3b04      	subgt	r3, #4
 80079a0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80079a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079a4:	bfc8      	it	gt
 80079a6:	2400      	movgt	r4, #0
 80079a8:	f1a3 0302 	sub.w	r3, r3, #2
 80079ac:	bfd8      	it	le
 80079ae:	2401      	movle	r4, #1
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	f200 808b 	bhi.w	8007acc <_dtoa_r+0x304>
 80079b6:	e8df f003 	tbb	[pc, r3]
 80079ba:	4f2d      	.short	0x4f2d
 80079bc:	5b4d      	.short	0x5b4d
 80079be:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80079c2:	441c      	add	r4, r3
 80079c4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	bfc3      	ittte	gt
 80079cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079d0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80079d4:	fa09 f303 	lslgt.w	r3, r9, r3
 80079d8:	f1c3 0320 	rsble	r3, r3, #32
 80079dc:	bfc6      	itte	gt
 80079de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80079e2:	4318      	orrgt	r0, r3
 80079e4:	fa06 f003 	lslle.w	r0, r6, r3
 80079e8:	f7f8 fdb0 	bl	800054c <__aeabi_ui2d>
 80079ec:	2301      	movs	r3, #1
 80079ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80079f2:	3c01      	subs	r4, #1
 80079f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80079f6:	e770      	b.n	80078da <_dtoa_r+0x112>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7b3      	b.n	8007964 <_dtoa_r+0x19c>
 80079fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80079fe:	e7b2      	b.n	8007966 <_dtoa_r+0x19e>
 8007a00:	9b06      	ldr	r3, [sp, #24]
 8007a02:	eba3 0309 	sub.w	r3, r3, r9
 8007a06:	9306      	str	r3, [sp, #24]
 8007a08:	f1c9 0300 	rsb	r3, r9, #0
 8007a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0e:	2300      	movs	r3, #0
 8007a10:	930e      	str	r3, [sp, #56]	; 0x38
 8007a12:	e7bf      	b.n	8007994 <_dtoa_r+0x1cc>
 8007a14:	2300      	movs	r3, #0
 8007a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dc59      	bgt.n	8007ad2 <_dtoa_r+0x30a>
 8007a1e:	f04f 0b01 	mov.w	fp, #1
 8007a22:	465b      	mov	r3, fp
 8007a24:	f8cd b008 	str.w	fp, [sp, #8]
 8007a28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007a30:	6042      	str	r2, [r0, #4]
 8007a32:	2204      	movs	r2, #4
 8007a34:	f102 0614 	add.w	r6, r2, #20
 8007a38:	429e      	cmp	r6, r3
 8007a3a:	6841      	ldr	r1, [r0, #4]
 8007a3c:	d94f      	bls.n	8007ade <_dtoa_r+0x316>
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f001 f850 	bl	8008ae4 <_Balloc>
 8007a44:	9008      	str	r0, [sp, #32]
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d14d      	bne.n	8007ae6 <_dtoa_r+0x31e>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a50:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <_dtoa_r+0x300>)
 8007a52:	e6cd      	b.n	80077f0 <_dtoa_r+0x28>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e7de      	b.n	8007a16 <_dtoa_r+0x24e>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a5e:	eb09 0b03 	add.w	fp, r9, r3
 8007a62:	f10b 0301 	add.w	r3, fp, #1
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	9302      	str	r3, [sp, #8]
 8007a6a:	bfb8      	it	lt
 8007a6c:	2301      	movlt	r3, #1
 8007a6e:	e7dd      	b.n	8007a2c <_dtoa_r+0x264>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7f2      	b.n	8007a5a <_dtoa_r+0x292>
 8007a74:	2401      	movs	r4, #1
 8007a76:	2300      	movs	r3, #0
 8007a78:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a7a:	9322      	str	r3, [sp, #136]	; 0x88
 8007a7c:	f04f 3bff 	mov.w	fp, #4294967295
 8007a80:	2200      	movs	r2, #0
 8007a82:	2312      	movs	r3, #18
 8007a84:	f8cd b008 	str.w	fp, [sp, #8]
 8007a88:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a8a:	e7cf      	b.n	8007a2c <_dtoa_r+0x264>
 8007a8c:	f3af 8000 	nop.w
 8007a90:	636f4361 	.word	0x636f4361
 8007a94:	3fd287a7 	.word	0x3fd287a7
 8007a98:	8b60c8b3 	.word	0x8b60c8b3
 8007a9c:	3fc68a28 	.word	0x3fc68a28
 8007aa0:	509f79fb 	.word	0x509f79fb
 8007aa4:	3fd34413 	.word	0x3fd34413
 8007aa8:	0800ce86 	.word	0x0800ce86
 8007aac:	0800ce9d 	.word	0x0800ce9d
 8007ab0:	7ff00000 	.word	0x7ff00000
 8007ab4:	0800ce82 	.word	0x0800ce82
 8007ab8:	0800ce79 	.word	0x0800ce79
 8007abc:	0800ccf9 	.word	0x0800ccf9
 8007ac0:	3ff80000 	.word	0x3ff80000
 8007ac4:	0800d018 	.word	0x0800d018
 8007ac8:	0800cefc 	.word	0x0800cefc
 8007acc:	2301      	movs	r3, #1
 8007ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ad0:	e7d4      	b.n	8007a7c <_dtoa_r+0x2b4>
 8007ad2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007ad6:	465b      	mov	r3, fp
 8007ad8:	f8cd b008 	str.w	fp, [sp, #8]
 8007adc:	e7a6      	b.n	8007a2c <_dtoa_r+0x264>
 8007ade:	3101      	adds	r1, #1
 8007ae0:	6041      	str	r1, [r0, #4]
 8007ae2:	0052      	lsls	r2, r2, #1
 8007ae4:	e7a6      	b.n	8007a34 <_dtoa_r+0x26c>
 8007ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ae8:	9a08      	ldr	r2, [sp, #32]
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	9b02      	ldr	r3, [sp, #8]
 8007aee:	2b0e      	cmp	r3, #14
 8007af0:	f200 80a8 	bhi.w	8007c44 <_dtoa_r+0x47c>
 8007af4:	2c00      	cmp	r4, #0
 8007af6:	f000 80a5 	beq.w	8007c44 <_dtoa_r+0x47c>
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	dd34      	ble.n	8007b6a <_dtoa_r+0x3a2>
 8007b00:	4a9a      	ldr	r2, [pc, #616]	; (8007d6c <_dtoa_r+0x5a4>)
 8007b02:	f009 030f 	and.w	r3, r9, #15
 8007b06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b0a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007b0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007b16:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007b1a:	d016      	beq.n	8007b4a <_dtoa_r+0x382>
 8007b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b20:	4b93      	ldr	r3, [pc, #588]	; (8007d70 <_dtoa_r+0x5a8>)
 8007b22:	2703      	movs	r7, #3
 8007b24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b28:	f7f8 feb4 	bl	8000894 <__aeabi_ddiv>
 8007b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b30:	f004 040f 	and.w	r4, r4, #15
 8007b34:	4e8e      	ldr	r6, [pc, #568]	; (8007d70 <_dtoa_r+0x5a8>)
 8007b36:	b954      	cbnz	r4, 8007b4e <_dtoa_r+0x386>
 8007b38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b40:	f7f8 fea8 	bl	8000894 <__aeabi_ddiv>
 8007b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b48:	e029      	b.n	8007b9e <_dtoa_r+0x3d6>
 8007b4a:	2702      	movs	r7, #2
 8007b4c:	e7f2      	b.n	8007b34 <_dtoa_r+0x36c>
 8007b4e:	07e1      	lsls	r1, r4, #31
 8007b50:	d508      	bpl.n	8007b64 <_dtoa_r+0x39c>
 8007b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b5a:	f7f8 fd71 	bl	8000640 <__aeabi_dmul>
 8007b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b62:	3701      	adds	r7, #1
 8007b64:	1064      	asrs	r4, r4, #1
 8007b66:	3608      	adds	r6, #8
 8007b68:	e7e5      	b.n	8007b36 <_dtoa_r+0x36e>
 8007b6a:	f000 80a5 	beq.w	8007cb8 <_dtoa_r+0x4f0>
 8007b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b72:	f1c9 0400 	rsb	r4, r9, #0
 8007b76:	4b7d      	ldr	r3, [pc, #500]	; (8007d6c <_dtoa_r+0x5a4>)
 8007b78:	f004 020f 	and.w	r2, r4, #15
 8007b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	f7f8 fd5c 	bl	8000640 <__aeabi_dmul>
 8007b88:	2702      	movs	r7, #2
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b90:	4e77      	ldr	r6, [pc, #476]	; (8007d70 <_dtoa_r+0x5a8>)
 8007b92:	1124      	asrs	r4, r4, #4
 8007b94:	2c00      	cmp	r4, #0
 8007b96:	f040 8084 	bne.w	8007ca2 <_dtoa_r+0x4da>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1d2      	bne.n	8007b44 <_dtoa_r+0x37c>
 8007b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 808b 	beq.w	8007cbc <_dtoa_r+0x4f4>
 8007ba6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007baa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4b6f      	ldr	r3, [pc, #444]	; (8007d74 <_dtoa_r+0x5ac>)
 8007bb6:	f7f8 ffb5 	bl	8000b24 <__aeabi_dcmplt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d07e      	beq.n	8007cbc <_dtoa_r+0x4f4>
 8007bbe:	9b02      	ldr	r3, [sp, #8]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d07b      	beq.n	8007cbc <_dtoa_r+0x4f4>
 8007bc4:	f1bb 0f00 	cmp.w	fp, #0
 8007bc8:	dd38      	ble.n	8007c3c <_dtoa_r+0x474>
 8007bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4b69      	ldr	r3, [pc, #420]	; (8007d78 <_dtoa_r+0x5b0>)
 8007bd2:	f7f8 fd35 	bl	8000640 <__aeabi_dmul>
 8007bd6:	465c      	mov	r4, fp
 8007bd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bdc:	f109 38ff 	add.w	r8, r9, #4294967295
 8007be0:	3701      	adds	r7, #1
 8007be2:	4638      	mov	r0, r7
 8007be4:	f7f8 fcc2 	bl	800056c <__aeabi_i2d>
 8007be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bec:	f7f8 fd28 	bl	8000640 <__aeabi_dmul>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4b62      	ldr	r3, [pc, #392]	; (8007d7c <_dtoa_r+0x5b4>)
 8007bf4:	f7f8 fb6e 	bl	80002d4 <__adddf3>
 8007bf8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007bfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c00:	9611      	str	r6, [sp, #68]	; 0x44
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	d15d      	bne.n	8007cc2 <_dtoa_r+0x4fa>
 8007c06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4b5c      	ldr	r3, [pc, #368]	; (8007d80 <_dtoa_r+0x5b8>)
 8007c0e:	f7f8 fb5f 	bl	80002d0 <__aeabi_dsub>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c1a:	4633      	mov	r3, r6
 8007c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c1e:	f7f8 ff9f 	bl	8000b60 <__aeabi_dcmpgt>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f040 829e 	bne.w	8008164 <_dtoa_r+0x99c>
 8007c28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007c32:	f7f8 ff77 	bl	8000b24 <__aeabi_dcmplt>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f040 8292 	bne.w	8008160 <_dtoa_r+0x998>
 8007c3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007c40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f2c0 8153 	blt.w	8007ef2 <_dtoa_r+0x72a>
 8007c4c:	f1b9 0f0e 	cmp.w	r9, #14
 8007c50:	f300 814f 	bgt.w	8007ef2 <_dtoa_r+0x72a>
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <_dtoa_r+0x5a4>)
 8007c56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007c5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007c62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f280 80db 	bge.w	8007e20 <_dtoa_r+0x658>
 8007c6a:	9b02      	ldr	r3, [sp, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f300 80d7 	bgt.w	8007e20 <_dtoa_r+0x658>
 8007c72:	f040 8274 	bne.w	800815e <_dtoa_r+0x996>
 8007c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b40      	ldr	r3, [pc, #256]	; (8007d80 <_dtoa_r+0x5b8>)
 8007c7e:	f7f8 fcdf 	bl	8000640 <__aeabi_dmul>
 8007c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c86:	f7f8 ff61 	bl	8000b4c <__aeabi_dcmpge>
 8007c8a:	9c02      	ldr	r4, [sp, #8]
 8007c8c:	4626      	mov	r6, r4
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f040 824a 	bne.w	8008128 <_dtoa_r+0x960>
 8007c94:	2331      	movs	r3, #49	; 0x31
 8007c96:	9f08      	ldr	r7, [sp, #32]
 8007c98:	f109 0901 	add.w	r9, r9, #1
 8007c9c:	f807 3b01 	strb.w	r3, [r7], #1
 8007ca0:	e246      	b.n	8008130 <_dtoa_r+0x968>
 8007ca2:	07e2      	lsls	r2, r4, #31
 8007ca4:	d505      	bpl.n	8007cb2 <_dtoa_r+0x4ea>
 8007ca6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007caa:	f7f8 fcc9 	bl	8000640 <__aeabi_dmul>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	3701      	adds	r7, #1
 8007cb2:	1064      	asrs	r4, r4, #1
 8007cb4:	3608      	adds	r6, #8
 8007cb6:	e76d      	b.n	8007b94 <_dtoa_r+0x3cc>
 8007cb8:	2702      	movs	r7, #2
 8007cba:	e770      	b.n	8007b9e <_dtoa_r+0x3d6>
 8007cbc:	46c8      	mov	r8, r9
 8007cbe:	9c02      	ldr	r4, [sp, #8]
 8007cc0:	e78f      	b.n	8007be2 <_dtoa_r+0x41a>
 8007cc2:	9908      	ldr	r1, [sp, #32]
 8007cc4:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <_dtoa_r+0x5a4>)
 8007cc6:	4421      	add	r1, r4
 8007cc8:	9112      	str	r1, [sp, #72]	; 0x48
 8007cca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ccc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007cd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	d055      	beq.n	8007d88 <_dtoa_r+0x5c0>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	4929      	ldr	r1, [pc, #164]	; (8007d84 <_dtoa_r+0x5bc>)
 8007ce0:	f7f8 fdd8 	bl	8000894 <__aeabi_ddiv>
 8007ce4:	463b      	mov	r3, r7
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	f7f8 faf2 	bl	80002d0 <__aeabi_dsub>
 8007cec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007cf0:	9f08      	ldr	r7, [sp, #32]
 8007cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cf6:	f7f8 ff53 	bl	8000ba0 <__aeabi_d2iz>
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	f7f8 fc36 	bl	800056c <__aeabi_i2d>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d08:	f7f8 fae2 	bl	80002d0 <__aeabi_dsub>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	3430      	adds	r4, #48	; 0x30
 8007d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d1a:	f807 4b01 	strb.w	r4, [r7], #1
 8007d1e:	f7f8 ff01 	bl	8000b24 <__aeabi_dcmplt>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d174      	bne.n	8007e10 <_dtoa_r+0x648>
 8007d26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	4911      	ldr	r1, [pc, #68]	; (8007d74 <_dtoa_r+0x5ac>)
 8007d2e:	f7f8 facf 	bl	80002d0 <__aeabi_dsub>
 8007d32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d36:	f7f8 fef5 	bl	8000b24 <__aeabi_dcmplt>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f040 80b6 	bne.w	8007eac <_dtoa_r+0x6e4>
 8007d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d42:	429f      	cmp	r7, r3
 8007d44:	f43f af7a 	beq.w	8007c3c <_dtoa_r+0x474>
 8007d48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <_dtoa_r+0x5b0>)
 8007d50:	f7f8 fc76 	bl	8000640 <__aeabi_dmul>
 8007d54:	2200      	movs	r2, #0
 8007d56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <_dtoa_r+0x5b0>)
 8007d60:	f7f8 fc6e 	bl	8000640 <__aeabi_dmul>
 8007d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d68:	e7c3      	b.n	8007cf2 <_dtoa_r+0x52a>
 8007d6a:	bf00      	nop
 8007d6c:	0800d018 	.word	0x0800d018
 8007d70:	0800cff0 	.word	0x0800cff0
 8007d74:	3ff00000 	.word	0x3ff00000
 8007d78:	40240000 	.word	0x40240000
 8007d7c:	401c0000 	.word	0x401c0000
 8007d80:	40140000 	.word	0x40140000
 8007d84:	3fe00000 	.word	0x3fe00000
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 fc58 	bl	8000640 <__aeabi_dmul>
 8007d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d96:	9c08      	ldr	r4, [sp, #32]
 8007d98:	9314      	str	r3, [sp, #80]	; 0x50
 8007d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d9e:	f7f8 feff 	bl	8000ba0 <__aeabi_d2iz>
 8007da2:	9015      	str	r0, [sp, #84]	; 0x54
 8007da4:	f7f8 fbe2 	bl	800056c <__aeabi_i2d>
 8007da8:	4602      	mov	r2, r0
 8007daa:	460b      	mov	r3, r1
 8007dac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007db0:	f7f8 fa8e 	bl	80002d0 <__aeabi_dsub>
 8007db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007db6:	4606      	mov	r6, r0
 8007db8:	3330      	adds	r3, #48	; 0x30
 8007dba:	f804 3b01 	strb.w	r3, [r4], #1
 8007dbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	d124      	bne.n	8007e14 <_dtoa_r+0x64c>
 8007dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dce:	4bb3      	ldr	r3, [pc, #716]	; (800809c <_dtoa_r+0x8d4>)
 8007dd0:	f7f8 fa80 	bl	80002d4 <__adddf3>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fec0 	bl	8000b60 <__aeabi_dcmpgt>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d162      	bne.n	8007eaa <_dtoa_r+0x6e2>
 8007de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007de8:	2000      	movs	r0, #0
 8007dea:	49ac      	ldr	r1, [pc, #688]	; (800809c <_dtoa_r+0x8d4>)
 8007dec:	f7f8 fa70 	bl	80002d0 <__aeabi_dsub>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4630      	mov	r0, r6
 8007df6:	4639      	mov	r1, r7
 8007df8:	f7f8 fe94 	bl	8000b24 <__aeabi_dcmplt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	f43f af1d 	beq.w	8007c3c <_dtoa_r+0x474>
 8007e02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e04:	1e7b      	subs	r3, r7, #1
 8007e06:	9314      	str	r3, [sp, #80]	; 0x50
 8007e08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007e0c:	2b30      	cmp	r3, #48	; 0x30
 8007e0e:	d0f8      	beq.n	8007e02 <_dtoa_r+0x63a>
 8007e10:	46c1      	mov	r9, r8
 8007e12:	e03a      	b.n	8007e8a <_dtoa_r+0x6c2>
 8007e14:	4ba2      	ldr	r3, [pc, #648]	; (80080a0 <_dtoa_r+0x8d8>)
 8007e16:	f7f8 fc13 	bl	8000640 <__aeabi_dmul>
 8007e1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e1e:	e7bc      	b.n	8007d9a <_dtoa_r+0x5d2>
 8007e20:	9f08      	ldr	r7, [sp, #32]
 8007e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e2a:	f7f8 fd33 	bl	8000894 <__aeabi_ddiv>
 8007e2e:	f7f8 feb7 	bl	8000ba0 <__aeabi_d2iz>
 8007e32:	4604      	mov	r4, r0
 8007e34:	f7f8 fb9a 	bl	800056c <__aeabi_i2d>
 8007e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e3c:	f7f8 fc00 	bl	8000640 <__aeabi_dmul>
 8007e40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007e44:	460b      	mov	r3, r1
 8007e46:	4602      	mov	r2, r0
 8007e48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e4c:	f7f8 fa40 	bl	80002d0 <__aeabi_dsub>
 8007e50:	f807 6b01 	strb.w	r6, [r7], #1
 8007e54:	9e08      	ldr	r6, [sp, #32]
 8007e56:	9b02      	ldr	r3, [sp, #8]
 8007e58:	1bbe      	subs	r6, r7, r6
 8007e5a:	42b3      	cmp	r3, r6
 8007e5c:	d13a      	bne.n	8007ed4 <_dtoa_r+0x70c>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	460b      	mov	r3, r1
 8007e62:	f7f8 fa37 	bl	80002d4 <__adddf3>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e72:	f7f8 fe75 	bl	8000b60 <__aeabi_dcmpgt>
 8007e76:	bb58      	cbnz	r0, 8007ed0 <_dtoa_r+0x708>
 8007e78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e80:	f7f8 fe46 	bl	8000b10 <__aeabi_dcmpeq>
 8007e84:	b108      	cbz	r0, 8007e8a <_dtoa_r+0x6c2>
 8007e86:	07e1      	lsls	r1, r4, #31
 8007e88:	d422      	bmi.n	8007ed0 <_dtoa_r+0x708>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	4651      	mov	r1, sl
 8007e8e:	f000 fe69 	bl	8008b64 <_Bfree>
 8007e92:	2300      	movs	r3, #0
 8007e94:	703b      	strb	r3, [r7, #0]
 8007e96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007e98:	f109 0001 	add.w	r0, r9, #1
 8007e9c:	6018      	str	r0, [r3, #0]
 8007e9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f43f acdf 	beq.w	8007864 <_dtoa_r+0x9c>
 8007ea6:	601f      	str	r7, [r3, #0]
 8007ea8:	e4dc      	b.n	8007864 <_dtoa_r+0x9c>
 8007eaa:	4627      	mov	r7, r4
 8007eac:	463b      	mov	r3, r7
 8007eae:	461f      	mov	r7, r3
 8007eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eb4:	2a39      	cmp	r2, #57	; 0x39
 8007eb6:	d107      	bne.n	8007ec8 <_dtoa_r+0x700>
 8007eb8:	9a08      	ldr	r2, [sp, #32]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d1f7      	bne.n	8007eae <_dtoa_r+0x6e6>
 8007ebe:	2230      	movs	r2, #48	; 0x30
 8007ec0:	9908      	ldr	r1, [sp, #32]
 8007ec2:	f108 0801 	add.w	r8, r8, #1
 8007ec6:	700a      	strb	r2, [r1, #0]
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	3201      	adds	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
 8007ece:	e79f      	b.n	8007e10 <_dtoa_r+0x648>
 8007ed0:	46c8      	mov	r8, r9
 8007ed2:	e7eb      	b.n	8007eac <_dtoa_r+0x6e4>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4b72      	ldr	r3, [pc, #456]	; (80080a0 <_dtoa_r+0x8d8>)
 8007ed8:	f7f8 fbb2 	bl	8000640 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f7f8 fe12 	bl	8000b10 <__aeabi_dcmpeq>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d098      	beq.n	8007e22 <_dtoa_r+0x65a>
 8007ef0:	e7cb      	b.n	8007e8a <_dtoa_r+0x6c2>
 8007ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	f000 80cd 	beq.w	8008094 <_dtoa_r+0x8cc>
 8007efa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007efc:	2a01      	cmp	r2, #1
 8007efe:	f300 80af 	bgt.w	8008060 <_dtoa_r+0x898>
 8007f02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	f000 80a7 	beq.w	8008058 <_dtoa_r+0x890>
 8007f0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f10:	9f06      	ldr	r7, [sp, #24]
 8007f12:	9a06      	ldr	r2, [sp, #24]
 8007f14:	2101      	movs	r1, #1
 8007f16:	441a      	add	r2, r3
 8007f18:	9206      	str	r2, [sp, #24]
 8007f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	441a      	add	r2, r3
 8007f20:	9209      	str	r2, [sp, #36]	; 0x24
 8007f22:	f000 ff23 	bl	8008d6c <__i2b>
 8007f26:	4606      	mov	r6, r0
 8007f28:	2f00      	cmp	r7, #0
 8007f2a:	dd0c      	ble.n	8007f46 <_dtoa_r+0x77e>
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd09      	ble.n	8007f46 <_dtoa_r+0x77e>
 8007f32:	42bb      	cmp	r3, r7
 8007f34:	bfa8      	it	ge
 8007f36:	463b      	movge	r3, r7
 8007f38:	9a06      	ldr	r2, [sp, #24]
 8007f3a:	1aff      	subs	r7, r7, r3
 8007f3c:	1ad2      	subs	r2, r2, r3
 8007f3e:	9206      	str	r2, [sp, #24]
 8007f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	9309      	str	r3, [sp, #36]	; 0x24
 8007f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f48:	b1f3      	cbz	r3, 8007f88 <_dtoa_r+0x7c0>
 8007f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80a9 	beq.w	80080a4 <_dtoa_r+0x8dc>
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	dd10      	ble.n	8007f78 <_dtoa_r+0x7b0>
 8007f56:	4631      	mov	r1, r6
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 ffc0 	bl	8008ee0 <__pow5mult>
 8007f60:	4652      	mov	r2, sl
 8007f62:	4601      	mov	r1, r0
 8007f64:	4606      	mov	r6, r0
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 ff16 	bl	8008d98 <__multiply>
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4651      	mov	r1, sl
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 fdf7 	bl	8008b64 <_Bfree>
 8007f76:	46c2      	mov	sl, r8
 8007f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f7a:	1b1a      	subs	r2, r3, r4
 8007f7c:	d004      	beq.n	8007f88 <_dtoa_r+0x7c0>
 8007f7e:	4651      	mov	r1, sl
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 ffad 	bl	8008ee0 <__pow5mult>
 8007f86:	4682      	mov	sl, r0
 8007f88:	2101      	movs	r1, #1
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f000 feee 	bl	8008d6c <__i2b>
 8007f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f92:	4604      	mov	r4, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f340 8087 	ble.w	80080a8 <_dtoa_r+0x8e0>
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 ff9e 	bl	8008ee0 <__pow5mult>
 8007fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	f340 8080 	ble.w	80080ae <_dtoa_r+0x8e6>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fb8:	6918      	ldr	r0, [r3, #16]
 8007fba:	f000 fe89 	bl	8008cd0 <__hi0bits>
 8007fbe:	f1c0 0020 	rsb	r0, r0, #32
 8007fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc4:	4418      	add	r0, r3
 8007fc6:	f010 001f 	ands.w	r0, r0, #31
 8007fca:	f000 8092 	beq.w	80080f2 <_dtoa_r+0x92a>
 8007fce:	f1c0 0320 	rsb	r3, r0, #32
 8007fd2:	2b04      	cmp	r3, #4
 8007fd4:	f340 808a 	ble.w	80080ec <_dtoa_r+0x924>
 8007fd8:	f1c0 001c 	rsb	r0, r0, #28
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	4407      	add	r7, r0
 8007fe0:	4403      	add	r3, r0
 8007fe2:	9306      	str	r3, [sp, #24]
 8007fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe6:	4403      	add	r3, r0
 8007fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dd05      	ble.n	8007ffc <_dtoa_r+0x834>
 8007ff0:	4651      	mov	r1, sl
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f000 ffcd 	bl	8008f94 <__lshift>
 8007ffa:	4682      	mov	sl, r0
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dd05      	ble.n	800800e <_dtoa_r+0x846>
 8008002:	4621      	mov	r1, r4
 8008004:	461a      	mov	r2, r3
 8008006:	4628      	mov	r0, r5
 8008008:	f000 ffc4 	bl	8008f94 <__lshift>
 800800c:	4604      	mov	r4, r0
 800800e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d070      	beq.n	80080f6 <_dtoa_r+0x92e>
 8008014:	4621      	mov	r1, r4
 8008016:	4650      	mov	r0, sl
 8008018:	f001 f828 	bl	800906c <__mcmp>
 800801c:	2800      	cmp	r0, #0
 800801e:	da6a      	bge.n	80080f6 <_dtoa_r+0x92e>
 8008020:	2300      	movs	r3, #0
 8008022:	4651      	mov	r1, sl
 8008024:	220a      	movs	r2, #10
 8008026:	4628      	mov	r0, r5
 8008028:	f000 fdbe 	bl	8008ba8 <__multadd>
 800802c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802e:	4682      	mov	sl, r0
 8008030:	f109 39ff 	add.w	r9, r9, #4294967295
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8193 	beq.w	8008360 <_dtoa_r+0xb98>
 800803a:	4631      	mov	r1, r6
 800803c:	2300      	movs	r3, #0
 800803e:	220a      	movs	r2, #10
 8008040:	4628      	mov	r0, r5
 8008042:	f000 fdb1 	bl	8008ba8 <__multadd>
 8008046:	f1bb 0f00 	cmp.w	fp, #0
 800804a:	4606      	mov	r6, r0
 800804c:	f300 8093 	bgt.w	8008176 <_dtoa_r+0x9ae>
 8008050:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008052:	2b02      	cmp	r3, #2
 8008054:	dc57      	bgt.n	8008106 <_dtoa_r+0x93e>
 8008056:	e08e      	b.n	8008176 <_dtoa_r+0x9ae>
 8008058:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800805a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800805e:	e756      	b.n	8007f0e <_dtoa_r+0x746>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	1e5c      	subs	r4, r3, #1
 8008064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008066:	42a3      	cmp	r3, r4
 8008068:	bfb7      	itett	lt
 800806a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800806c:	1b1c      	subge	r4, r3, r4
 800806e:	1ae2      	sublt	r2, r4, r3
 8008070:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008072:	bfbe      	ittt	lt
 8008074:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008076:	189b      	addlt	r3, r3, r2
 8008078:	930e      	strlt	r3, [sp, #56]	; 0x38
 800807a:	9b02      	ldr	r3, [sp, #8]
 800807c:	bfb8      	it	lt
 800807e:	2400      	movlt	r4, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	bfbb      	ittet	lt
 8008084:	9b06      	ldrlt	r3, [sp, #24]
 8008086:	9a02      	ldrlt	r2, [sp, #8]
 8008088:	9f06      	ldrge	r7, [sp, #24]
 800808a:	1a9f      	sublt	r7, r3, r2
 800808c:	bfac      	ite	ge
 800808e:	9b02      	ldrge	r3, [sp, #8]
 8008090:	2300      	movlt	r3, #0
 8008092:	e73e      	b.n	8007f12 <_dtoa_r+0x74a>
 8008094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008096:	9f06      	ldr	r7, [sp, #24]
 8008098:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800809a:	e745      	b.n	8007f28 <_dtoa_r+0x760>
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	40240000 	.word	0x40240000
 80080a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a6:	e76a      	b.n	8007f7e <_dtoa_r+0x7b6>
 80080a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	dc19      	bgt.n	80080e2 <_dtoa_r+0x91a>
 80080ae:	9b04      	ldr	r3, [sp, #16]
 80080b0:	b9bb      	cbnz	r3, 80080e2 <_dtoa_r+0x91a>
 80080b2:	9b05      	ldr	r3, [sp, #20]
 80080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080b8:	b99b      	cbnz	r3, 80080e2 <_dtoa_r+0x91a>
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080c0:	0d1b      	lsrs	r3, r3, #20
 80080c2:	051b      	lsls	r3, r3, #20
 80080c4:	b183      	cbz	r3, 80080e8 <_dtoa_r+0x920>
 80080c6:	f04f 0801 	mov.w	r8, #1
 80080ca:	9b06      	ldr	r3, [sp, #24]
 80080cc:	3301      	adds	r3, #1
 80080ce:	9306      	str	r3, [sp, #24]
 80080d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d2:	3301      	adds	r3, #1
 80080d4:	9309      	str	r3, [sp, #36]	; 0x24
 80080d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f47f af6a 	bne.w	8007fb2 <_dtoa_r+0x7ea>
 80080de:	2001      	movs	r0, #1
 80080e0:	e76f      	b.n	8007fc2 <_dtoa_r+0x7fa>
 80080e2:	f04f 0800 	mov.w	r8, #0
 80080e6:	e7f6      	b.n	80080d6 <_dtoa_r+0x90e>
 80080e8:	4698      	mov	r8, r3
 80080ea:	e7f4      	b.n	80080d6 <_dtoa_r+0x90e>
 80080ec:	f43f af7d 	beq.w	8007fea <_dtoa_r+0x822>
 80080f0:	4618      	mov	r0, r3
 80080f2:	301c      	adds	r0, #28
 80080f4:	e772      	b.n	8007fdc <_dtoa_r+0x814>
 80080f6:	9b02      	ldr	r3, [sp, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dc36      	bgt.n	800816a <_dtoa_r+0x9a2>
 80080fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080fe:	2b02      	cmp	r3, #2
 8008100:	dd33      	ble.n	800816a <_dtoa_r+0x9a2>
 8008102:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008106:	f1bb 0f00 	cmp.w	fp, #0
 800810a:	d10d      	bne.n	8008128 <_dtoa_r+0x960>
 800810c:	4621      	mov	r1, r4
 800810e:	465b      	mov	r3, fp
 8008110:	2205      	movs	r2, #5
 8008112:	4628      	mov	r0, r5
 8008114:	f000 fd48 	bl	8008ba8 <__multadd>
 8008118:	4601      	mov	r1, r0
 800811a:	4604      	mov	r4, r0
 800811c:	4650      	mov	r0, sl
 800811e:	f000 ffa5 	bl	800906c <__mcmp>
 8008122:	2800      	cmp	r0, #0
 8008124:	f73f adb6 	bgt.w	8007c94 <_dtoa_r+0x4cc>
 8008128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800812a:	9f08      	ldr	r7, [sp, #32]
 800812c:	ea6f 0903 	mvn.w	r9, r3
 8008130:	f04f 0800 	mov.w	r8, #0
 8008134:	4621      	mov	r1, r4
 8008136:	4628      	mov	r0, r5
 8008138:	f000 fd14 	bl	8008b64 <_Bfree>
 800813c:	2e00      	cmp	r6, #0
 800813e:	f43f aea4 	beq.w	8007e8a <_dtoa_r+0x6c2>
 8008142:	f1b8 0f00 	cmp.w	r8, #0
 8008146:	d005      	beq.n	8008154 <_dtoa_r+0x98c>
 8008148:	45b0      	cmp	r8, r6
 800814a:	d003      	beq.n	8008154 <_dtoa_r+0x98c>
 800814c:	4641      	mov	r1, r8
 800814e:	4628      	mov	r0, r5
 8008150:	f000 fd08 	bl	8008b64 <_Bfree>
 8008154:	4631      	mov	r1, r6
 8008156:	4628      	mov	r0, r5
 8008158:	f000 fd04 	bl	8008b64 <_Bfree>
 800815c:	e695      	b.n	8007e8a <_dtoa_r+0x6c2>
 800815e:	2400      	movs	r4, #0
 8008160:	4626      	mov	r6, r4
 8008162:	e7e1      	b.n	8008128 <_dtoa_r+0x960>
 8008164:	46c1      	mov	r9, r8
 8008166:	4626      	mov	r6, r4
 8008168:	e594      	b.n	8007c94 <_dtoa_r+0x4cc>
 800816a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 80fc 	beq.w	800836e <_dtoa_r+0xba6>
 8008176:	2f00      	cmp	r7, #0
 8008178:	dd05      	ble.n	8008186 <_dtoa_r+0x9be>
 800817a:	4631      	mov	r1, r6
 800817c:	463a      	mov	r2, r7
 800817e:	4628      	mov	r0, r5
 8008180:	f000 ff08 	bl	8008f94 <__lshift>
 8008184:	4606      	mov	r6, r0
 8008186:	f1b8 0f00 	cmp.w	r8, #0
 800818a:	d05c      	beq.n	8008246 <_dtoa_r+0xa7e>
 800818c:	4628      	mov	r0, r5
 800818e:	6871      	ldr	r1, [r6, #4]
 8008190:	f000 fca8 	bl	8008ae4 <_Balloc>
 8008194:	4607      	mov	r7, r0
 8008196:	b928      	cbnz	r0, 80081a4 <_dtoa_r+0x9dc>
 8008198:	4602      	mov	r2, r0
 800819a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800819e:	4b7e      	ldr	r3, [pc, #504]	; (8008398 <_dtoa_r+0xbd0>)
 80081a0:	f7ff bb26 	b.w	80077f0 <_dtoa_r+0x28>
 80081a4:	6932      	ldr	r2, [r6, #16]
 80081a6:	f106 010c 	add.w	r1, r6, #12
 80081aa:	3202      	adds	r2, #2
 80081ac:	0092      	lsls	r2, r2, #2
 80081ae:	300c      	adds	r0, #12
 80081b0:	f000 fc8a 	bl	8008ac8 <memcpy>
 80081b4:	2201      	movs	r2, #1
 80081b6:	4639      	mov	r1, r7
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 feeb 	bl	8008f94 <__lshift>
 80081be:	46b0      	mov	r8, r6
 80081c0:	4606      	mov	r6, r0
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	3301      	adds	r3, #1
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	9b08      	ldr	r3, [sp, #32]
 80081ca:	445b      	add	r3, fp
 80081cc:	930a      	str	r3, [sp, #40]	; 0x28
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	9309      	str	r3, [sp, #36]	; 0x24
 80081d6:	9b02      	ldr	r3, [sp, #8]
 80081d8:	4621      	mov	r1, r4
 80081da:	4650      	mov	r0, sl
 80081dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80081e0:	f7ff fa64 	bl	80076ac <quorem>
 80081e4:	4603      	mov	r3, r0
 80081e6:	4641      	mov	r1, r8
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	9004      	str	r0, [sp, #16]
 80081ec:	4650      	mov	r0, sl
 80081ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f0:	f000 ff3c 	bl	800906c <__mcmp>
 80081f4:	4632      	mov	r2, r6
 80081f6:	9006      	str	r0, [sp, #24]
 80081f8:	4621      	mov	r1, r4
 80081fa:	4628      	mov	r0, r5
 80081fc:	f000 ff52 	bl	80090a4 <__mdiff>
 8008200:	68c2      	ldr	r2, [r0, #12]
 8008202:	4607      	mov	r7, r0
 8008204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008206:	bb02      	cbnz	r2, 800824a <_dtoa_r+0xa82>
 8008208:	4601      	mov	r1, r0
 800820a:	4650      	mov	r0, sl
 800820c:	f000 ff2e 	bl	800906c <__mcmp>
 8008210:	4602      	mov	r2, r0
 8008212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008214:	4639      	mov	r1, r7
 8008216:	4628      	mov	r0, r5
 8008218:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800821c:	f000 fca2 	bl	8008b64 <_Bfree>
 8008220:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008224:	9f02      	ldr	r7, [sp, #8]
 8008226:	ea43 0102 	orr.w	r1, r3, r2
 800822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822c:	430b      	orrs	r3, r1
 800822e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008230:	d10d      	bne.n	800824e <_dtoa_r+0xa86>
 8008232:	2b39      	cmp	r3, #57	; 0x39
 8008234:	d027      	beq.n	8008286 <_dtoa_r+0xabe>
 8008236:	9a06      	ldr	r2, [sp, #24]
 8008238:	2a00      	cmp	r2, #0
 800823a:	dd01      	ble.n	8008240 <_dtoa_r+0xa78>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	3331      	adds	r3, #49	; 0x31
 8008240:	f88b 3000 	strb.w	r3, [fp]
 8008244:	e776      	b.n	8008134 <_dtoa_r+0x96c>
 8008246:	4630      	mov	r0, r6
 8008248:	e7b9      	b.n	80081be <_dtoa_r+0x9f6>
 800824a:	2201      	movs	r2, #1
 800824c:	e7e2      	b.n	8008214 <_dtoa_r+0xa4c>
 800824e:	9906      	ldr	r1, [sp, #24]
 8008250:	2900      	cmp	r1, #0
 8008252:	db04      	blt.n	800825e <_dtoa_r+0xa96>
 8008254:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008256:	4301      	orrs	r1, r0
 8008258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800825a:	4301      	orrs	r1, r0
 800825c:	d120      	bne.n	80082a0 <_dtoa_r+0xad8>
 800825e:	2a00      	cmp	r2, #0
 8008260:	ddee      	ble.n	8008240 <_dtoa_r+0xa78>
 8008262:	4651      	mov	r1, sl
 8008264:	2201      	movs	r2, #1
 8008266:	4628      	mov	r0, r5
 8008268:	9302      	str	r3, [sp, #8]
 800826a:	f000 fe93 	bl	8008f94 <__lshift>
 800826e:	4621      	mov	r1, r4
 8008270:	4682      	mov	sl, r0
 8008272:	f000 fefb 	bl	800906c <__mcmp>
 8008276:	2800      	cmp	r0, #0
 8008278:	9b02      	ldr	r3, [sp, #8]
 800827a:	dc02      	bgt.n	8008282 <_dtoa_r+0xaba>
 800827c:	d1e0      	bne.n	8008240 <_dtoa_r+0xa78>
 800827e:	07da      	lsls	r2, r3, #31
 8008280:	d5de      	bpl.n	8008240 <_dtoa_r+0xa78>
 8008282:	2b39      	cmp	r3, #57	; 0x39
 8008284:	d1da      	bne.n	800823c <_dtoa_r+0xa74>
 8008286:	2339      	movs	r3, #57	; 0x39
 8008288:	f88b 3000 	strb.w	r3, [fp]
 800828c:	463b      	mov	r3, r7
 800828e:	461f      	mov	r7, r3
 8008290:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008294:	3b01      	subs	r3, #1
 8008296:	2a39      	cmp	r2, #57	; 0x39
 8008298:	d050      	beq.n	800833c <_dtoa_r+0xb74>
 800829a:	3201      	adds	r2, #1
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e749      	b.n	8008134 <_dtoa_r+0x96c>
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	dd03      	ble.n	80082ac <_dtoa_r+0xae4>
 80082a4:	2b39      	cmp	r3, #57	; 0x39
 80082a6:	d0ee      	beq.n	8008286 <_dtoa_r+0xabe>
 80082a8:	3301      	adds	r3, #1
 80082aa:	e7c9      	b.n	8008240 <_dtoa_r+0xa78>
 80082ac:	9a02      	ldr	r2, [sp, #8]
 80082ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80082b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082b4:	428a      	cmp	r2, r1
 80082b6:	d02a      	beq.n	800830e <_dtoa_r+0xb46>
 80082b8:	4651      	mov	r1, sl
 80082ba:	2300      	movs	r3, #0
 80082bc:	220a      	movs	r2, #10
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 fc72 	bl	8008ba8 <__multadd>
 80082c4:	45b0      	cmp	r8, r6
 80082c6:	4682      	mov	sl, r0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	f04f 020a 	mov.w	r2, #10
 80082d0:	4641      	mov	r1, r8
 80082d2:	4628      	mov	r0, r5
 80082d4:	d107      	bne.n	80082e6 <_dtoa_r+0xb1e>
 80082d6:	f000 fc67 	bl	8008ba8 <__multadd>
 80082da:	4680      	mov	r8, r0
 80082dc:	4606      	mov	r6, r0
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	3301      	adds	r3, #1
 80082e2:	9302      	str	r3, [sp, #8]
 80082e4:	e777      	b.n	80081d6 <_dtoa_r+0xa0e>
 80082e6:	f000 fc5f 	bl	8008ba8 <__multadd>
 80082ea:	4631      	mov	r1, r6
 80082ec:	4680      	mov	r8, r0
 80082ee:	2300      	movs	r3, #0
 80082f0:	220a      	movs	r2, #10
 80082f2:	4628      	mov	r0, r5
 80082f4:	f000 fc58 	bl	8008ba8 <__multadd>
 80082f8:	4606      	mov	r6, r0
 80082fa:	e7f0      	b.n	80082de <_dtoa_r+0xb16>
 80082fc:	f1bb 0f00 	cmp.w	fp, #0
 8008300:	bfcc      	ite	gt
 8008302:	465f      	movgt	r7, fp
 8008304:	2701      	movle	r7, #1
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	9a08      	ldr	r2, [sp, #32]
 800830c:	4417      	add	r7, r2
 800830e:	4651      	mov	r1, sl
 8008310:	2201      	movs	r2, #1
 8008312:	4628      	mov	r0, r5
 8008314:	9302      	str	r3, [sp, #8]
 8008316:	f000 fe3d 	bl	8008f94 <__lshift>
 800831a:	4621      	mov	r1, r4
 800831c:	4682      	mov	sl, r0
 800831e:	f000 fea5 	bl	800906c <__mcmp>
 8008322:	2800      	cmp	r0, #0
 8008324:	dcb2      	bgt.n	800828c <_dtoa_r+0xac4>
 8008326:	d102      	bne.n	800832e <_dtoa_r+0xb66>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	07db      	lsls	r3, r3, #31
 800832c:	d4ae      	bmi.n	800828c <_dtoa_r+0xac4>
 800832e:	463b      	mov	r3, r7
 8008330:	461f      	mov	r7, r3
 8008332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008336:	2a30      	cmp	r2, #48	; 0x30
 8008338:	d0fa      	beq.n	8008330 <_dtoa_r+0xb68>
 800833a:	e6fb      	b.n	8008134 <_dtoa_r+0x96c>
 800833c:	9a08      	ldr	r2, [sp, #32]
 800833e:	429a      	cmp	r2, r3
 8008340:	d1a5      	bne.n	800828e <_dtoa_r+0xac6>
 8008342:	2331      	movs	r3, #49	; 0x31
 8008344:	f109 0901 	add.w	r9, r9, #1
 8008348:	7013      	strb	r3, [r2, #0]
 800834a:	e6f3      	b.n	8008134 <_dtoa_r+0x96c>
 800834c:	4b13      	ldr	r3, [pc, #76]	; (800839c <_dtoa_r+0xbd4>)
 800834e:	f7ff baa7 	b.w	80078a0 <_dtoa_r+0xd8>
 8008352:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008354:	2b00      	cmp	r3, #0
 8008356:	f47f aa80 	bne.w	800785a <_dtoa_r+0x92>
 800835a:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <_dtoa_r+0xbd8>)
 800835c:	f7ff baa0 	b.w	80078a0 <_dtoa_r+0xd8>
 8008360:	f1bb 0f00 	cmp.w	fp, #0
 8008364:	dc03      	bgt.n	800836e <_dtoa_r+0xba6>
 8008366:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008368:	2b02      	cmp	r3, #2
 800836a:	f73f aecc 	bgt.w	8008106 <_dtoa_r+0x93e>
 800836e:	9f08      	ldr	r7, [sp, #32]
 8008370:	4621      	mov	r1, r4
 8008372:	4650      	mov	r0, sl
 8008374:	f7ff f99a 	bl	80076ac <quorem>
 8008378:	9a08      	ldr	r2, [sp, #32]
 800837a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800837e:	f807 3b01 	strb.w	r3, [r7], #1
 8008382:	1aba      	subs	r2, r7, r2
 8008384:	4593      	cmp	fp, r2
 8008386:	ddb9      	ble.n	80082fc <_dtoa_r+0xb34>
 8008388:	4651      	mov	r1, sl
 800838a:	2300      	movs	r3, #0
 800838c:	220a      	movs	r2, #10
 800838e:	4628      	mov	r0, r5
 8008390:	f000 fc0a 	bl	8008ba8 <__multadd>
 8008394:	4682      	mov	sl, r0
 8008396:	e7eb      	b.n	8008370 <_dtoa_r+0xba8>
 8008398:	0800cefc 	.word	0x0800cefc
 800839c:	0800ccf8 	.word	0x0800ccf8
 80083a0:	0800ce79 	.word	0x0800ce79

080083a4 <rshift>:
 80083a4:	6903      	ldr	r3, [r0, #16]
 80083a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80083ae:	f100 0414 	add.w	r4, r0, #20
 80083b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80083b6:	dd46      	ble.n	8008446 <rshift+0xa2>
 80083b8:	f011 011f 	ands.w	r1, r1, #31
 80083bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80083c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80083c4:	d10c      	bne.n	80083e0 <rshift+0x3c>
 80083c6:	4629      	mov	r1, r5
 80083c8:	f100 0710 	add.w	r7, r0, #16
 80083cc:	42b1      	cmp	r1, r6
 80083ce:	d335      	bcc.n	800843c <rshift+0x98>
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	1eea      	subs	r2, r5, #3
 80083d6:	4296      	cmp	r6, r2
 80083d8:	bf38      	it	cc
 80083da:	2300      	movcc	r3, #0
 80083dc:	4423      	add	r3, r4
 80083de:	e015      	b.n	800840c <rshift+0x68>
 80083e0:	46a1      	mov	r9, r4
 80083e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083e6:	f1c1 0820 	rsb	r8, r1, #32
 80083ea:	40cf      	lsrs	r7, r1
 80083ec:	f105 0e04 	add.w	lr, r5, #4
 80083f0:	4576      	cmp	r6, lr
 80083f2:	46f4      	mov	ip, lr
 80083f4:	d816      	bhi.n	8008424 <rshift+0x80>
 80083f6:	1a9b      	subs	r3, r3, r2
 80083f8:	009a      	lsls	r2, r3, #2
 80083fa:	3a04      	subs	r2, #4
 80083fc:	3501      	adds	r5, #1
 80083fe:	42ae      	cmp	r6, r5
 8008400:	bf38      	it	cc
 8008402:	2200      	movcc	r2, #0
 8008404:	18a3      	adds	r3, r4, r2
 8008406:	50a7      	str	r7, [r4, r2]
 8008408:	b107      	cbz	r7, 800840c <rshift+0x68>
 800840a:	3304      	adds	r3, #4
 800840c:	42a3      	cmp	r3, r4
 800840e:	eba3 0204 	sub.w	r2, r3, r4
 8008412:	bf08      	it	eq
 8008414:	2300      	moveq	r3, #0
 8008416:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800841a:	6102      	str	r2, [r0, #16]
 800841c:	bf08      	it	eq
 800841e:	6143      	streq	r3, [r0, #20]
 8008420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008424:	f8dc c000 	ldr.w	ip, [ip]
 8008428:	fa0c fc08 	lsl.w	ip, ip, r8
 800842c:	ea4c 0707 	orr.w	r7, ip, r7
 8008430:	f849 7b04 	str.w	r7, [r9], #4
 8008434:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008438:	40cf      	lsrs	r7, r1
 800843a:	e7d9      	b.n	80083f0 <rshift+0x4c>
 800843c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008440:	f847 cf04 	str.w	ip, [r7, #4]!
 8008444:	e7c2      	b.n	80083cc <rshift+0x28>
 8008446:	4623      	mov	r3, r4
 8008448:	e7e0      	b.n	800840c <rshift+0x68>

0800844a <__hexdig_fun>:
 800844a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800844e:	2b09      	cmp	r3, #9
 8008450:	d802      	bhi.n	8008458 <__hexdig_fun+0xe>
 8008452:	3820      	subs	r0, #32
 8008454:	b2c0      	uxtb	r0, r0
 8008456:	4770      	bx	lr
 8008458:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800845c:	2b05      	cmp	r3, #5
 800845e:	d801      	bhi.n	8008464 <__hexdig_fun+0x1a>
 8008460:	3847      	subs	r0, #71	; 0x47
 8008462:	e7f7      	b.n	8008454 <__hexdig_fun+0xa>
 8008464:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008468:	2b05      	cmp	r3, #5
 800846a:	d801      	bhi.n	8008470 <__hexdig_fun+0x26>
 800846c:	3827      	subs	r0, #39	; 0x27
 800846e:	e7f1      	b.n	8008454 <__hexdig_fun+0xa>
 8008470:	2000      	movs	r0, #0
 8008472:	4770      	bx	lr

08008474 <__gethex>:
 8008474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	b08b      	sub	sp, #44	; 0x2c
 800847a:	9306      	str	r3, [sp, #24]
 800847c:	4bb9      	ldr	r3, [pc, #740]	; (8008764 <__gethex+0x2f0>)
 800847e:	9002      	str	r0, [sp, #8]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	468b      	mov	fp, r1
 8008484:	4618      	mov	r0, r3
 8008486:	4690      	mov	r8, r2
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	f7f7 fe61 	bl	8000150 <strlen>
 800848e:	4682      	mov	sl, r0
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	f8db 2000 	ldr.w	r2, [fp]
 8008496:	4403      	add	r3, r0
 8008498:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800849c:	9307      	str	r3, [sp, #28]
 800849e:	1c93      	adds	r3, r2, #2
 80084a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80084a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80084a8:	32fe      	adds	r2, #254	; 0xfe
 80084aa:	18d1      	adds	r1, r2, r3
 80084ac:	461f      	mov	r7, r3
 80084ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80084b2:	9101      	str	r1, [sp, #4]
 80084b4:	2830      	cmp	r0, #48	; 0x30
 80084b6:	d0f8      	beq.n	80084aa <__gethex+0x36>
 80084b8:	f7ff ffc7 	bl	800844a <__hexdig_fun>
 80084bc:	4604      	mov	r4, r0
 80084be:	2800      	cmp	r0, #0
 80084c0:	d13a      	bne.n	8008538 <__gethex+0xc4>
 80084c2:	4652      	mov	r2, sl
 80084c4:	4638      	mov	r0, r7
 80084c6:	9903      	ldr	r1, [sp, #12]
 80084c8:	f001 f9ea 	bl	80098a0 <strncmp>
 80084cc:	4605      	mov	r5, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d166      	bne.n	80085a0 <__gethex+0x12c>
 80084d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80084d6:	eb07 060a 	add.w	r6, r7, sl
 80084da:	f7ff ffb6 	bl	800844a <__hexdig_fun>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d060      	beq.n	80085a4 <__gethex+0x130>
 80084e2:	4633      	mov	r3, r6
 80084e4:	7818      	ldrb	r0, [r3, #0]
 80084e6:	461f      	mov	r7, r3
 80084e8:	2830      	cmp	r0, #48	; 0x30
 80084ea:	f103 0301 	add.w	r3, r3, #1
 80084ee:	d0f9      	beq.n	80084e4 <__gethex+0x70>
 80084f0:	f7ff ffab 	bl	800844a <__hexdig_fun>
 80084f4:	2301      	movs	r3, #1
 80084f6:	fab0 f480 	clz	r4, r0
 80084fa:	4635      	mov	r5, r6
 80084fc:	0964      	lsrs	r4, r4, #5
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	463a      	mov	r2, r7
 8008502:	4616      	mov	r6, r2
 8008504:	7830      	ldrb	r0, [r6, #0]
 8008506:	3201      	adds	r2, #1
 8008508:	f7ff ff9f 	bl	800844a <__hexdig_fun>
 800850c:	2800      	cmp	r0, #0
 800850e:	d1f8      	bne.n	8008502 <__gethex+0x8e>
 8008510:	4652      	mov	r2, sl
 8008512:	4630      	mov	r0, r6
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	f001 f9c3 	bl	80098a0 <strncmp>
 800851a:	b980      	cbnz	r0, 800853e <__gethex+0xca>
 800851c:	b94d      	cbnz	r5, 8008532 <__gethex+0xbe>
 800851e:	eb06 050a 	add.w	r5, r6, sl
 8008522:	462a      	mov	r2, r5
 8008524:	4616      	mov	r6, r2
 8008526:	7830      	ldrb	r0, [r6, #0]
 8008528:	3201      	adds	r2, #1
 800852a:	f7ff ff8e 	bl	800844a <__hexdig_fun>
 800852e:	2800      	cmp	r0, #0
 8008530:	d1f8      	bne.n	8008524 <__gethex+0xb0>
 8008532:	1bad      	subs	r5, r5, r6
 8008534:	00ad      	lsls	r5, r5, #2
 8008536:	e004      	b.n	8008542 <__gethex+0xce>
 8008538:	2400      	movs	r4, #0
 800853a:	4625      	mov	r5, r4
 800853c:	e7e0      	b.n	8008500 <__gethex+0x8c>
 800853e:	2d00      	cmp	r5, #0
 8008540:	d1f7      	bne.n	8008532 <__gethex+0xbe>
 8008542:	7833      	ldrb	r3, [r6, #0]
 8008544:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008548:	2b50      	cmp	r3, #80	; 0x50
 800854a:	d139      	bne.n	80085c0 <__gethex+0x14c>
 800854c:	7873      	ldrb	r3, [r6, #1]
 800854e:	2b2b      	cmp	r3, #43	; 0x2b
 8008550:	d02a      	beq.n	80085a8 <__gethex+0x134>
 8008552:	2b2d      	cmp	r3, #45	; 0x2d
 8008554:	d02c      	beq.n	80085b0 <__gethex+0x13c>
 8008556:	f04f 0900 	mov.w	r9, #0
 800855a:	1c71      	adds	r1, r6, #1
 800855c:	7808      	ldrb	r0, [r1, #0]
 800855e:	f7ff ff74 	bl	800844a <__hexdig_fun>
 8008562:	1e43      	subs	r3, r0, #1
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b18      	cmp	r3, #24
 8008568:	d82a      	bhi.n	80085c0 <__gethex+0x14c>
 800856a:	f1a0 0210 	sub.w	r2, r0, #16
 800856e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008572:	f7ff ff6a 	bl	800844a <__hexdig_fun>
 8008576:	1e43      	subs	r3, r0, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b18      	cmp	r3, #24
 800857c:	d91b      	bls.n	80085b6 <__gethex+0x142>
 800857e:	f1b9 0f00 	cmp.w	r9, #0
 8008582:	d000      	beq.n	8008586 <__gethex+0x112>
 8008584:	4252      	negs	r2, r2
 8008586:	4415      	add	r5, r2
 8008588:	f8cb 1000 	str.w	r1, [fp]
 800858c:	b1d4      	cbz	r4, 80085c4 <__gethex+0x150>
 800858e:	9b01      	ldr	r3, [sp, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	bf14      	ite	ne
 8008594:	2700      	movne	r7, #0
 8008596:	2706      	moveq	r7, #6
 8008598:	4638      	mov	r0, r7
 800859a:	b00b      	add	sp, #44	; 0x2c
 800859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a0:	463e      	mov	r6, r7
 80085a2:	4625      	mov	r5, r4
 80085a4:	2401      	movs	r4, #1
 80085a6:	e7cc      	b.n	8008542 <__gethex+0xce>
 80085a8:	f04f 0900 	mov.w	r9, #0
 80085ac:	1cb1      	adds	r1, r6, #2
 80085ae:	e7d5      	b.n	800855c <__gethex+0xe8>
 80085b0:	f04f 0901 	mov.w	r9, #1
 80085b4:	e7fa      	b.n	80085ac <__gethex+0x138>
 80085b6:	230a      	movs	r3, #10
 80085b8:	fb03 0202 	mla	r2, r3, r2, r0
 80085bc:	3a10      	subs	r2, #16
 80085be:	e7d6      	b.n	800856e <__gethex+0xfa>
 80085c0:	4631      	mov	r1, r6
 80085c2:	e7e1      	b.n	8008588 <__gethex+0x114>
 80085c4:	4621      	mov	r1, r4
 80085c6:	1bf3      	subs	r3, r6, r7
 80085c8:	3b01      	subs	r3, #1
 80085ca:	2b07      	cmp	r3, #7
 80085cc:	dc0a      	bgt.n	80085e4 <__gethex+0x170>
 80085ce:	9802      	ldr	r0, [sp, #8]
 80085d0:	f000 fa88 	bl	8008ae4 <_Balloc>
 80085d4:	4604      	mov	r4, r0
 80085d6:	b940      	cbnz	r0, 80085ea <__gethex+0x176>
 80085d8:	4602      	mov	r2, r0
 80085da:	21de      	movs	r1, #222	; 0xde
 80085dc:	4b62      	ldr	r3, [pc, #392]	; (8008768 <__gethex+0x2f4>)
 80085de:	4863      	ldr	r0, [pc, #396]	; (800876c <__gethex+0x2f8>)
 80085e0:	f001 f97e 	bl	80098e0 <__assert_func>
 80085e4:	3101      	adds	r1, #1
 80085e6:	105b      	asrs	r3, r3, #1
 80085e8:	e7ef      	b.n	80085ca <__gethex+0x156>
 80085ea:	f04f 0b00 	mov.w	fp, #0
 80085ee:	f100 0914 	add.w	r9, r0, #20
 80085f2:	f1ca 0301 	rsb	r3, sl, #1
 80085f6:	f8cd 9010 	str.w	r9, [sp, #16]
 80085fa:	f8cd b004 	str.w	fp, [sp, #4]
 80085fe:	9308      	str	r3, [sp, #32]
 8008600:	42b7      	cmp	r7, r6
 8008602:	d33f      	bcc.n	8008684 <__gethex+0x210>
 8008604:	9f04      	ldr	r7, [sp, #16]
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	f847 3b04 	str.w	r3, [r7], #4
 800860c:	eba7 0709 	sub.w	r7, r7, r9
 8008610:	10bf      	asrs	r7, r7, #2
 8008612:	6127      	str	r7, [r4, #16]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 fb5b 	bl	8008cd0 <__hi0bits>
 800861a:	017f      	lsls	r7, r7, #5
 800861c:	f8d8 6000 	ldr.w	r6, [r8]
 8008620:	1a3f      	subs	r7, r7, r0
 8008622:	42b7      	cmp	r7, r6
 8008624:	dd62      	ble.n	80086ec <__gethex+0x278>
 8008626:	1bbf      	subs	r7, r7, r6
 8008628:	4639      	mov	r1, r7
 800862a:	4620      	mov	r0, r4
 800862c:	f000 fef1 	bl	8009412 <__any_on>
 8008630:	4682      	mov	sl, r0
 8008632:	b1a8      	cbz	r0, 8008660 <__gethex+0x1ec>
 8008634:	f04f 0a01 	mov.w	sl, #1
 8008638:	1e7b      	subs	r3, r7, #1
 800863a:	1159      	asrs	r1, r3, #5
 800863c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008640:	f003 021f 	and.w	r2, r3, #31
 8008644:	fa0a f202 	lsl.w	r2, sl, r2
 8008648:	420a      	tst	r2, r1
 800864a:	d009      	beq.n	8008660 <__gethex+0x1ec>
 800864c:	4553      	cmp	r3, sl
 800864e:	dd05      	ble.n	800865c <__gethex+0x1e8>
 8008650:	4620      	mov	r0, r4
 8008652:	1eb9      	subs	r1, r7, #2
 8008654:	f000 fedd 	bl	8009412 <__any_on>
 8008658:	2800      	cmp	r0, #0
 800865a:	d144      	bne.n	80086e6 <__gethex+0x272>
 800865c:	f04f 0a02 	mov.w	sl, #2
 8008660:	4639      	mov	r1, r7
 8008662:	4620      	mov	r0, r4
 8008664:	f7ff fe9e 	bl	80083a4 <rshift>
 8008668:	443d      	add	r5, r7
 800866a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800866e:	42ab      	cmp	r3, r5
 8008670:	da4a      	bge.n	8008708 <__gethex+0x294>
 8008672:	4621      	mov	r1, r4
 8008674:	9802      	ldr	r0, [sp, #8]
 8008676:	f000 fa75 	bl	8008b64 <_Bfree>
 800867a:	2300      	movs	r3, #0
 800867c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800867e:	27a3      	movs	r7, #163	; 0xa3
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e789      	b.n	8008598 <__gethex+0x124>
 8008684:	1e73      	subs	r3, r6, #1
 8008686:	9a07      	ldr	r2, [sp, #28]
 8008688:	9305      	str	r3, [sp, #20]
 800868a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800868e:	4293      	cmp	r3, r2
 8008690:	d019      	beq.n	80086c6 <__gethex+0x252>
 8008692:	f1bb 0f20 	cmp.w	fp, #32
 8008696:	d107      	bne.n	80086a8 <__gethex+0x234>
 8008698:	9b04      	ldr	r3, [sp, #16]
 800869a:	9a01      	ldr	r2, [sp, #4]
 800869c:	f843 2b04 	str.w	r2, [r3], #4
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	2300      	movs	r3, #0
 80086a4:	469b      	mov	fp, r3
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80086ac:	f7ff fecd 	bl	800844a <__hexdig_fun>
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	f000 000f 	and.w	r0, r0, #15
 80086b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80086ba:	4303      	orrs	r3, r0
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	f10b 0b04 	add.w	fp, fp, #4
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	e00d      	b.n	80086e2 <__gethex+0x26e>
 80086c6:	9b05      	ldr	r3, [sp, #20]
 80086c8:	9a08      	ldr	r2, [sp, #32]
 80086ca:	4413      	add	r3, r2
 80086cc:	42bb      	cmp	r3, r7
 80086ce:	d3e0      	bcc.n	8008692 <__gethex+0x21e>
 80086d0:	4618      	mov	r0, r3
 80086d2:	4652      	mov	r2, sl
 80086d4:	9903      	ldr	r1, [sp, #12]
 80086d6:	9309      	str	r3, [sp, #36]	; 0x24
 80086d8:	f001 f8e2 	bl	80098a0 <strncmp>
 80086dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086de:	2800      	cmp	r0, #0
 80086e0:	d1d7      	bne.n	8008692 <__gethex+0x21e>
 80086e2:	461e      	mov	r6, r3
 80086e4:	e78c      	b.n	8008600 <__gethex+0x18c>
 80086e6:	f04f 0a03 	mov.w	sl, #3
 80086ea:	e7b9      	b.n	8008660 <__gethex+0x1ec>
 80086ec:	da09      	bge.n	8008702 <__gethex+0x28e>
 80086ee:	1bf7      	subs	r7, r6, r7
 80086f0:	4621      	mov	r1, r4
 80086f2:	463a      	mov	r2, r7
 80086f4:	9802      	ldr	r0, [sp, #8]
 80086f6:	f000 fc4d 	bl	8008f94 <__lshift>
 80086fa:	4604      	mov	r4, r0
 80086fc:	1bed      	subs	r5, r5, r7
 80086fe:	f100 0914 	add.w	r9, r0, #20
 8008702:	f04f 0a00 	mov.w	sl, #0
 8008706:	e7b0      	b.n	800866a <__gethex+0x1f6>
 8008708:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800870c:	42a8      	cmp	r0, r5
 800870e:	dd71      	ble.n	80087f4 <__gethex+0x380>
 8008710:	1b45      	subs	r5, r0, r5
 8008712:	42ae      	cmp	r6, r5
 8008714:	dc34      	bgt.n	8008780 <__gethex+0x30c>
 8008716:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d028      	beq.n	8008770 <__gethex+0x2fc>
 800871e:	2b03      	cmp	r3, #3
 8008720:	d02a      	beq.n	8008778 <__gethex+0x304>
 8008722:	2b01      	cmp	r3, #1
 8008724:	d115      	bne.n	8008752 <__gethex+0x2de>
 8008726:	42ae      	cmp	r6, r5
 8008728:	d113      	bne.n	8008752 <__gethex+0x2de>
 800872a:	2e01      	cmp	r6, #1
 800872c:	d10b      	bne.n	8008746 <__gethex+0x2d2>
 800872e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008732:	9a06      	ldr	r2, [sp, #24]
 8008734:	2762      	movs	r7, #98	; 0x62
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	2301      	movs	r3, #1
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	f8c9 3000 	str.w	r3, [r9]
 8008740:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008742:	601c      	str	r4, [r3, #0]
 8008744:	e728      	b.n	8008598 <__gethex+0x124>
 8008746:	4620      	mov	r0, r4
 8008748:	1e71      	subs	r1, r6, #1
 800874a:	f000 fe62 	bl	8009412 <__any_on>
 800874e:	2800      	cmp	r0, #0
 8008750:	d1ed      	bne.n	800872e <__gethex+0x2ba>
 8008752:	4621      	mov	r1, r4
 8008754:	9802      	ldr	r0, [sp, #8]
 8008756:	f000 fa05 	bl	8008b64 <_Bfree>
 800875a:	2300      	movs	r3, #0
 800875c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800875e:	2750      	movs	r7, #80	; 0x50
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	e719      	b.n	8008598 <__gethex+0x124>
 8008764:	0800cf78 	.word	0x0800cf78
 8008768:	0800cefc 	.word	0x0800cefc
 800876c:	0800cf0d 	.word	0x0800cf0d
 8008770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1ed      	bne.n	8008752 <__gethex+0x2de>
 8008776:	e7da      	b.n	800872e <__gethex+0x2ba>
 8008778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1d7      	bne.n	800872e <__gethex+0x2ba>
 800877e:	e7e8      	b.n	8008752 <__gethex+0x2de>
 8008780:	1e6f      	subs	r7, r5, #1
 8008782:	f1ba 0f00 	cmp.w	sl, #0
 8008786:	d132      	bne.n	80087ee <__gethex+0x37a>
 8008788:	b127      	cbz	r7, 8008794 <__gethex+0x320>
 800878a:	4639      	mov	r1, r7
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fe40 	bl	8009412 <__any_on>
 8008792:	4682      	mov	sl, r0
 8008794:	2101      	movs	r1, #1
 8008796:	117b      	asrs	r3, r7, #5
 8008798:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800879c:	f007 071f 	and.w	r7, r7, #31
 80087a0:	fa01 f707 	lsl.w	r7, r1, r7
 80087a4:	421f      	tst	r7, r3
 80087a6:	f04f 0702 	mov.w	r7, #2
 80087aa:	4629      	mov	r1, r5
 80087ac:	4620      	mov	r0, r4
 80087ae:	bf18      	it	ne
 80087b0:	f04a 0a02 	orrne.w	sl, sl, #2
 80087b4:	1b76      	subs	r6, r6, r5
 80087b6:	f7ff fdf5 	bl	80083a4 <rshift>
 80087ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087be:	f1ba 0f00 	cmp.w	sl, #0
 80087c2:	d048      	beq.n	8008856 <__gethex+0x3e2>
 80087c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d015      	beq.n	80087f8 <__gethex+0x384>
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	d017      	beq.n	8008800 <__gethex+0x38c>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d109      	bne.n	80087e8 <__gethex+0x374>
 80087d4:	f01a 0f02 	tst.w	sl, #2
 80087d8:	d006      	beq.n	80087e8 <__gethex+0x374>
 80087da:	f8d9 0000 	ldr.w	r0, [r9]
 80087de:	ea4a 0a00 	orr.w	sl, sl, r0
 80087e2:	f01a 0f01 	tst.w	sl, #1
 80087e6:	d10e      	bne.n	8008806 <__gethex+0x392>
 80087e8:	f047 0710 	orr.w	r7, r7, #16
 80087ec:	e033      	b.n	8008856 <__gethex+0x3e2>
 80087ee:	f04f 0a01 	mov.w	sl, #1
 80087f2:	e7cf      	b.n	8008794 <__gethex+0x320>
 80087f4:	2701      	movs	r7, #1
 80087f6:	e7e2      	b.n	80087be <__gethex+0x34a>
 80087f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087fa:	f1c3 0301 	rsb	r3, r3, #1
 80087fe:	9315      	str	r3, [sp, #84]	; 0x54
 8008800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f0      	beq.n	80087e8 <__gethex+0x374>
 8008806:	f04f 0c00 	mov.w	ip, #0
 800880a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800880e:	f104 0314 	add.w	r3, r4, #20
 8008812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800881a:	4618      	mov	r0, r3
 800881c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008820:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008824:	d01c      	beq.n	8008860 <__gethex+0x3ec>
 8008826:	3201      	adds	r2, #1
 8008828:	6002      	str	r2, [r0, #0]
 800882a:	2f02      	cmp	r7, #2
 800882c:	f104 0314 	add.w	r3, r4, #20
 8008830:	d13d      	bne.n	80088ae <__gethex+0x43a>
 8008832:	f8d8 2000 	ldr.w	r2, [r8]
 8008836:	3a01      	subs	r2, #1
 8008838:	42b2      	cmp	r2, r6
 800883a:	d10a      	bne.n	8008852 <__gethex+0x3de>
 800883c:	2201      	movs	r2, #1
 800883e:	1171      	asrs	r1, r6, #5
 8008840:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008844:	f006 061f 	and.w	r6, r6, #31
 8008848:	fa02 f606 	lsl.w	r6, r2, r6
 800884c:	421e      	tst	r6, r3
 800884e:	bf18      	it	ne
 8008850:	4617      	movne	r7, r2
 8008852:	f047 0720 	orr.w	r7, r7, #32
 8008856:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008858:	601c      	str	r4, [r3, #0]
 800885a:	9b06      	ldr	r3, [sp, #24]
 800885c:	601d      	str	r5, [r3, #0]
 800885e:	e69b      	b.n	8008598 <__gethex+0x124>
 8008860:	4299      	cmp	r1, r3
 8008862:	f843 cc04 	str.w	ip, [r3, #-4]
 8008866:	d8d8      	bhi.n	800881a <__gethex+0x3a6>
 8008868:	68a3      	ldr	r3, [r4, #8]
 800886a:	459b      	cmp	fp, r3
 800886c:	db17      	blt.n	800889e <__gethex+0x42a>
 800886e:	6861      	ldr	r1, [r4, #4]
 8008870:	9802      	ldr	r0, [sp, #8]
 8008872:	3101      	adds	r1, #1
 8008874:	f000 f936 	bl	8008ae4 <_Balloc>
 8008878:	4681      	mov	r9, r0
 800887a:	b918      	cbnz	r0, 8008884 <__gethex+0x410>
 800887c:	4602      	mov	r2, r0
 800887e:	2184      	movs	r1, #132	; 0x84
 8008880:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <__gethex+0x474>)
 8008882:	e6ac      	b.n	80085de <__gethex+0x16a>
 8008884:	6922      	ldr	r2, [r4, #16]
 8008886:	f104 010c 	add.w	r1, r4, #12
 800888a:	3202      	adds	r2, #2
 800888c:	0092      	lsls	r2, r2, #2
 800888e:	300c      	adds	r0, #12
 8008890:	f000 f91a 	bl	8008ac8 <memcpy>
 8008894:	4621      	mov	r1, r4
 8008896:	9802      	ldr	r0, [sp, #8]
 8008898:	f000 f964 	bl	8008b64 <_Bfree>
 800889c:	464c      	mov	r4, r9
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	6122      	str	r2, [r4, #16]
 80088a4:	2201      	movs	r2, #1
 80088a6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088aa:	615a      	str	r2, [r3, #20]
 80088ac:	e7bd      	b.n	800882a <__gethex+0x3b6>
 80088ae:	6922      	ldr	r2, [r4, #16]
 80088b0:	455a      	cmp	r2, fp
 80088b2:	dd0b      	ble.n	80088cc <__gethex+0x458>
 80088b4:	2101      	movs	r1, #1
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff fd74 	bl	80083a4 <rshift>
 80088bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088c0:	3501      	adds	r5, #1
 80088c2:	42ab      	cmp	r3, r5
 80088c4:	f6ff aed5 	blt.w	8008672 <__gethex+0x1fe>
 80088c8:	2701      	movs	r7, #1
 80088ca:	e7c2      	b.n	8008852 <__gethex+0x3de>
 80088cc:	f016 061f 	ands.w	r6, r6, #31
 80088d0:	d0fa      	beq.n	80088c8 <__gethex+0x454>
 80088d2:	449a      	add	sl, r3
 80088d4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80088d8:	f000 f9fa 	bl	8008cd0 <__hi0bits>
 80088dc:	f1c6 0620 	rsb	r6, r6, #32
 80088e0:	42b0      	cmp	r0, r6
 80088e2:	dbe7      	blt.n	80088b4 <__gethex+0x440>
 80088e4:	e7f0      	b.n	80088c8 <__gethex+0x454>
 80088e6:	bf00      	nop
 80088e8:	0800cefc 	.word	0x0800cefc

080088ec <L_shift>:
 80088ec:	f1c2 0208 	rsb	r2, r2, #8
 80088f0:	0092      	lsls	r2, r2, #2
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	f1c2 0620 	rsb	r6, r2, #32
 80088f8:	6843      	ldr	r3, [r0, #4]
 80088fa:	6804      	ldr	r4, [r0, #0]
 80088fc:	fa03 f506 	lsl.w	r5, r3, r6
 8008900:	432c      	orrs	r4, r5
 8008902:	40d3      	lsrs	r3, r2
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	f840 3f04 	str.w	r3, [r0, #4]!
 800890a:	4288      	cmp	r0, r1
 800890c:	d3f4      	bcc.n	80088f8 <L_shift+0xc>
 800890e:	bd70      	pop	{r4, r5, r6, pc}

08008910 <__match>:
 8008910:	b530      	push	{r4, r5, lr}
 8008912:	6803      	ldr	r3, [r0, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891a:	b914      	cbnz	r4, 8008922 <__match+0x12>
 800891c:	6003      	str	r3, [r0, #0]
 800891e:	2001      	movs	r0, #1
 8008920:	bd30      	pop	{r4, r5, pc}
 8008922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008926:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800892a:	2d19      	cmp	r5, #25
 800892c:	bf98      	it	ls
 800892e:	3220      	addls	r2, #32
 8008930:	42a2      	cmp	r2, r4
 8008932:	d0f0      	beq.n	8008916 <__match+0x6>
 8008934:	2000      	movs	r0, #0
 8008936:	e7f3      	b.n	8008920 <__match+0x10>

08008938 <__hexnan>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	2500      	movs	r5, #0
 800893e:	680b      	ldr	r3, [r1, #0]
 8008940:	4682      	mov	sl, r0
 8008942:	115e      	asrs	r6, r3, #5
 8008944:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008948:	f013 031f 	ands.w	r3, r3, #31
 800894c:	bf18      	it	ne
 800894e:	3604      	addne	r6, #4
 8008950:	1f37      	subs	r7, r6, #4
 8008952:	4690      	mov	r8, r2
 8008954:	46b9      	mov	r9, r7
 8008956:	463c      	mov	r4, r7
 8008958:	46ab      	mov	fp, r5
 800895a:	b087      	sub	sp, #28
 800895c:	6801      	ldr	r1, [r0, #0]
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	f846 5c04 	str.w	r5, [r6, #-4]
 8008964:	9502      	str	r5, [sp, #8]
 8008966:	784a      	ldrb	r2, [r1, #1]
 8008968:	1c4b      	adds	r3, r1, #1
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	b342      	cbz	r2, 80089c0 <__hexnan+0x88>
 800896e:	4610      	mov	r0, r2
 8008970:	9105      	str	r1, [sp, #20]
 8008972:	9204      	str	r2, [sp, #16]
 8008974:	f7ff fd69 	bl	800844a <__hexdig_fun>
 8008978:	2800      	cmp	r0, #0
 800897a:	d14f      	bne.n	8008a1c <__hexnan+0xe4>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	9905      	ldr	r1, [sp, #20]
 8008980:	2a20      	cmp	r2, #32
 8008982:	d818      	bhi.n	80089b6 <__hexnan+0x7e>
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	459b      	cmp	fp, r3
 8008988:	dd13      	ble.n	80089b2 <__hexnan+0x7a>
 800898a:	454c      	cmp	r4, r9
 800898c:	d206      	bcs.n	800899c <__hexnan+0x64>
 800898e:	2d07      	cmp	r5, #7
 8008990:	dc04      	bgt.n	800899c <__hexnan+0x64>
 8008992:	462a      	mov	r2, r5
 8008994:	4649      	mov	r1, r9
 8008996:	4620      	mov	r0, r4
 8008998:	f7ff ffa8 	bl	80088ec <L_shift>
 800899c:	4544      	cmp	r4, r8
 800899e:	d950      	bls.n	8008a42 <__hexnan+0x10a>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f1a4 0904 	sub.w	r9, r4, #4
 80089a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80089aa:	461d      	mov	r5, r3
 80089ac:	464c      	mov	r4, r9
 80089ae:	f8cd b008 	str.w	fp, [sp, #8]
 80089b2:	9903      	ldr	r1, [sp, #12]
 80089b4:	e7d7      	b.n	8008966 <__hexnan+0x2e>
 80089b6:	2a29      	cmp	r2, #41	; 0x29
 80089b8:	d156      	bne.n	8008a68 <__hexnan+0x130>
 80089ba:	3102      	adds	r1, #2
 80089bc:	f8ca 1000 	str.w	r1, [sl]
 80089c0:	f1bb 0f00 	cmp.w	fp, #0
 80089c4:	d050      	beq.n	8008a68 <__hexnan+0x130>
 80089c6:	454c      	cmp	r4, r9
 80089c8:	d206      	bcs.n	80089d8 <__hexnan+0xa0>
 80089ca:	2d07      	cmp	r5, #7
 80089cc:	dc04      	bgt.n	80089d8 <__hexnan+0xa0>
 80089ce:	462a      	mov	r2, r5
 80089d0:	4649      	mov	r1, r9
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff ff8a 	bl	80088ec <L_shift>
 80089d8:	4544      	cmp	r4, r8
 80089da:	d934      	bls.n	8008a46 <__hexnan+0x10e>
 80089dc:	4623      	mov	r3, r4
 80089de:	f1a8 0204 	sub.w	r2, r8, #4
 80089e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80089e6:	429f      	cmp	r7, r3
 80089e8:	f842 1f04 	str.w	r1, [r2, #4]!
 80089ec:	d2f9      	bcs.n	80089e2 <__hexnan+0xaa>
 80089ee:	1b3b      	subs	r3, r7, r4
 80089f0:	f023 0303 	bic.w	r3, r3, #3
 80089f4:	3304      	adds	r3, #4
 80089f6:	3401      	adds	r4, #1
 80089f8:	3e03      	subs	r6, #3
 80089fa:	42b4      	cmp	r4, r6
 80089fc:	bf88      	it	hi
 80089fe:	2304      	movhi	r3, #4
 8008a00:	2200      	movs	r2, #0
 8008a02:	4443      	add	r3, r8
 8008a04:	f843 2b04 	str.w	r2, [r3], #4
 8008a08:	429f      	cmp	r7, r3
 8008a0a:	d2fb      	bcs.n	8008a04 <__hexnan+0xcc>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	b91b      	cbnz	r3, 8008a18 <__hexnan+0xe0>
 8008a10:	4547      	cmp	r7, r8
 8008a12:	d127      	bne.n	8008a64 <__hexnan+0x12c>
 8008a14:	2301      	movs	r3, #1
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	2005      	movs	r0, #5
 8008a1a:	e026      	b.n	8008a6a <__hexnan+0x132>
 8008a1c:	3501      	adds	r5, #1
 8008a1e:	2d08      	cmp	r5, #8
 8008a20:	f10b 0b01 	add.w	fp, fp, #1
 8008a24:	dd06      	ble.n	8008a34 <__hexnan+0xfc>
 8008a26:	4544      	cmp	r4, r8
 8008a28:	d9c3      	bls.n	80089b2 <__hexnan+0x7a>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2501      	movs	r5, #1
 8008a2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a32:	3c04      	subs	r4, #4
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	f000 000f 	and.w	r0, r0, #15
 8008a3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	e7b7      	b.n	80089b2 <__hexnan+0x7a>
 8008a42:	2508      	movs	r5, #8
 8008a44:	e7b5      	b.n	80089b2 <__hexnan+0x7a>
 8008a46:	9b01      	ldr	r3, [sp, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0df      	beq.n	8008a0c <__hexnan+0xd4>
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	f1c3 0320 	rsb	r3, r3, #32
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a5c:	401a      	ands	r2, r3
 8008a5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008a62:	e7d3      	b.n	8008a0c <__hexnan+0xd4>
 8008a64:	3f04      	subs	r7, #4
 8008a66:	e7d1      	b.n	8008a0c <__hexnan+0xd4>
 8008a68:	2004      	movs	r0, #4
 8008a6a:	b007      	add	sp, #28
 8008a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a70 <_localeconv_r>:
 8008a70:	4800      	ldr	r0, [pc, #0]	; (8008a74 <_localeconv_r+0x4>)
 8008a72:	4770      	bx	lr
 8008a74:	2000017c 	.word	0x2000017c

08008a78 <malloc>:
 8008a78:	4b02      	ldr	r3, [pc, #8]	; (8008a84 <malloc+0xc>)
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	f000 bd43 	b.w	8009508 <_malloc_r>
 8008a82:	bf00      	nop
 8008a84:	20000024 	.word	0x20000024

08008a88 <__ascii_mbtowc>:
 8008a88:	b082      	sub	sp, #8
 8008a8a:	b901      	cbnz	r1, 8008a8e <__ascii_mbtowc+0x6>
 8008a8c:	a901      	add	r1, sp, #4
 8008a8e:	b142      	cbz	r2, 8008aa2 <__ascii_mbtowc+0x1a>
 8008a90:	b14b      	cbz	r3, 8008aa6 <__ascii_mbtowc+0x1e>
 8008a92:	7813      	ldrb	r3, [r2, #0]
 8008a94:	600b      	str	r3, [r1, #0]
 8008a96:	7812      	ldrb	r2, [r2, #0]
 8008a98:	1e10      	subs	r0, r2, #0
 8008a9a:	bf18      	it	ne
 8008a9c:	2001      	movne	r0, #1
 8008a9e:	b002      	add	sp, #8
 8008aa0:	4770      	bx	lr
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	e7fb      	b.n	8008a9e <__ascii_mbtowc+0x16>
 8008aa6:	f06f 0001 	mvn.w	r0, #1
 8008aaa:	e7f8      	b.n	8008a9e <__ascii_mbtowc+0x16>

08008aac <memchr>:
 8008aac:	4603      	mov	r3, r0
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	b2c9      	uxtb	r1, r1
 8008ab2:	4402      	add	r2, r0
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	d101      	bne.n	8008abe <memchr+0x12>
 8008aba:	2000      	movs	r0, #0
 8008abc:	e003      	b.n	8008ac6 <memchr+0x1a>
 8008abe:	7804      	ldrb	r4, [r0, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	428c      	cmp	r4, r1
 8008ac4:	d1f6      	bne.n	8008ab4 <memchr+0x8>
 8008ac6:	bd10      	pop	{r4, pc}

08008ac8 <memcpy>:
 8008ac8:	440a      	add	r2, r1
 8008aca:	4291      	cmp	r1, r2
 8008acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ad0:	d100      	bne.n	8008ad4 <memcpy+0xc>
 8008ad2:	4770      	bx	lr
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ada:	4291      	cmp	r1, r2
 8008adc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ae0:	d1f9      	bne.n	8008ad6 <memcpy+0xe>
 8008ae2:	bd10      	pop	{r4, pc}

08008ae4 <_Balloc>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	b976      	cbnz	r6, 8008b0c <_Balloc+0x28>
 8008aee:	2010      	movs	r0, #16
 8008af0:	f7ff ffc2 	bl	8008a78 <malloc>
 8008af4:	4602      	mov	r2, r0
 8008af6:	6260      	str	r0, [r4, #36]	; 0x24
 8008af8:	b920      	cbnz	r0, 8008b04 <_Balloc+0x20>
 8008afa:	2166      	movs	r1, #102	; 0x66
 8008afc:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <_Balloc+0x78>)
 8008afe:	4818      	ldr	r0, [pc, #96]	; (8008b60 <_Balloc+0x7c>)
 8008b00:	f000 feee 	bl	80098e0 <__assert_func>
 8008b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b08:	6006      	str	r6, [r0, #0]
 8008b0a:	60c6      	str	r6, [r0, #12]
 8008b0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b0e:	68f3      	ldr	r3, [r6, #12]
 8008b10:	b183      	cbz	r3, 8008b34 <_Balloc+0x50>
 8008b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b1a:	b9b8      	cbnz	r0, 8008b4c <_Balloc+0x68>
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b22:	1d72      	adds	r2, r6, #5
 8008b24:	4620      	mov	r0, r4
 8008b26:	0092      	lsls	r2, r2, #2
 8008b28:	f000 fc94 	bl	8009454 <_calloc_r>
 8008b2c:	b160      	cbz	r0, 8008b48 <_Balloc+0x64>
 8008b2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b32:	e00e      	b.n	8008b52 <_Balloc+0x6e>
 8008b34:	2221      	movs	r2, #33	; 0x21
 8008b36:	2104      	movs	r1, #4
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fc8b 	bl	8009454 <_calloc_r>
 8008b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b40:	60f0      	str	r0, [r6, #12]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e4      	bne.n	8008b12 <_Balloc+0x2e>
 8008b48:	2000      	movs	r0, #0
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	6802      	ldr	r2, [r0, #0]
 8008b4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b52:	2300      	movs	r3, #0
 8008b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b58:	e7f7      	b.n	8008b4a <_Balloc+0x66>
 8008b5a:	bf00      	nop
 8008b5c:	0800ce86 	.word	0x0800ce86
 8008b60:	0800cf8c 	.word	0x0800cf8c

08008b64 <_Bfree>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	b976      	cbnz	r6, 8008b8c <_Bfree+0x28>
 8008b6e:	2010      	movs	r0, #16
 8008b70:	f7ff ff82 	bl	8008a78 <malloc>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6268      	str	r0, [r5, #36]	; 0x24
 8008b78:	b920      	cbnz	r0, 8008b84 <_Bfree+0x20>
 8008b7a:	218a      	movs	r1, #138	; 0x8a
 8008b7c:	4b08      	ldr	r3, [pc, #32]	; (8008ba0 <_Bfree+0x3c>)
 8008b7e:	4809      	ldr	r0, [pc, #36]	; (8008ba4 <_Bfree+0x40>)
 8008b80:	f000 feae 	bl	80098e0 <__assert_func>
 8008b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b88:	6006      	str	r6, [r0, #0]
 8008b8a:	60c6      	str	r6, [r0, #12]
 8008b8c:	b13c      	cbz	r4, 8008b9e <_Bfree+0x3a>
 8008b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b90:	6862      	ldr	r2, [r4, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b98:	6021      	str	r1, [r4, #0]
 8008b9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	0800ce86 	.word	0x0800ce86
 8008ba4:	0800cf8c 	.word	0x0800cf8c

08008ba8 <__multadd>:
 8008ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bac:	4698      	mov	r8, r3
 8008bae:	460c      	mov	r4, r1
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	690e      	ldr	r6, [r1, #16]
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	f101 0014 	add.w	r0, r1, #20
 8008bba:	6805      	ldr	r5, [r0, #0]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	b2a9      	uxth	r1, r5
 8008bc0:	fb02 8101 	mla	r1, r2, r1, r8
 8008bc4:	0c2d      	lsrs	r5, r5, #16
 8008bc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008bca:	fb02 c505 	mla	r5, r2, r5, ip
 8008bce:	b289      	uxth	r1, r1
 8008bd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008bd4:	429e      	cmp	r6, r3
 8008bd6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008bda:	f840 1b04 	str.w	r1, [r0], #4
 8008bde:	dcec      	bgt.n	8008bba <__multadd+0x12>
 8008be0:	f1b8 0f00 	cmp.w	r8, #0
 8008be4:	d022      	beq.n	8008c2c <__multadd+0x84>
 8008be6:	68a3      	ldr	r3, [r4, #8]
 8008be8:	42b3      	cmp	r3, r6
 8008bea:	dc19      	bgt.n	8008c20 <__multadd+0x78>
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	4638      	mov	r0, r7
 8008bf0:	3101      	adds	r1, #1
 8008bf2:	f7ff ff77 	bl	8008ae4 <_Balloc>
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	b928      	cbnz	r0, 8008c06 <__multadd+0x5e>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	21b5      	movs	r1, #181	; 0xb5
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <__multadd+0x8c>)
 8008c00:	480d      	ldr	r0, [pc, #52]	; (8008c38 <__multadd+0x90>)
 8008c02:	f000 fe6d 	bl	80098e0 <__assert_func>
 8008c06:	6922      	ldr	r2, [r4, #16]
 8008c08:	f104 010c 	add.w	r1, r4, #12
 8008c0c:	3202      	adds	r2, #2
 8008c0e:	0092      	lsls	r2, r2, #2
 8008c10:	300c      	adds	r0, #12
 8008c12:	f7ff ff59 	bl	8008ac8 <memcpy>
 8008c16:	4621      	mov	r1, r4
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f7ff ffa3 	bl	8008b64 <_Bfree>
 8008c1e:	462c      	mov	r4, r5
 8008c20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008c24:	3601      	adds	r6, #1
 8008c26:	f8c3 8014 	str.w	r8, [r3, #20]
 8008c2a:	6126      	str	r6, [r4, #16]
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c32:	bf00      	nop
 8008c34:	0800cefc 	.word	0x0800cefc
 8008c38:	0800cf8c 	.word	0x0800cf8c

08008c3c <__s2b>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	4615      	mov	r5, r2
 8008c42:	2209      	movs	r2, #9
 8008c44:	461f      	mov	r7, r3
 8008c46:	3308      	adds	r3, #8
 8008c48:	460c      	mov	r4, r1
 8008c4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c4e:	4606      	mov	r6, r0
 8008c50:	2201      	movs	r2, #1
 8008c52:	2100      	movs	r1, #0
 8008c54:	429a      	cmp	r2, r3
 8008c56:	db09      	blt.n	8008c6c <__s2b+0x30>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff ff43 	bl	8008ae4 <_Balloc>
 8008c5e:	b940      	cbnz	r0, 8008c72 <__s2b+0x36>
 8008c60:	4602      	mov	r2, r0
 8008c62:	21ce      	movs	r1, #206	; 0xce
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <__s2b+0x8c>)
 8008c66:	4819      	ldr	r0, [pc, #100]	; (8008ccc <__s2b+0x90>)
 8008c68:	f000 fe3a 	bl	80098e0 <__assert_func>
 8008c6c:	0052      	lsls	r2, r2, #1
 8008c6e:	3101      	adds	r1, #1
 8008c70:	e7f0      	b.n	8008c54 <__s2b+0x18>
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	2d09      	cmp	r5, #9
 8008c76:	6143      	str	r3, [r0, #20]
 8008c78:	f04f 0301 	mov.w	r3, #1
 8008c7c:	6103      	str	r3, [r0, #16]
 8008c7e:	dd16      	ble.n	8008cae <__s2b+0x72>
 8008c80:	f104 0909 	add.w	r9, r4, #9
 8008c84:	46c8      	mov	r8, r9
 8008c86:	442c      	add	r4, r5
 8008c88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	220a      	movs	r2, #10
 8008c90:	4630      	mov	r0, r6
 8008c92:	3b30      	subs	r3, #48	; 0x30
 8008c94:	f7ff ff88 	bl	8008ba8 <__multadd>
 8008c98:	45a0      	cmp	r8, r4
 8008c9a:	d1f5      	bne.n	8008c88 <__s2b+0x4c>
 8008c9c:	f1a5 0408 	sub.w	r4, r5, #8
 8008ca0:	444c      	add	r4, r9
 8008ca2:	1b2d      	subs	r5, r5, r4
 8008ca4:	1963      	adds	r3, r4, r5
 8008ca6:	42bb      	cmp	r3, r7
 8008ca8:	db04      	blt.n	8008cb4 <__s2b+0x78>
 8008caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cae:	2509      	movs	r5, #9
 8008cb0:	340a      	adds	r4, #10
 8008cb2:	e7f6      	b.n	8008ca2 <__s2b+0x66>
 8008cb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008cb8:	4601      	mov	r1, r0
 8008cba:	220a      	movs	r2, #10
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	3b30      	subs	r3, #48	; 0x30
 8008cc0:	f7ff ff72 	bl	8008ba8 <__multadd>
 8008cc4:	e7ee      	b.n	8008ca4 <__s2b+0x68>
 8008cc6:	bf00      	nop
 8008cc8:	0800cefc 	.word	0x0800cefc
 8008ccc:	0800cf8c 	.word	0x0800cf8c

08008cd0 <__hi0bits>:
 8008cd0:	0c02      	lsrs	r2, r0, #16
 8008cd2:	0412      	lsls	r2, r2, #16
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	b9ca      	cbnz	r2, 8008d0c <__hi0bits+0x3c>
 8008cd8:	0403      	lsls	r3, r0, #16
 8008cda:	2010      	movs	r0, #16
 8008cdc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ce0:	bf04      	itt	eq
 8008ce2:	021b      	lsleq	r3, r3, #8
 8008ce4:	3008      	addeq	r0, #8
 8008ce6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008cea:	bf04      	itt	eq
 8008cec:	011b      	lsleq	r3, r3, #4
 8008cee:	3004      	addeq	r0, #4
 8008cf0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008cf4:	bf04      	itt	eq
 8008cf6:	009b      	lsleq	r3, r3, #2
 8008cf8:	3002      	addeq	r0, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	db05      	blt.n	8008d0a <__hi0bits+0x3a>
 8008cfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008d02:	f100 0001 	add.w	r0, r0, #1
 8008d06:	bf08      	it	eq
 8008d08:	2020      	moveq	r0, #32
 8008d0a:	4770      	bx	lr
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7e5      	b.n	8008cdc <__hi0bits+0xc>

08008d10 <__lo0bits>:
 8008d10:	6803      	ldr	r3, [r0, #0]
 8008d12:	4602      	mov	r2, r0
 8008d14:	f013 0007 	ands.w	r0, r3, #7
 8008d18:	d00b      	beq.n	8008d32 <__lo0bits+0x22>
 8008d1a:	07d9      	lsls	r1, r3, #31
 8008d1c:	d422      	bmi.n	8008d64 <__lo0bits+0x54>
 8008d1e:	0798      	lsls	r0, r3, #30
 8008d20:	bf49      	itett	mi
 8008d22:	085b      	lsrmi	r3, r3, #1
 8008d24:	089b      	lsrpl	r3, r3, #2
 8008d26:	2001      	movmi	r0, #1
 8008d28:	6013      	strmi	r3, [r2, #0]
 8008d2a:	bf5c      	itt	pl
 8008d2c:	2002      	movpl	r0, #2
 8008d2e:	6013      	strpl	r3, [r2, #0]
 8008d30:	4770      	bx	lr
 8008d32:	b299      	uxth	r1, r3
 8008d34:	b909      	cbnz	r1, 8008d3a <__lo0bits+0x2a>
 8008d36:	2010      	movs	r0, #16
 8008d38:	0c1b      	lsrs	r3, r3, #16
 8008d3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d3e:	bf04      	itt	eq
 8008d40:	0a1b      	lsreq	r3, r3, #8
 8008d42:	3008      	addeq	r0, #8
 8008d44:	0719      	lsls	r1, r3, #28
 8008d46:	bf04      	itt	eq
 8008d48:	091b      	lsreq	r3, r3, #4
 8008d4a:	3004      	addeq	r0, #4
 8008d4c:	0799      	lsls	r1, r3, #30
 8008d4e:	bf04      	itt	eq
 8008d50:	089b      	lsreq	r3, r3, #2
 8008d52:	3002      	addeq	r0, #2
 8008d54:	07d9      	lsls	r1, r3, #31
 8008d56:	d403      	bmi.n	8008d60 <__lo0bits+0x50>
 8008d58:	085b      	lsrs	r3, r3, #1
 8008d5a:	f100 0001 	add.w	r0, r0, #1
 8008d5e:	d003      	beq.n	8008d68 <__lo0bits+0x58>
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	4770      	bx	lr
 8008d64:	2000      	movs	r0, #0
 8008d66:	4770      	bx	lr
 8008d68:	2020      	movs	r0, #32
 8008d6a:	4770      	bx	lr

08008d6c <__i2b>:
 8008d6c:	b510      	push	{r4, lr}
 8008d6e:	460c      	mov	r4, r1
 8008d70:	2101      	movs	r1, #1
 8008d72:	f7ff feb7 	bl	8008ae4 <_Balloc>
 8008d76:	4602      	mov	r2, r0
 8008d78:	b928      	cbnz	r0, 8008d86 <__i2b+0x1a>
 8008d7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d7e:	4b04      	ldr	r3, [pc, #16]	; (8008d90 <__i2b+0x24>)
 8008d80:	4804      	ldr	r0, [pc, #16]	; (8008d94 <__i2b+0x28>)
 8008d82:	f000 fdad 	bl	80098e0 <__assert_func>
 8008d86:	2301      	movs	r3, #1
 8008d88:	6144      	str	r4, [r0, #20]
 8008d8a:	6103      	str	r3, [r0, #16]
 8008d8c:	bd10      	pop	{r4, pc}
 8008d8e:	bf00      	nop
 8008d90:	0800cefc 	.word	0x0800cefc
 8008d94:	0800cf8c 	.word	0x0800cf8c

08008d98 <__multiply>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	690a      	ldr	r2, [r1, #16]
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	460d      	mov	r5, r1
 8008da4:	429a      	cmp	r2, r3
 8008da6:	bfbe      	ittt	lt
 8008da8:	460b      	movlt	r3, r1
 8008daa:	4625      	movlt	r5, r4
 8008dac:	461c      	movlt	r4, r3
 8008dae:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008db2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008db6:	68ab      	ldr	r3, [r5, #8]
 8008db8:	6869      	ldr	r1, [r5, #4]
 8008dba:	eb0a 0709 	add.w	r7, sl, r9
 8008dbe:	42bb      	cmp	r3, r7
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	bfb8      	it	lt
 8008dc4:	3101      	addlt	r1, #1
 8008dc6:	f7ff fe8d 	bl	8008ae4 <_Balloc>
 8008dca:	b930      	cbnz	r0, 8008dda <__multiply+0x42>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	f240 115d 	movw	r1, #349	; 0x15d
 8008dd2:	4b41      	ldr	r3, [pc, #260]	; (8008ed8 <__multiply+0x140>)
 8008dd4:	4841      	ldr	r0, [pc, #260]	; (8008edc <__multiply+0x144>)
 8008dd6:	f000 fd83 	bl	80098e0 <__assert_func>
 8008dda:	f100 0614 	add.w	r6, r0, #20
 8008dde:	4633      	mov	r3, r6
 8008de0:	2200      	movs	r2, #0
 8008de2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008de6:	4543      	cmp	r3, r8
 8008de8:	d31e      	bcc.n	8008e28 <__multiply+0x90>
 8008dea:	f105 0c14 	add.w	ip, r5, #20
 8008dee:	f104 0314 	add.w	r3, r4, #20
 8008df2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008df6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008dfa:	9202      	str	r2, [sp, #8]
 8008dfc:	ebac 0205 	sub.w	r2, ip, r5
 8008e00:	3a15      	subs	r2, #21
 8008e02:	f022 0203 	bic.w	r2, r2, #3
 8008e06:	3204      	adds	r2, #4
 8008e08:	f105 0115 	add.w	r1, r5, #21
 8008e0c:	458c      	cmp	ip, r1
 8008e0e:	bf38      	it	cc
 8008e10:	2204      	movcc	r2, #4
 8008e12:	9201      	str	r2, [sp, #4]
 8008e14:	9a02      	ldr	r2, [sp, #8]
 8008e16:	9303      	str	r3, [sp, #12]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d808      	bhi.n	8008e2e <__multiply+0x96>
 8008e1c:	2f00      	cmp	r7, #0
 8008e1e:	dc55      	bgt.n	8008ecc <__multiply+0x134>
 8008e20:	6107      	str	r7, [r0, #16]
 8008e22:	b005      	add	sp, #20
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	f843 2b04 	str.w	r2, [r3], #4
 8008e2c:	e7db      	b.n	8008de6 <__multiply+0x4e>
 8008e2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e32:	f1ba 0f00 	cmp.w	sl, #0
 8008e36:	d020      	beq.n	8008e7a <__multiply+0xe2>
 8008e38:	46b1      	mov	r9, r6
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f105 0e14 	add.w	lr, r5, #20
 8008e40:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008e44:	f8d9 b000 	ldr.w	fp, [r9]
 8008e48:	b2a1      	uxth	r1, r4
 8008e4a:	fa1f fb8b 	uxth.w	fp, fp
 8008e4e:	fb0a b101 	mla	r1, sl, r1, fp
 8008e52:	4411      	add	r1, r2
 8008e54:	f8d9 2000 	ldr.w	r2, [r9]
 8008e58:	0c24      	lsrs	r4, r4, #16
 8008e5a:	0c12      	lsrs	r2, r2, #16
 8008e5c:	fb0a 2404 	mla	r4, sl, r4, r2
 8008e60:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008e64:	b289      	uxth	r1, r1
 8008e66:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008e6a:	45f4      	cmp	ip, lr
 8008e6c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008e70:	f849 1b04 	str.w	r1, [r9], #4
 8008e74:	d8e4      	bhi.n	8008e40 <__multiply+0xa8>
 8008e76:	9901      	ldr	r1, [sp, #4]
 8008e78:	5072      	str	r2, [r6, r1]
 8008e7a:	9a03      	ldr	r2, [sp, #12]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e82:	f1b9 0f00 	cmp.w	r9, #0
 8008e86:	d01f      	beq.n	8008ec8 <__multiply+0x130>
 8008e88:	46b6      	mov	lr, r6
 8008e8a:	f04f 0a00 	mov.w	sl, #0
 8008e8e:	6834      	ldr	r4, [r6, #0]
 8008e90:	f105 0114 	add.w	r1, r5, #20
 8008e94:	880a      	ldrh	r2, [r1, #0]
 8008e96:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008e9a:	b2a4      	uxth	r4, r4
 8008e9c:	fb09 b202 	mla	r2, r9, r2, fp
 8008ea0:	4492      	add	sl, r2
 8008ea2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ea6:	f84e 4b04 	str.w	r4, [lr], #4
 8008eaa:	f851 4b04 	ldr.w	r4, [r1], #4
 8008eae:	f8be 2000 	ldrh.w	r2, [lr]
 8008eb2:	0c24      	lsrs	r4, r4, #16
 8008eb4:	fb09 2404 	mla	r4, r9, r4, r2
 8008eb8:	458c      	cmp	ip, r1
 8008eba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ebe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ec2:	d8e7      	bhi.n	8008e94 <__multiply+0xfc>
 8008ec4:	9a01      	ldr	r2, [sp, #4]
 8008ec6:	50b4      	str	r4, [r6, r2]
 8008ec8:	3604      	adds	r6, #4
 8008eca:	e7a3      	b.n	8008e14 <__multiply+0x7c>
 8008ecc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1a5      	bne.n	8008e20 <__multiply+0x88>
 8008ed4:	3f01      	subs	r7, #1
 8008ed6:	e7a1      	b.n	8008e1c <__multiply+0x84>
 8008ed8:	0800cefc 	.word	0x0800cefc
 8008edc:	0800cf8c 	.word	0x0800cf8c

08008ee0 <__pow5mult>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	f012 0203 	ands.w	r2, r2, #3
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	d007      	beq.n	8008f00 <__pow5mult+0x20>
 8008ef0:	4c25      	ldr	r4, [pc, #148]	; (8008f88 <__pow5mult+0xa8>)
 8008ef2:	3a01      	subs	r2, #1
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008efa:	f7ff fe55 	bl	8008ba8 <__multadd>
 8008efe:	4607      	mov	r7, r0
 8008f00:	10ad      	asrs	r5, r5, #2
 8008f02:	d03d      	beq.n	8008f80 <__pow5mult+0xa0>
 8008f04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f06:	b97c      	cbnz	r4, 8008f28 <__pow5mult+0x48>
 8008f08:	2010      	movs	r0, #16
 8008f0a:	f7ff fdb5 	bl	8008a78 <malloc>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	6270      	str	r0, [r6, #36]	; 0x24
 8008f12:	b928      	cbnz	r0, 8008f20 <__pow5mult+0x40>
 8008f14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f18:	4b1c      	ldr	r3, [pc, #112]	; (8008f8c <__pow5mult+0xac>)
 8008f1a:	481d      	ldr	r0, [pc, #116]	; (8008f90 <__pow5mult+0xb0>)
 8008f1c:	f000 fce0 	bl	80098e0 <__assert_func>
 8008f20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f24:	6004      	str	r4, [r0, #0]
 8008f26:	60c4      	str	r4, [r0, #12]
 8008f28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f30:	b94c      	cbnz	r4, 8008f46 <__pow5mult+0x66>
 8008f32:	f240 2171 	movw	r1, #625	; 0x271
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7ff ff18 	bl	8008d6c <__i2b>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f44:	6003      	str	r3, [r0, #0]
 8008f46:	f04f 0900 	mov.w	r9, #0
 8008f4a:	07eb      	lsls	r3, r5, #31
 8008f4c:	d50a      	bpl.n	8008f64 <__pow5mult+0x84>
 8008f4e:	4639      	mov	r1, r7
 8008f50:	4622      	mov	r2, r4
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ff20 	bl	8008d98 <__multiply>
 8008f58:	4680      	mov	r8, r0
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	f7ff fe01 	bl	8008b64 <_Bfree>
 8008f62:	4647      	mov	r7, r8
 8008f64:	106d      	asrs	r5, r5, #1
 8008f66:	d00b      	beq.n	8008f80 <__pow5mult+0xa0>
 8008f68:	6820      	ldr	r0, [r4, #0]
 8008f6a:	b938      	cbnz	r0, 8008f7c <__pow5mult+0x9c>
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff ff11 	bl	8008d98 <__multiply>
 8008f76:	6020      	str	r0, [r4, #0]
 8008f78:	f8c0 9000 	str.w	r9, [r0]
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	e7e4      	b.n	8008f4a <__pow5mult+0x6a>
 8008f80:	4638      	mov	r0, r7
 8008f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f86:	bf00      	nop
 8008f88:	0800d0e0 	.word	0x0800d0e0
 8008f8c:	0800ce86 	.word	0x0800ce86
 8008f90:	0800cf8c 	.word	0x0800cf8c

08008f94 <__lshift>:
 8008f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	460c      	mov	r4, r1
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	4691      	mov	r9, r2
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	6849      	ldr	r1, [r1, #4]
 8008fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008fac:	f108 0601 	add.w	r6, r8, #1
 8008fb0:	42b3      	cmp	r3, r6
 8008fb2:	db0b      	blt.n	8008fcc <__lshift+0x38>
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f7ff fd95 	bl	8008ae4 <_Balloc>
 8008fba:	4605      	mov	r5, r0
 8008fbc:	b948      	cbnz	r0, 8008fd2 <__lshift+0x3e>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008fc4:	4b27      	ldr	r3, [pc, #156]	; (8009064 <__lshift+0xd0>)
 8008fc6:	4828      	ldr	r0, [pc, #160]	; (8009068 <__lshift+0xd4>)
 8008fc8:	f000 fc8a 	bl	80098e0 <__assert_func>
 8008fcc:	3101      	adds	r1, #1
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	e7ee      	b.n	8008fb0 <__lshift+0x1c>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f100 0114 	add.w	r1, r0, #20
 8008fd8:	f100 0210 	add.w	r2, r0, #16
 8008fdc:	4618      	mov	r0, r3
 8008fde:	4553      	cmp	r3, sl
 8008fe0:	db33      	blt.n	800904a <__lshift+0xb6>
 8008fe2:	6920      	ldr	r0, [r4, #16]
 8008fe4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fe8:	f104 0314 	add.w	r3, r4, #20
 8008fec:	f019 091f 	ands.w	r9, r9, #31
 8008ff0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ff4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ff8:	d02b      	beq.n	8009052 <__lshift+0xbe>
 8008ffa:	468a      	mov	sl, r1
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	fa00 f009 	lsl.w	r0, r0, r9
 8009008:	4302      	orrs	r2, r0
 800900a:	f84a 2b04 	str.w	r2, [sl], #4
 800900e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009012:	459c      	cmp	ip, r3
 8009014:	fa22 f20e 	lsr.w	r2, r2, lr
 8009018:	d8f3      	bhi.n	8009002 <__lshift+0x6e>
 800901a:	ebac 0304 	sub.w	r3, ip, r4
 800901e:	3b15      	subs	r3, #21
 8009020:	f023 0303 	bic.w	r3, r3, #3
 8009024:	3304      	adds	r3, #4
 8009026:	f104 0015 	add.w	r0, r4, #21
 800902a:	4584      	cmp	ip, r0
 800902c:	bf38      	it	cc
 800902e:	2304      	movcc	r3, #4
 8009030:	50ca      	str	r2, [r1, r3]
 8009032:	b10a      	cbz	r2, 8009038 <__lshift+0xa4>
 8009034:	f108 0602 	add.w	r6, r8, #2
 8009038:	3e01      	subs	r6, #1
 800903a:	4638      	mov	r0, r7
 800903c:	4621      	mov	r1, r4
 800903e:	612e      	str	r6, [r5, #16]
 8009040:	f7ff fd90 	bl	8008b64 <_Bfree>
 8009044:	4628      	mov	r0, r5
 8009046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904a:	f842 0f04 	str.w	r0, [r2, #4]!
 800904e:	3301      	adds	r3, #1
 8009050:	e7c5      	b.n	8008fde <__lshift+0x4a>
 8009052:	3904      	subs	r1, #4
 8009054:	f853 2b04 	ldr.w	r2, [r3], #4
 8009058:	459c      	cmp	ip, r3
 800905a:	f841 2f04 	str.w	r2, [r1, #4]!
 800905e:	d8f9      	bhi.n	8009054 <__lshift+0xc0>
 8009060:	e7ea      	b.n	8009038 <__lshift+0xa4>
 8009062:	bf00      	nop
 8009064:	0800cefc 	.word	0x0800cefc
 8009068:	0800cf8c 	.word	0x0800cf8c

0800906c <__mcmp>:
 800906c:	4603      	mov	r3, r0
 800906e:	690a      	ldr	r2, [r1, #16]
 8009070:	6900      	ldr	r0, [r0, #16]
 8009072:	b530      	push	{r4, r5, lr}
 8009074:	1a80      	subs	r0, r0, r2
 8009076:	d10d      	bne.n	8009094 <__mcmp+0x28>
 8009078:	3314      	adds	r3, #20
 800907a:	3114      	adds	r1, #20
 800907c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009080:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009084:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009088:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800908c:	4295      	cmp	r5, r2
 800908e:	d002      	beq.n	8009096 <__mcmp+0x2a>
 8009090:	d304      	bcc.n	800909c <__mcmp+0x30>
 8009092:	2001      	movs	r0, #1
 8009094:	bd30      	pop	{r4, r5, pc}
 8009096:	42a3      	cmp	r3, r4
 8009098:	d3f4      	bcc.n	8009084 <__mcmp+0x18>
 800909a:	e7fb      	b.n	8009094 <__mcmp+0x28>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e7f8      	b.n	8009094 <__mcmp+0x28>
	...

080090a4 <__mdiff>:
 80090a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	4606      	mov	r6, r0
 80090ac:	4611      	mov	r1, r2
 80090ae:	4620      	mov	r0, r4
 80090b0:	4692      	mov	sl, r2
 80090b2:	f7ff ffdb 	bl	800906c <__mcmp>
 80090b6:	1e05      	subs	r5, r0, #0
 80090b8:	d111      	bne.n	80090de <__mdiff+0x3a>
 80090ba:	4629      	mov	r1, r5
 80090bc:	4630      	mov	r0, r6
 80090be:	f7ff fd11 	bl	8008ae4 <_Balloc>
 80090c2:	4602      	mov	r2, r0
 80090c4:	b928      	cbnz	r0, 80090d2 <__mdiff+0x2e>
 80090c6:	f240 2132 	movw	r1, #562	; 0x232
 80090ca:	4b3c      	ldr	r3, [pc, #240]	; (80091bc <__mdiff+0x118>)
 80090cc:	483c      	ldr	r0, [pc, #240]	; (80091c0 <__mdiff+0x11c>)
 80090ce:	f000 fc07 	bl	80098e0 <__assert_func>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090d8:	4610      	mov	r0, r2
 80090da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090de:	bfa4      	itt	ge
 80090e0:	4653      	movge	r3, sl
 80090e2:	46a2      	movge	sl, r4
 80090e4:	4630      	mov	r0, r6
 80090e6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80090ea:	bfa6      	itte	ge
 80090ec:	461c      	movge	r4, r3
 80090ee:	2500      	movge	r5, #0
 80090f0:	2501      	movlt	r5, #1
 80090f2:	f7ff fcf7 	bl	8008ae4 <_Balloc>
 80090f6:	4602      	mov	r2, r0
 80090f8:	b918      	cbnz	r0, 8009102 <__mdiff+0x5e>
 80090fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80090fe:	4b2f      	ldr	r3, [pc, #188]	; (80091bc <__mdiff+0x118>)
 8009100:	e7e4      	b.n	80090cc <__mdiff+0x28>
 8009102:	f100 0814 	add.w	r8, r0, #20
 8009106:	f8da 7010 	ldr.w	r7, [sl, #16]
 800910a:	60c5      	str	r5, [r0, #12]
 800910c:	f04f 0c00 	mov.w	ip, #0
 8009110:	f10a 0514 	add.w	r5, sl, #20
 8009114:	f10a 0010 	add.w	r0, sl, #16
 8009118:	46c2      	mov	sl, r8
 800911a:	6926      	ldr	r6, [r4, #16]
 800911c:	f104 0914 	add.w	r9, r4, #20
 8009120:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009124:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009128:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800912c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009130:	fa1f f18b 	uxth.w	r1, fp
 8009134:	4461      	add	r1, ip
 8009136:	fa1f fc83 	uxth.w	ip, r3
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	eba1 010c 	sub.w	r1, r1, ip
 8009140:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009144:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009148:	b289      	uxth	r1, r1
 800914a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800914e:	454e      	cmp	r6, r9
 8009150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009154:	f84a 3b04 	str.w	r3, [sl], #4
 8009158:	d8e6      	bhi.n	8009128 <__mdiff+0x84>
 800915a:	1b33      	subs	r3, r6, r4
 800915c:	3b15      	subs	r3, #21
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	3415      	adds	r4, #21
 8009164:	3304      	adds	r3, #4
 8009166:	42a6      	cmp	r6, r4
 8009168:	bf38      	it	cc
 800916a:	2304      	movcc	r3, #4
 800916c:	441d      	add	r5, r3
 800916e:	4443      	add	r3, r8
 8009170:	461e      	mov	r6, r3
 8009172:	462c      	mov	r4, r5
 8009174:	4574      	cmp	r4, lr
 8009176:	d30e      	bcc.n	8009196 <__mdiff+0xf2>
 8009178:	f10e 0103 	add.w	r1, lr, #3
 800917c:	1b49      	subs	r1, r1, r5
 800917e:	f021 0103 	bic.w	r1, r1, #3
 8009182:	3d03      	subs	r5, #3
 8009184:	45ae      	cmp	lr, r5
 8009186:	bf38      	it	cc
 8009188:	2100      	movcc	r1, #0
 800918a:	4419      	add	r1, r3
 800918c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009190:	b18b      	cbz	r3, 80091b6 <__mdiff+0x112>
 8009192:	6117      	str	r7, [r2, #16]
 8009194:	e7a0      	b.n	80090d8 <__mdiff+0x34>
 8009196:	f854 8b04 	ldr.w	r8, [r4], #4
 800919a:	fa1f f188 	uxth.w	r1, r8
 800919e:	4461      	add	r1, ip
 80091a0:	1408      	asrs	r0, r1, #16
 80091a2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80091a6:	b289      	uxth	r1, r1
 80091a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80091ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091b0:	f846 1b04 	str.w	r1, [r6], #4
 80091b4:	e7de      	b.n	8009174 <__mdiff+0xd0>
 80091b6:	3f01      	subs	r7, #1
 80091b8:	e7e8      	b.n	800918c <__mdiff+0xe8>
 80091ba:	bf00      	nop
 80091bc:	0800cefc 	.word	0x0800cefc
 80091c0:	0800cf8c 	.word	0x0800cf8c

080091c4 <__ulp>:
 80091c4:	4b11      	ldr	r3, [pc, #68]	; (800920c <__ulp+0x48>)
 80091c6:	400b      	ands	r3, r1
 80091c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd02      	ble.n	80091d6 <__ulp+0x12>
 80091d0:	2000      	movs	r0, #0
 80091d2:	4619      	mov	r1, r3
 80091d4:	4770      	bx	lr
 80091d6:	425b      	negs	r3, r3
 80091d8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80091dc:	f04f 0000 	mov.w	r0, #0
 80091e0:	f04f 0100 	mov.w	r1, #0
 80091e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80091e8:	da04      	bge.n	80091f4 <__ulp+0x30>
 80091ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091ee:	fa43 f102 	asr.w	r1, r3, r2
 80091f2:	4770      	bx	lr
 80091f4:	f1a2 0314 	sub.w	r3, r2, #20
 80091f8:	2b1e      	cmp	r3, #30
 80091fa:	bfd6      	itet	le
 80091fc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009200:	2301      	movgt	r3, #1
 8009202:	fa22 f303 	lsrle.w	r3, r2, r3
 8009206:	4618      	mov	r0, r3
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	7ff00000 	.word	0x7ff00000

08009210 <__b2d>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	6907      	ldr	r7, [r0, #16]
 8009216:	f100 0914 	add.w	r9, r0, #20
 800921a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800921e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009222:	f1a7 0804 	sub.w	r8, r7, #4
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff fd52 	bl	8008cd0 <__hi0bits>
 800922c:	f1c0 0320 	rsb	r3, r0, #32
 8009230:	280a      	cmp	r0, #10
 8009232:	600b      	str	r3, [r1, #0]
 8009234:	491f      	ldr	r1, [pc, #124]	; (80092b4 <__b2d+0xa4>)
 8009236:	dc17      	bgt.n	8009268 <__b2d+0x58>
 8009238:	45c1      	cmp	r9, r8
 800923a:	bf28      	it	cs
 800923c:	2200      	movcs	r2, #0
 800923e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009242:	fa26 f30c 	lsr.w	r3, r6, ip
 8009246:	bf38      	it	cc
 8009248:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800924c:	ea43 0501 	orr.w	r5, r3, r1
 8009250:	f100 0315 	add.w	r3, r0, #21
 8009254:	fa06 f303 	lsl.w	r3, r6, r3
 8009258:	fa22 f20c 	lsr.w	r2, r2, ip
 800925c:	ea43 0402 	orr.w	r4, r3, r2
 8009260:	4620      	mov	r0, r4
 8009262:	4629      	mov	r1, r5
 8009264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009268:	45c1      	cmp	r9, r8
 800926a:	bf2e      	itee	cs
 800926c:	2200      	movcs	r2, #0
 800926e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009272:	f1a7 0808 	subcc.w	r8, r7, #8
 8009276:	f1b0 030b 	subs.w	r3, r0, #11
 800927a:	d016      	beq.n	80092aa <__b2d+0x9a>
 800927c:	f1c3 0720 	rsb	r7, r3, #32
 8009280:	fa22 f107 	lsr.w	r1, r2, r7
 8009284:	45c8      	cmp	r8, r9
 8009286:	fa06 f603 	lsl.w	r6, r6, r3
 800928a:	ea46 0601 	orr.w	r6, r6, r1
 800928e:	bf94      	ite	ls
 8009290:	2100      	movls	r1, #0
 8009292:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009296:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800929a:	fa02 f003 	lsl.w	r0, r2, r3
 800929e:	40f9      	lsrs	r1, r7
 80092a0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80092a4:	ea40 0401 	orr.w	r4, r0, r1
 80092a8:	e7da      	b.n	8009260 <__b2d+0x50>
 80092aa:	4614      	mov	r4, r2
 80092ac:	ea46 0501 	orr.w	r5, r6, r1
 80092b0:	e7d6      	b.n	8009260 <__b2d+0x50>
 80092b2:	bf00      	nop
 80092b4:	3ff00000 	.word	0x3ff00000

080092b8 <__d2b>:
 80092b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092bc:	2101      	movs	r1, #1
 80092be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80092c2:	4690      	mov	r8, r2
 80092c4:	461d      	mov	r5, r3
 80092c6:	f7ff fc0d 	bl	8008ae4 <_Balloc>
 80092ca:	4604      	mov	r4, r0
 80092cc:	b930      	cbnz	r0, 80092dc <__d2b+0x24>
 80092ce:	4602      	mov	r2, r0
 80092d0:	f240 310a 	movw	r1, #778	; 0x30a
 80092d4:	4b24      	ldr	r3, [pc, #144]	; (8009368 <__d2b+0xb0>)
 80092d6:	4825      	ldr	r0, [pc, #148]	; (800936c <__d2b+0xb4>)
 80092d8:	f000 fb02 	bl	80098e0 <__assert_func>
 80092dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80092e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80092e4:	bb2d      	cbnz	r5, 8009332 <__d2b+0x7a>
 80092e6:	9301      	str	r3, [sp, #4]
 80092e8:	f1b8 0300 	subs.w	r3, r8, #0
 80092ec:	d026      	beq.n	800933c <__d2b+0x84>
 80092ee:	4668      	mov	r0, sp
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	f7ff fd0d 	bl	8008d10 <__lo0bits>
 80092f6:	9900      	ldr	r1, [sp, #0]
 80092f8:	b1f0      	cbz	r0, 8009338 <__d2b+0x80>
 80092fa:	9a01      	ldr	r2, [sp, #4]
 80092fc:	f1c0 0320 	rsb	r3, r0, #32
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	430b      	orrs	r3, r1
 8009306:	40c2      	lsrs	r2, r0
 8009308:	6163      	str	r3, [r4, #20]
 800930a:	9201      	str	r2, [sp, #4]
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	bf14      	ite	ne
 8009312:	2102      	movne	r1, #2
 8009314:	2101      	moveq	r1, #1
 8009316:	61a3      	str	r3, [r4, #24]
 8009318:	6121      	str	r1, [r4, #16]
 800931a:	b1c5      	cbz	r5, 800934e <__d2b+0x96>
 800931c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009320:	4405      	add	r5, r0
 8009322:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009326:	603d      	str	r5, [r7, #0]
 8009328:	6030      	str	r0, [r6, #0]
 800932a:	4620      	mov	r0, r4
 800932c:	b002      	add	sp, #8
 800932e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009332:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009336:	e7d6      	b.n	80092e6 <__d2b+0x2e>
 8009338:	6161      	str	r1, [r4, #20]
 800933a:	e7e7      	b.n	800930c <__d2b+0x54>
 800933c:	a801      	add	r0, sp, #4
 800933e:	f7ff fce7 	bl	8008d10 <__lo0bits>
 8009342:	2101      	movs	r1, #1
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	6121      	str	r1, [r4, #16]
 8009348:	6163      	str	r3, [r4, #20]
 800934a:	3020      	adds	r0, #32
 800934c:	e7e5      	b.n	800931a <__d2b+0x62>
 800934e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009352:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009356:	6038      	str	r0, [r7, #0]
 8009358:	6918      	ldr	r0, [r3, #16]
 800935a:	f7ff fcb9 	bl	8008cd0 <__hi0bits>
 800935e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009362:	6031      	str	r1, [r6, #0]
 8009364:	e7e1      	b.n	800932a <__d2b+0x72>
 8009366:	bf00      	nop
 8009368:	0800cefc 	.word	0x0800cefc
 800936c:	0800cf8c 	.word	0x0800cf8c

08009370 <__ratio>:
 8009370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	4688      	mov	r8, r1
 8009376:	4669      	mov	r1, sp
 8009378:	4681      	mov	r9, r0
 800937a:	f7ff ff49 	bl	8009210 <__b2d>
 800937e:	460f      	mov	r7, r1
 8009380:	4604      	mov	r4, r0
 8009382:	460d      	mov	r5, r1
 8009384:	4640      	mov	r0, r8
 8009386:	a901      	add	r1, sp, #4
 8009388:	f7ff ff42 	bl	8009210 <__b2d>
 800938c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009390:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009394:	468b      	mov	fp, r1
 8009396:	eba3 0c02 	sub.w	ip, r3, r2
 800939a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfd5      	itete	le
 80093a8:	460a      	movle	r2, r1
 80093aa:	462a      	movgt	r2, r5
 80093ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80093b0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80093b4:	bfd8      	it	le
 80093b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80093ba:	465b      	mov	r3, fp
 80093bc:	4602      	mov	r2, r0
 80093be:	4639      	mov	r1, r7
 80093c0:	4620      	mov	r0, r4
 80093c2:	f7f7 fa67 	bl	8000894 <__aeabi_ddiv>
 80093c6:	b003      	add	sp, #12
 80093c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093cc <__copybits>:
 80093cc:	3901      	subs	r1, #1
 80093ce:	b570      	push	{r4, r5, r6, lr}
 80093d0:	1149      	asrs	r1, r1, #5
 80093d2:	6914      	ldr	r4, [r2, #16]
 80093d4:	3101      	adds	r1, #1
 80093d6:	f102 0314 	add.w	r3, r2, #20
 80093da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80093de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80093e2:	1f05      	subs	r5, r0, #4
 80093e4:	42a3      	cmp	r3, r4
 80093e6:	d30c      	bcc.n	8009402 <__copybits+0x36>
 80093e8:	1aa3      	subs	r3, r4, r2
 80093ea:	3b11      	subs	r3, #17
 80093ec:	f023 0303 	bic.w	r3, r3, #3
 80093f0:	3211      	adds	r2, #17
 80093f2:	42a2      	cmp	r2, r4
 80093f4:	bf88      	it	hi
 80093f6:	2300      	movhi	r3, #0
 80093f8:	4418      	add	r0, r3
 80093fa:	2300      	movs	r3, #0
 80093fc:	4288      	cmp	r0, r1
 80093fe:	d305      	bcc.n	800940c <__copybits+0x40>
 8009400:	bd70      	pop	{r4, r5, r6, pc}
 8009402:	f853 6b04 	ldr.w	r6, [r3], #4
 8009406:	f845 6f04 	str.w	r6, [r5, #4]!
 800940a:	e7eb      	b.n	80093e4 <__copybits+0x18>
 800940c:	f840 3b04 	str.w	r3, [r0], #4
 8009410:	e7f4      	b.n	80093fc <__copybits+0x30>

08009412 <__any_on>:
 8009412:	f100 0214 	add.w	r2, r0, #20
 8009416:	6900      	ldr	r0, [r0, #16]
 8009418:	114b      	asrs	r3, r1, #5
 800941a:	4298      	cmp	r0, r3
 800941c:	b510      	push	{r4, lr}
 800941e:	db11      	blt.n	8009444 <__any_on+0x32>
 8009420:	dd0a      	ble.n	8009438 <__any_on+0x26>
 8009422:	f011 011f 	ands.w	r1, r1, #31
 8009426:	d007      	beq.n	8009438 <__any_on+0x26>
 8009428:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800942c:	fa24 f001 	lsr.w	r0, r4, r1
 8009430:	fa00 f101 	lsl.w	r1, r0, r1
 8009434:	428c      	cmp	r4, r1
 8009436:	d10b      	bne.n	8009450 <__any_on+0x3e>
 8009438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800943c:	4293      	cmp	r3, r2
 800943e:	d803      	bhi.n	8009448 <__any_on+0x36>
 8009440:	2000      	movs	r0, #0
 8009442:	bd10      	pop	{r4, pc}
 8009444:	4603      	mov	r3, r0
 8009446:	e7f7      	b.n	8009438 <__any_on+0x26>
 8009448:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800944c:	2900      	cmp	r1, #0
 800944e:	d0f5      	beq.n	800943c <__any_on+0x2a>
 8009450:	2001      	movs	r0, #1
 8009452:	e7f6      	b.n	8009442 <__any_on+0x30>

08009454 <_calloc_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	fb02 f501 	mul.w	r5, r2, r1
 800945a:	4629      	mov	r1, r5
 800945c:	f000 f854 	bl	8009508 <_malloc_r>
 8009460:	4604      	mov	r4, r0
 8009462:	b118      	cbz	r0, 800946c <_calloc_r+0x18>
 8009464:	462a      	mov	r2, r5
 8009466:	2100      	movs	r1, #0
 8009468:	f7fc fbdc 	bl	8005c24 <memset>
 800946c:	4620      	mov	r0, r4
 800946e:	bd38      	pop	{r3, r4, r5, pc}

08009470 <_free_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4605      	mov	r5, r0
 8009474:	2900      	cmp	r1, #0
 8009476:	d043      	beq.n	8009500 <_free_r+0x90>
 8009478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947c:	1f0c      	subs	r4, r1, #4
 800947e:	2b00      	cmp	r3, #0
 8009480:	bfb8      	it	lt
 8009482:	18e4      	addlt	r4, r4, r3
 8009484:	f000 fa76 	bl	8009974 <__malloc_lock>
 8009488:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <_free_r+0x94>)
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	4610      	mov	r0, r2
 800948e:	b933      	cbnz	r3, 800949e <_free_r+0x2e>
 8009490:	6063      	str	r3, [r4, #4]
 8009492:	6014      	str	r4, [r2, #0]
 8009494:	4628      	mov	r0, r5
 8009496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800949a:	f000 ba71 	b.w	8009980 <__malloc_unlock>
 800949e:	42a3      	cmp	r3, r4
 80094a0:	d90a      	bls.n	80094b8 <_free_r+0x48>
 80094a2:	6821      	ldr	r1, [r4, #0]
 80094a4:	1862      	adds	r2, r4, r1
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bf01      	itttt	eq
 80094aa:	681a      	ldreq	r2, [r3, #0]
 80094ac:	685b      	ldreq	r3, [r3, #4]
 80094ae:	1852      	addeq	r2, r2, r1
 80094b0:	6022      	streq	r2, [r4, #0]
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	6004      	str	r4, [r0, #0]
 80094b6:	e7ed      	b.n	8009494 <_free_r+0x24>
 80094b8:	461a      	mov	r2, r3
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	b10b      	cbz	r3, 80094c2 <_free_r+0x52>
 80094be:	42a3      	cmp	r3, r4
 80094c0:	d9fa      	bls.n	80094b8 <_free_r+0x48>
 80094c2:	6811      	ldr	r1, [r2, #0]
 80094c4:	1850      	adds	r0, r2, r1
 80094c6:	42a0      	cmp	r0, r4
 80094c8:	d10b      	bne.n	80094e2 <_free_r+0x72>
 80094ca:	6820      	ldr	r0, [r4, #0]
 80094cc:	4401      	add	r1, r0
 80094ce:	1850      	adds	r0, r2, r1
 80094d0:	4283      	cmp	r3, r0
 80094d2:	6011      	str	r1, [r2, #0]
 80094d4:	d1de      	bne.n	8009494 <_free_r+0x24>
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4401      	add	r1, r0
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	6053      	str	r3, [r2, #4]
 80094e0:	e7d8      	b.n	8009494 <_free_r+0x24>
 80094e2:	d902      	bls.n	80094ea <_free_r+0x7a>
 80094e4:	230c      	movs	r3, #12
 80094e6:	602b      	str	r3, [r5, #0]
 80094e8:	e7d4      	b.n	8009494 <_free_r+0x24>
 80094ea:	6820      	ldr	r0, [r4, #0]
 80094ec:	1821      	adds	r1, r4, r0
 80094ee:	428b      	cmp	r3, r1
 80094f0:	bf01      	itttt	eq
 80094f2:	6819      	ldreq	r1, [r3, #0]
 80094f4:	685b      	ldreq	r3, [r3, #4]
 80094f6:	1809      	addeq	r1, r1, r0
 80094f8:	6021      	streq	r1, [r4, #0]
 80094fa:	6063      	str	r3, [r4, #4]
 80094fc:	6054      	str	r4, [r2, #4]
 80094fe:	e7c9      	b.n	8009494 <_free_r+0x24>
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	bf00      	nop
 8009504:	20000640 	.word	0x20000640

08009508 <_malloc_r>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	1ccd      	adds	r5, r1, #3
 800950c:	f025 0503 	bic.w	r5, r5, #3
 8009510:	3508      	adds	r5, #8
 8009512:	2d0c      	cmp	r5, #12
 8009514:	bf38      	it	cc
 8009516:	250c      	movcc	r5, #12
 8009518:	2d00      	cmp	r5, #0
 800951a:	4606      	mov	r6, r0
 800951c:	db01      	blt.n	8009522 <_malloc_r+0x1a>
 800951e:	42a9      	cmp	r1, r5
 8009520:	d903      	bls.n	800952a <_malloc_r+0x22>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	2000      	movs	r0, #0
 8009528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952a:	f000 fa23 	bl	8009974 <__malloc_lock>
 800952e:	4921      	ldr	r1, [pc, #132]	; (80095b4 <_malloc_r+0xac>)
 8009530:	680a      	ldr	r2, [r1, #0]
 8009532:	4614      	mov	r4, r2
 8009534:	b99c      	cbnz	r4, 800955e <_malloc_r+0x56>
 8009536:	4f20      	ldr	r7, [pc, #128]	; (80095b8 <_malloc_r+0xb0>)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	b923      	cbnz	r3, 8009546 <_malloc_r+0x3e>
 800953c:	4621      	mov	r1, r4
 800953e:	4630      	mov	r0, r6
 8009540:	f000 f99e 	bl	8009880 <_sbrk_r>
 8009544:	6038      	str	r0, [r7, #0]
 8009546:	4629      	mov	r1, r5
 8009548:	4630      	mov	r0, r6
 800954a:	f000 f999 	bl	8009880 <_sbrk_r>
 800954e:	1c43      	adds	r3, r0, #1
 8009550:	d123      	bne.n	800959a <_malloc_r+0x92>
 8009552:	230c      	movs	r3, #12
 8009554:	4630      	mov	r0, r6
 8009556:	6033      	str	r3, [r6, #0]
 8009558:	f000 fa12 	bl	8009980 <__malloc_unlock>
 800955c:	e7e3      	b.n	8009526 <_malloc_r+0x1e>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	1b5b      	subs	r3, r3, r5
 8009562:	d417      	bmi.n	8009594 <_malloc_r+0x8c>
 8009564:	2b0b      	cmp	r3, #11
 8009566:	d903      	bls.n	8009570 <_malloc_r+0x68>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	441c      	add	r4, r3
 800956c:	6025      	str	r5, [r4, #0]
 800956e:	e004      	b.n	800957a <_malloc_r+0x72>
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	42a2      	cmp	r2, r4
 8009574:	bf0c      	ite	eq
 8009576:	600b      	streq	r3, [r1, #0]
 8009578:	6053      	strne	r3, [r2, #4]
 800957a:	4630      	mov	r0, r6
 800957c:	f000 fa00 	bl	8009980 <__malloc_unlock>
 8009580:	f104 000b 	add.w	r0, r4, #11
 8009584:	1d23      	adds	r3, r4, #4
 8009586:	f020 0007 	bic.w	r0, r0, #7
 800958a:	1ac2      	subs	r2, r0, r3
 800958c:	d0cc      	beq.n	8009528 <_malloc_r+0x20>
 800958e:	1a1b      	subs	r3, r3, r0
 8009590:	50a3      	str	r3, [r4, r2]
 8009592:	e7c9      	b.n	8009528 <_malloc_r+0x20>
 8009594:	4622      	mov	r2, r4
 8009596:	6864      	ldr	r4, [r4, #4]
 8009598:	e7cc      	b.n	8009534 <_malloc_r+0x2c>
 800959a:	1cc4      	adds	r4, r0, #3
 800959c:	f024 0403 	bic.w	r4, r4, #3
 80095a0:	42a0      	cmp	r0, r4
 80095a2:	d0e3      	beq.n	800956c <_malloc_r+0x64>
 80095a4:	1a21      	subs	r1, r4, r0
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f96a 	bl	8009880 <_sbrk_r>
 80095ac:	3001      	adds	r0, #1
 80095ae:	d1dd      	bne.n	800956c <_malloc_r+0x64>
 80095b0:	e7cf      	b.n	8009552 <_malloc_r+0x4a>
 80095b2:	bf00      	nop
 80095b4:	20000640 	.word	0x20000640
 80095b8:	20000644 	.word	0x20000644

080095bc <__ssputs_r>:
 80095bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	688e      	ldr	r6, [r1, #8]
 80095c2:	4682      	mov	sl, r0
 80095c4:	429e      	cmp	r6, r3
 80095c6:	460c      	mov	r4, r1
 80095c8:	4690      	mov	r8, r2
 80095ca:	461f      	mov	r7, r3
 80095cc:	d838      	bhi.n	8009640 <__ssputs_r+0x84>
 80095ce:	898a      	ldrh	r2, [r1, #12]
 80095d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095d4:	d032      	beq.n	800963c <__ssputs_r+0x80>
 80095d6:	6825      	ldr	r5, [r4, #0]
 80095d8:	6909      	ldr	r1, [r1, #16]
 80095da:	3301      	adds	r3, #1
 80095dc:	eba5 0901 	sub.w	r9, r5, r1
 80095e0:	6965      	ldr	r5, [r4, #20]
 80095e2:	444b      	add	r3, r9
 80095e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ec:	106d      	asrs	r5, r5, #1
 80095ee:	429d      	cmp	r5, r3
 80095f0:	bf38      	it	cc
 80095f2:	461d      	movcc	r5, r3
 80095f4:	0553      	lsls	r3, r2, #21
 80095f6:	d531      	bpl.n	800965c <__ssputs_r+0xa0>
 80095f8:	4629      	mov	r1, r5
 80095fa:	f7ff ff85 	bl	8009508 <_malloc_r>
 80095fe:	4606      	mov	r6, r0
 8009600:	b950      	cbnz	r0, 8009618 <__ssputs_r+0x5c>
 8009602:	230c      	movs	r3, #12
 8009604:	f04f 30ff 	mov.w	r0, #4294967295
 8009608:	f8ca 3000 	str.w	r3, [sl]
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	464a      	mov	r2, r9
 800961a:	6921      	ldr	r1, [r4, #16]
 800961c:	f7ff fa54 	bl	8008ac8 <memcpy>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	6126      	str	r6, [r4, #16]
 800962e:	444e      	add	r6, r9
 8009630:	6026      	str	r6, [r4, #0]
 8009632:	463e      	mov	r6, r7
 8009634:	6165      	str	r5, [r4, #20]
 8009636:	eba5 0509 	sub.w	r5, r5, r9
 800963a:	60a5      	str	r5, [r4, #8]
 800963c:	42be      	cmp	r6, r7
 800963e:	d900      	bls.n	8009642 <__ssputs_r+0x86>
 8009640:	463e      	mov	r6, r7
 8009642:	4632      	mov	r2, r6
 8009644:	4641      	mov	r1, r8
 8009646:	6820      	ldr	r0, [r4, #0]
 8009648:	f000 f97a 	bl	8009940 <memmove>
 800964c:	68a3      	ldr	r3, [r4, #8]
 800964e:	6822      	ldr	r2, [r4, #0]
 8009650:	1b9b      	subs	r3, r3, r6
 8009652:	4432      	add	r2, r6
 8009654:	2000      	movs	r0, #0
 8009656:	60a3      	str	r3, [r4, #8]
 8009658:	6022      	str	r2, [r4, #0]
 800965a:	e7db      	b.n	8009614 <__ssputs_r+0x58>
 800965c:	462a      	mov	r2, r5
 800965e:	f000 f995 	bl	800998c <_realloc_r>
 8009662:	4606      	mov	r6, r0
 8009664:	2800      	cmp	r0, #0
 8009666:	d1e1      	bne.n	800962c <__ssputs_r+0x70>
 8009668:	4650      	mov	r0, sl
 800966a:	6921      	ldr	r1, [r4, #16]
 800966c:	f7ff ff00 	bl	8009470 <_free_r>
 8009670:	e7c7      	b.n	8009602 <__ssputs_r+0x46>
	...

08009674 <_svfiprintf_r>:
 8009674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	4698      	mov	r8, r3
 800967a:	898b      	ldrh	r3, [r1, #12]
 800967c:	4607      	mov	r7, r0
 800967e:	061b      	lsls	r3, r3, #24
 8009680:	460d      	mov	r5, r1
 8009682:	4614      	mov	r4, r2
 8009684:	b09d      	sub	sp, #116	; 0x74
 8009686:	d50e      	bpl.n	80096a6 <_svfiprintf_r+0x32>
 8009688:	690b      	ldr	r3, [r1, #16]
 800968a:	b963      	cbnz	r3, 80096a6 <_svfiprintf_r+0x32>
 800968c:	2140      	movs	r1, #64	; 0x40
 800968e:	f7ff ff3b 	bl	8009508 <_malloc_r>
 8009692:	6028      	str	r0, [r5, #0]
 8009694:	6128      	str	r0, [r5, #16]
 8009696:	b920      	cbnz	r0, 80096a2 <_svfiprintf_r+0x2e>
 8009698:	230c      	movs	r3, #12
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	e0d1      	b.n	8009846 <_svfiprintf_r+0x1d2>
 80096a2:	2340      	movs	r3, #64	; 0x40
 80096a4:	616b      	str	r3, [r5, #20]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9309      	str	r3, [sp, #36]	; 0x24
 80096aa:	2320      	movs	r3, #32
 80096ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096b0:	2330      	movs	r3, #48	; 0x30
 80096b2:	f04f 0901 	mov.w	r9, #1
 80096b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009860 <_svfiprintf_r+0x1ec>
 80096be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096c2:	4623      	mov	r3, r4
 80096c4:	469a      	mov	sl, r3
 80096c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ca:	b10a      	cbz	r2, 80096d0 <_svfiprintf_r+0x5c>
 80096cc:	2a25      	cmp	r2, #37	; 0x25
 80096ce:	d1f9      	bne.n	80096c4 <_svfiprintf_r+0x50>
 80096d0:	ebba 0b04 	subs.w	fp, sl, r4
 80096d4:	d00b      	beq.n	80096ee <_svfiprintf_r+0x7a>
 80096d6:	465b      	mov	r3, fp
 80096d8:	4622      	mov	r2, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff ff6d 	bl	80095bc <__ssputs_r>
 80096e2:	3001      	adds	r0, #1
 80096e4:	f000 80aa 	beq.w	800983c <_svfiprintf_r+0x1c8>
 80096e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ea:	445a      	add	r2, fp
 80096ec:	9209      	str	r2, [sp, #36]	; 0x24
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80a2 	beq.w	800983c <_svfiprintf_r+0x1c8>
 80096f8:	2300      	movs	r3, #0
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295
 80096fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009702:	f10a 0a01 	add.w	sl, sl, #1
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	9307      	str	r3, [sp, #28]
 800970a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800970e:	931a      	str	r3, [sp, #104]	; 0x68
 8009710:	4654      	mov	r4, sl
 8009712:	2205      	movs	r2, #5
 8009714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009718:	4851      	ldr	r0, [pc, #324]	; (8009860 <_svfiprintf_r+0x1ec>)
 800971a:	f7ff f9c7 	bl	8008aac <memchr>
 800971e:	9a04      	ldr	r2, [sp, #16]
 8009720:	b9d8      	cbnz	r0, 800975a <_svfiprintf_r+0xe6>
 8009722:	06d0      	lsls	r0, r2, #27
 8009724:	bf44      	itt	mi
 8009726:	2320      	movmi	r3, #32
 8009728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972c:	0711      	lsls	r1, r2, #28
 800972e:	bf44      	itt	mi
 8009730:	232b      	movmi	r3, #43	; 0x2b
 8009732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009736:	f89a 3000 	ldrb.w	r3, [sl]
 800973a:	2b2a      	cmp	r3, #42	; 0x2a
 800973c:	d015      	beq.n	800976a <_svfiprintf_r+0xf6>
 800973e:	4654      	mov	r4, sl
 8009740:	2000      	movs	r0, #0
 8009742:	f04f 0c0a 	mov.w	ip, #10
 8009746:	9a07      	ldr	r2, [sp, #28]
 8009748:	4621      	mov	r1, r4
 800974a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800974e:	3b30      	subs	r3, #48	; 0x30
 8009750:	2b09      	cmp	r3, #9
 8009752:	d94e      	bls.n	80097f2 <_svfiprintf_r+0x17e>
 8009754:	b1b0      	cbz	r0, 8009784 <_svfiprintf_r+0x110>
 8009756:	9207      	str	r2, [sp, #28]
 8009758:	e014      	b.n	8009784 <_svfiprintf_r+0x110>
 800975a:	eba0 0308 	sub.w	r3, r0, r8
 800975e:	fa09 f303 	lsl.w	r3, r9, r3
 8009762:	4313      	orrs	r3, r2
 8009764:	46a2      	mov	sl, r4
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	e7d2      	b.n	8009710 <_svfiprintf_r+0x9c>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	1d19      	adds	r1, r3, #4
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	9103      	str	r1, [sp, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfbb      	ittet	lt
 8009776:	425b      	neglt	r3, r3
 8009778:	f042 0202 	orrlt.w	r2, r2, #2
 800977c:	9307      	strge	r3, [sp, #28]
 800977e:	9307      	strlt	r3, [sp, #28]
 8009780:	bfb8      	it	lt
 8009782:	9204      	strlt	r2, [sp, #16]
 8009784:	7823      	ldrb	r3, [r4, #0]
 8009786:	2b2e      	cmp	r3, #46	; 0x2e
 8009788:	d10c      	bne.n	80097a4 <_svfiprintf_r+0x130>
 800978a:	7863      	ldrb	r3, [r4, #1]
 800978c:	2b2a      	cmp	r3, #42	; 0x2a
 800978e:	d135      	bne.n	80097fc <_svfiprintf_r+0x188>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	3402      	adds	r4, #2
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9203      	str	r2, [sp, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfb8      	it	lt
 800979e:	f04f 33ff 	movlt.w	r3, #4294967295
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009870 <_svfiprintf_r+0x1fc>
 80097a8:	2203      	movs	r2, #3
 80097aa:	4650      	mov	r0, sl
 80097ac:	7821      	ldrb	r1, [r4, #0]
 80097ae:	f7ff f97d 	bl	8008aac <memchr>
 80097b2:	b140      	cbz	r0, 80097c6 <_svfiprintf_r+0x152>
 80097b4:	2340      	movs	r3, #64	; 0x40
 80097b6:	eba0 000a 	sub.w	r0, r0, sl
 80097ba:	fa03 f000 	lsl.w	r0, r3, r0
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3401      	adds	r4, #1
 80097c2:	4303      	orrs	r3, r0
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ca:	2206      	movs	r2, #6
 80097cc:	4825      	ldr	r0, [pc, #148]	; (8009864 <_svfiprintf_r+0x1f0>)
 80097ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097d2:	f7ff f96b 	bl	8008aac <memchr>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d038      	beq.n	800984c <_svfiprintf_r+0x1d8>
 80097da:	4b23      	ldr	r3, [pc, #140]	; (8009868 <_svfiprintf_r+0x1f4>)
 80097dc:	bb1b      	cbnz	r3, 8009826 <_svfiprintf_r+0x1b2>
 80097de:	9b03      	ldr	r3, [sp, #12]
 80097e0:	3307      	adds	r3, #7
 80097e2:	f023 0307 	bic.w	r3, r3, #7
 80097e6:	3308      	adds	r3, #8
 80097e8:	9303      	str	r3, [sp, #12]
 80097ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ec:	4433      	add	r3, r6
 80097ee:	9309      	str	r3, [sp, #36]	; 0x24
 80097f0:	e767      	b.n	80096c2 <_svfiprintf_r+0x4e>
 80097f2:	460c      	mov	r4, r1
 80097f4:	2001      	movs	r0, #1
 80097f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097fa:	e7a5      	b.n	8009748 <_svfiprintf_r+0xd4>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f04f 0c0a 	mov.w	ip, #10
 8009802:	4619      	mov	r1, r3
 8009804:	3401      	adds	r4, #1
 8009806:	9305      	str	r3, [sp, #20]
 8009808:	4620      	mov	r0, r4
 800980a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800980e:	3a30      	subs	r2, #48	; 0x30
 8009810:	2a09      	cmp	r2, #9
 8009812:	d903      	bls.n	800981c <_svfiprintf_r+0x1a8>
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0c5      	beq.n	80097a4 <_svfiprintf_r+0x130>
 8009818:	9105      	str	r1, [sp, #20]
 800981a:	e7c3      	b.n	80097a4 <_svfiprintf_r+0x130>
 800981c:	4604      	mov	r4, r0
 800981e:	2301      	movs	r3, #1
 8009820:	fb0c 2101 	mla	r1, ip, r1, r2
 8009824:	e7f0      	b.n	8009808 <_svfiprintf_r+0x194>
 8009826:	ab03      	add	r3, sp, #12
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	462a      	mov	r2, r5
 800982c:	4638      	mov	r0, r7
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <_svfiprintf_r+0x1f8>)
 8009830:	a904      	add	r1, sp, #16
 8009832:	f7fc fa9d 	bl	8005d70 <_printf_float>
 8009836:	1c42      	adds	r2, r0, #1
 8009838:	4606      	mov	r6, r0
 800983a:	d1d6      	bne.n	80097ea <_svfiprintf_r+0x176>
 800983c:	89ab      	ldrh	r3, [r5, #12]
 800983e:	065b      	lsls	r3, r3, #25
 8009840:	f53f af2c 	bmi.w	800969c <_svfiprintf_r+0x28>
 8009844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009846:	b01d      	add	sp, #116	; 0x74
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	ab03      	add	r3, sp, #12
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	462a      	mov	r2, r5
 8009852:	4638      	mov	r0, r7
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <_svfiprintf_r+0x1f8>)
 8009856:	a904      	add	r1, sp, #16
 8009858:	f7fc fd26 	bl	80062a8 <_printf_i>
 800985c:	e7eb      	b.n	8009836 <_svfiprintf_r+0x1c2>
 800985e:	bf00      	nop
 8009860:	0800d0ec 	.word	0x0800d0ec
 8009864:	0800d0f6 	.word	0x0800d0f6
 8009868:	08005d71 	.word	0x08005d71
 800986c:	080095bd 	.word	0x080095bd
 8009870:	0800d0f2 	.word	0x0800d0f2

08009874 <nan>:
 8009874:	2000      	movs	r0, #0
 8009876:	4901      	ldr	r1, [pc, #4]	; (800987c <nan+0x8>)
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	7ff80000 	.word	0x7ff80000

08009880 <_sbrk_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	2300      	movs	r3, #0
 8009884:	4d05      	ldr	r5, [pc, #20]	; (800989c <_sbrk_r+0x1c>)
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	f7f8 fe2e 	bl	80024ec <_sbrk>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_sbrk_r+0x1a>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_sbrk_r+0x1a>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	200007d4 	.word	0x200007d4

080098a0 <strncmp>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	b16a      	cbz	r2, 80098c0 <strncmp+0x20>
 80098a4:	3901      	subs	r1, #1
 80098a6:	1884      	adds	r4, r0, r2
 80098a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80098ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d103      	bne.n	80098bc <strncmp+0x1c>
 80098b4:	42a0      	cmp	r0, r4
 80098b6:	d001      	beq.n	80098bc <strncmp+0x1c>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1f5      	bne.n	80098a8 <strncmp+0x8>
 80098bc:	1a98      	subs	r0, r3, r2
 80098be:	bd10      	pop	{r4, pc}
 80098c0:	4610      	mov	r0, r2
 80098c2:	e7fc      	b.n	80098be <strncmp+0x1e>

080098c4 <__ascii_wctomb>:
 80098c4:	4603      	mov	r3, r0
 80098c6:	4608      	mov	r0, r1
 80098c8:	b141      	cbz	r1, 80098dc <__ascii_wctomb+0x18>
 80098ca:	2aff      	cmp	r2, #255	; 0xff
 80098cc:	d904      	bls.n	80098d8 <__ascii_wctomb+0x14>
 80098ce:	228a      	movs	r2, #138	; 0x8a
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	4770      	bx	lr
 80098d8:	2001      	movs	r0, #1
 80098da:	700a      	strb	r2, [r1, #0]
 80098dc:	4770      	bx	lr
	...

080098e0 <__assert_func>:
 80098e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098e2:	4614      	mov	r4, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	4b09      	ldr	r3, [pc, #36]	; (800990c <__assert_func+0x2c>)
 80098e8:	4605      	mov	r5, r0
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68d8      	ldr	r0, [r3, #12]
 80098ee:	b14c      	cbz	r4, 8009904 <__assert_func+0x24>
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <__assert_func+0x30>)
 80098f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098f6:	9100      	str	r1, [sp, #0]
 80098f8:	462b      	mov	r3, r5
 80098fa:	4906      	ldr	r1, [pc, #24]	; (8009914 <__assert_func+0x34>)
 80098fc:	f000 f80e 	bl	800991c <fiprintf>
 8009900:	f000 fa82 	bl	8009e08 <abort>
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <__assert_func+0x38>)
 8009906:	461c      	mov	r4, r3
 8009908:	e7f3      	b.n	80098f2 <__assert_func+0x12>
 800990a:	bf00      	nop
 800990c:	20000024 	.word	0x20000024
 8009910:	0800d0fd 	.word	0x0800d0fd
 8009914:	0800d10a 	.word	0x0800d10a
 8009918:	0800d138 	.word	0x0800d138

0800991c <fiprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b503      	push	{r0, r1, lr}
 8009920:	4601      	mov	r1, r0
 8009922:	ab03      	add	r3, sp, #12
 8009924:	4805      	ldr	r0, [pc, #20]	; (800993c <fiprintf+0x20>)
 8009926:	f853 2b04 	ldr.w	r2, [r3], #4
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	f000 f87b 	bl	8009a28 <_vfiprintf_r>
 8009932:	b002      	add	sp, #8
 8009934:	f85d eb04 	ldr.w	lr, [sp], #4
 8009938:	b003      	add	sp, #12
 800993a:	4770      	bx	lr
 800993c:	20000024 	.word	0x20000024

08009940 <memmove>:
 8009940:	4288      	cmp	r0, r1
 8009942:	b510      	push	{r4, lr}
 8009944:	eb01 0402 	add.w	r4, r1, r2
 8009948:	d902      	bls.n	8009950 <memmove+0x10>
 800994a:	4284      	cmp	r4, r0
 800994c:	4623      	mov	r3, r4
 800994e:	d807      	bhi.n	8009960 <memmove+0x20>
 8009950:	1e43      	subs	r3, r0, #1
 8009952:	42a1      	cmp	r1, r4
 8009954:	d008      	beq.n	8009968 <memmove+0x28>
 8009956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800995a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800995e:	e7f8      	b.n	8009952 <memmove+0x12>
 8009960:	4601      	mov	r1, r0
 8009962:	4402      	add	r2, r0
 8009964:	428a      	cmp	r2, r1
 8009966:	d100      	bne.n	800996a <memmove+0x2a>
 8009968:	bd10      	pop	{r4, pc}
 800996a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800996e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009972:	e7f7      	b.n	8009964 <memmove+0x24>

08009974 <__malloc_lock>:
 8009974:	4801      	ldr	r0, [pc, #4]	; (800997c <__malloc_lock+0x8>)
 8009976:	f000 bc07 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800997a:	bf00      	nop
 800997c:	200007dc 	.word	0x200007dc

08009980 <__malloc_unlock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_unlock+0x8>)
 8009982:	f000 bc02 	b.w	800a18a <__retarget_lock_release_recursive>
 8009986:	bf00      	nop
 8009988:	200007dc 	.word	0x200007dc

0800998c <_realloc_r>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	4607      	mov	r7, r0
 8009990:	4614      	mov	r4, r2
 8009992:	460e      	mov	r6, r1
 8009994:	b921      	cbnz	r1, 80099a0 <_realloc_r+0x14>
 8009996:	4611      	mov	r1, r2
 8009998:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800999c:	f7ff bdb4 	b.w	8009508 <_malloc_r>
 80099a0:	b922      	cbnz	r2, 80099ac <_realloc_r+0x20>
 80099a2:	f7ff fd65 	bl	8009470 <_free_r>
 80099a6:	4625      	mov	r5, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ac:	f000 fc52 	bl	800a254 <_malloc_usable_size_r>
 80099b0:	42a0      	cmp	r0, r4
 80099b2:	d20f      	bcs.n	80099d4 <_realloc_r+0x48>
 80099b4:	4621      	mov	r1, r4
 80099b6:	4638      	mov	r0, r7
 80099b8:	f7ff fda6 	bl	8009508 <_malloc_r>
 80099bc:	4605      	mov	r5, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0f2      	beq.n	80099a8 <_realloc_r+0x1c>
 80099c2:	4631      	mov	r1, r6
 80099c4:	4622      	mov	r2, r4
 80099c6:	f7ff f87f 	bl	8008ac8 <memcpy>
 80099ca:	4631      	mov	r1, r6
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff fd4f 	bl	8009470 <_free_r>
 80099d2:	e7e9      	b.n	80099a8 <_realloc_r+0x1c>
 80099d4:	4635      	mov	r5, r6
 80099d6:	e7e7      	b.n	80099a8 <_realloc_r+0x1c>

080099d8 <__sfputc_r>:
 80099d8:	6893      	ldr	r3, [r2, #8]
 80099da:	b410      	push	{r4}
 80099dc:	3b01      	subs	r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	6093      	str	r3, [r2, #8]
 80099e2:	da07      	bge.n	80099f4 <__sfputc_r+0x1c>
 80099e4:	6994      	ldr	r4, [r2, #24]
 80099e6:	42a3      	cmp	r3, r4
 80099e8:	db01      	blt.n	80099ee <__sfputc_r+0x16>
 80099ea:	290a      	cmp	r1, #10
 80099ec:	d102      	bne.n	80099f4 <__sfputc_r+0x1c>
 80099ee:	bc10      	pop	{r4}
 80099f0:	f000 b94a 	b.w	8009c88 <__swbuf_r>
 80099f4:	6813      	ldr	r3, [r2, #0]
 80099f6:	1c58      	adds	r0, r3, #1
 80099f8:	6010      	str	r0, [r2, #0]
 80099fa:	7019      	strb	r1, [r3, #0]
 80099fc:	4608      	mov	r0, r1
 80099fe:	bc10      	pop	{r4}
 8009a00:	4770      	bx	lr

08009a02 <__sfputs_r>:
 8009a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a04:	4606      	mov	r6, r0
 8009a06:	460f      	mov	r7, r1
 8009a08:	4614      	mov	r4, r2
 8009a0a:	18d5      	adds	r5, r2, r3
 8009a0c:	42ac      	cmp	r4, r5
 8009a0e:	d101      	bne.n	8009a14 <__sfputs_r+0x12>
 8009a10:	2000      	movs	r0, #0
 8009a12:	e007      	b.n	8009a24 <__sfputs_r+0x22>
 8009a14:	463a      	mov	r2, r7
 8009a16:	4630      	mov	r0, r6
 8009a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1c:	f7ff ffdc 	bl	80099d8 <__sfputc_r>
 8009a20:	1c43      	adds	r3, r0, #1
 8009a22:	d1f3      	bne.n	8009a0c <__sfputs_r+0xa>
 8009a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a28 <_vfiprintf_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	460d      	mov	r5, r1
 8009a2e:	4614      	mov	r4, r2
 8009a30:	4698      	mov	r8, r3
 8009a32:	4606      	mov	r6, r0
 8009a34:	b09d      	sub	sp, #116	; 0x74
 8009a36:	b118      	cbz	r0, 8009a40 <_vfiprintf_r+0x18>
 8009a38:	6983      	ldr	r3, [r0, #24]
 8009a3a:	b90b      	cbnz	r3, 8009a40 <_vfiprintf_r+0x18>
 8009a3c:	f000 fb06 	bl	800a04c <__sinit>
 8009a40:	4b89      	ldr	r3, [pc, #548]	; (8009c68 <_vfiprintf_r+0x240>)
 8009a42:	429d      	cmp	r5, r3
 8009a44:	d11b      	bne.n	8009a7e <_vfiprintf_r+0x56>
 8009a46:	6875      	ldr	r5, [r6, #4]
 8009a48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a4a:	07d9      	lsls	r1, r3, #31
 8009a4c:	d405      	bmi.n	8009a5a <_vfiprintf_r+0x32>
 8009a4e:	89ab      	ldrh	r3, [r5, #12]
 8009a50:	059a      	lsls	r2, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_vfiprintf_r+0x32>
 8009a54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a56:	f000 fb97 	bl	800a188 <__retarget_lock_acquire_recursive>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	071b      	lsls	r3, r3, #28
 8009a5e:	d501      	bpl.n	8009a64 <_vfiprintf_r+0x3c>
 8009a60:	692b      	ldr	r3, [r5, #16]
 8009a62:	b9eb      	cbnz	r3, 8009aa0 <_vfiprintf_r+0x78>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f000 f960 	bl	8009d2c <__swsetup_r>
 8009a6c:	b1c0      	cbz	r0, 8009aa0 <_vfiprintf_r+0x78>
 8009a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a70:	07dc      	lsls	r4, r3, #31
 8009a72:	d50e      	bpl.n	8009a92 <_vfiprintf_r+0x6a>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	b01d      	add	sp, #116	; 0x74
 8009a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7e:	4b7b      	ldr	r3, [pc, #492]	; (8009c6c <_vfiprintf_r+0x244>)
 8009a80:	429d      	cmp	r5, r3
 8009a82:	d101      	bne.n	8009a88 <_vfiprintf_r+0x60>
 8009a84:	68b5      	ldr	r5, [r6, #8]
 8009a86:	e7df      	b.n	8009a48 <_vfiprintf_r+0x20>
 8009a88:	4b79      	ldr	r3, [pc, #484]	; (8009c70 <_vfiprintf_r+0x248>)
 8009a8a:	429d      	cmp	r5, r3
 8009a8c:	bf08      	it	eq
 8009a8e:	68f5      	ldreq	r5, [r6, #12]
 8009a90:	e7da      	b.n	8009a48 <_vfiprintf_r+0x20>
 8009a92:	89ab      	ldrh	r3, [r5, #12]
 8009a94:	0598      	lsls	r0, r3, #22
 8009a96:	d4ed      	bmi.n	8009a74 <_vfiprintf_r+0x4c>
 8009a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a9a:	f000 fb76 	bl	800a18a <__retarget_lock_release_recursive>
 8009a9e:	e7e9      	b.n	8009a74 <_vfiprintf_r+0x4c>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa4:	2320      	movs	r3, #32
 8009aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aaa:	2330      	movs	r3, #48	; 0x30
 8009aac:	f04f 0901 	mov.w	r9, #1
 8009ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c74 <_vfiprintf_r+0x24c>
 8009ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abc:	4623      	mov	r3, r4
 8009abe:	469a      	mov	sl, r3
 8009ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac4:	b10a      	cbz	r2, 8009aca <_vfiprintf_r+0xa2>
 8009ac6:	2a25      	cmp	r2, #37	; 0x25
 8009ac8:	d1f9      	bne.n	8009abe <_vfiprintf_r+0x96>
 8009aca:	ebba 0b04 	subs.w	fp, sl, r4
 8009ace:	d00b      	beq.n	8009ae8 <_vfiprintf_r+0xc0>
 8009ad0:	465b      	mov	r3, fp
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f7ff ff93 	bl	8009a02 <__sfputs_r>
 8009adc:	3001      	adds	r0, #1
 8009ade:	f000 80aa 	beq.w	8009c36 <_vfiprintf_r+0x20e>
 8009ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae4:	445a      	add	r2, fp
 8009ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 80a2 	beq.w	8009c36 <_vfiprintf_r+0x20e>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295
 8009af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afc:	f10a 0a01 	add.w	sl, sl, #1
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	9307      	str	r3, [sp, #28]
 8009b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b08:	931a      	str	r3, [sp, #104]	; 0x68
 8009b0a:	4654      	mov	r4, sl
 8009b0c:	2205      	movs	r2, #5
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	4858      	ldr	r0, [pc, #352]	; (8009c74 <_vfiprintf_r+0x24c>)
 8009b14:	f7fe ffca 	bl	8008aac <memchr>
 8009b18:	9a04      	ldr	r2, [sp, #16]
 8009b1a:	b9d8      	cbnz	r0, 8009b54 <_vfiprintf_r+0x12c>
 8009b1c:	06d1      	lsls	r1, r2, #27
 8009b1e:	bf44      	itt	mi
 8009b20:	2320      	movmi	r3, #32
 8009b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b26:	0713      	lsls	r3, r2, #28
 8009b28:	bf44      	itt	mi
 8009b2a:	232b      	movmi	r3, #43	; 0x2b
 8009b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b30:	f89a 3000 	ldrb.w	r3, [sl]
 8009b34:	2b2a      	cmp	r3, #42	; 0x2a
 8009b36:	d015      	beq.n	8009b64 <_vfiprintf_r+0x13c>
 8009b38:	4654      	mov	r4, sl
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f04f 0c0a 	mov.w	ip, #10
 8009b40:	9a07      	ldr	r2, [sp, #28]
 8009b42:	4621      	mov	r1, r4
 8009b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b48:	3b30      	subs	r3, #48	; 0x30
 8009b4a:	2b09      	cmp	r3, #9
 8009b4c:	d94e      	bls.n	8009bec <_vfiprintf_r+0x1c4>
 8009b4e:	b1b0      	cbz	r0, 8009b7e <_vfiprintf_r+0x156>
 8009b50:	9207      	str	r2, [sp, #28]
 8009b52:	e014      	b.n	8009b7e <_vfiprintf_r+0x156>
 8009b54:	eba0 0308 	sub.w	r3, r0, r8
 8009b58:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	46a2      	mov	sl, r4
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	e7d2      	b.n	8009b0a <_vfiprintf_r+0xe2>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	1d19      	adds	r1, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9103      	str	r1, [sp, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfbb      	ittet	lt
 8009b70:	425b      	neglt	r3, r3
 8009b72:	f042 0202 	orrlt.w	r2, r2, #2
 8009b76:	9307      	strge	r3, [sp, #28]
 8009b78:	9307      	strlt	r3, [sp, #28]
 8009b7a:	bfb8      	it	lt
 8009b7c:	9204      	strlt	r2, [sp, #16]
 8009b7e:	7823      	ldrb	r3, [r4, #0]
 8009b80:	2b2e      	cmp	r3, #46	; 0x2e
 8009b82:	d10c      	bne.n	8009b9e <_vfiprintf_r+0x176>
 8009b84:	7863      	ldrb	r3, [r4, #1]
 8009b86:	2b2a      	cmp	r3, #42	; 0x2a
 8009b88:	d135      	bne.n	8009bf6 <_vfiprintf_r+0x1ce>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	3402      	adds	r4, #2
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	9203      	str	r2, [sp, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bfb8      	it	lt
 8009b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c84 <_vfiprintf_r+0x25c>
 8009ba2:	2203      	movs	r2, #3
 8009ba4:	4650      	mov	r0, sl
 8009ba6:	7821      	ldrb	r1, [r4, #0]
 8009ba8:	f7fe ff80 	bl	8008aac <memchr>
 8009bac:	b140      	cbz	r0, 8009bc0 <_vfiprintf_r+0x198>
 8009bae:	2340      	movs	r3, #64	; 0x40
 8009bb0:	eba0 000a 	sub.w	r0, r0, sl
 8009bb4:	fa03 f000 	lsl.w	r0, r3, r0
 8009bb8:	9b04      	ldr	r3, [sp, #16]
 8009bba:	3401      	adds	r4, #1
 8009bbc:	4303      	orrs	r3, r0
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc4:	2206      	movs	r2, #6
 8009bc6:	482c      	ldr	r0, [pc, #176]	; (8009c78 <_vfiprintf_r+0x250>)
 8009bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bcc:	f7fe ff6e 	bl	8008aac <memchr>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d03f      	beq.n	8009c54 <_vfiprintf_r+0x22c>
 8009bd4:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <_vfiprintf_r+0x254>)
 8009bd6:	bb1b      	cbnz	r3, 8009c20 <_vfiprintf_r+0x1f8>
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	3307      	adds	r3, #7
 8009bdc:	f023 0307 	bic.w	r3, r3, #7
 8009be0:	3308      	adds	r3, #8
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	443b      	add	r3, r7
 8009be8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bea:	e767      	b.n	8009abc <_vfiprintf_r+0x94>
 8009bec:	460c      	mov	r4, r1
 8009bee:	2001      	movs	r0, #1
 8009bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf4:	e7a5      	b.n	8009b42 <_vfiprintf_r+0x11a>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f04f 0c0a 	mov.w	ip, #10
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4620      	mov	r0, r4
 8009c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c08:	3a30      	subs	r2, #48	; 0x30
 8009c0a:	2a09      	cmp	r2, #9
 8009c0c:	d903      	bls.n	8009c16 <_vfiprintf_r+0x1ee>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0c5      	beq.n	8009b9e <_vfiprintf_r+0x176>
 8009c12:	9105      	str	r1, [sp, #20]
 8009c14:	e7c3      	b.n	8009b9e <_vfiprintf_r+0x176>
 8009c16:	4604      	mov	r4, r0
 8009c18:	2301      	movs	r3, #1
 8009c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c1e:	e7f0      	b.n	8009c02 <_vfiprintf_r+0x1da>
 8009c20:	ab03      	add	r3, sp, #12
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	462a      	mov	r2, r5
 8009c26:	4630      	mov	r0, r6
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <_vfiprintf_r+0x258>)
 8009c2a:	a904      	add	r1, sp, #16
 8009c2c:	f7fc f8a0 	bl	8005d70 <_printf_float>
 8009c30:	4607      	mov	r7, r0
 8009c32:	1c78      	adds	r0, r7, #1
 8009c34:	d1d6      	bne.n	8009be4 <_vfiprintf_r+0x1bc>
 8009c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c38:	07d9      	lsls	r1, r3, #31
 8009c3a:	d405      	bmi.n	8009c48 <_vfiprintf_r+0x220>
 8009c3c:	89ab      	ldrh	r3, [r5, #12]
 8009c3e:	059a      	lsls	r2, r3, #22
 8009c40:	d402      	bmi.n	8009c48 <_vfiprintf_r+0x220>
 8009c42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c44:	f000 faa1 	bl	800a18a <__retarget_lock_release_recursive>
 8009c48:	89ab      	ldrh	r3, [r5, #12]
 8009c4a:	065b      	lsls	r3, r3, #25
 8009c4c:	f53f af12 	bmi.w	8009a74 <_vfiprintf_r+0x4c>
 8009c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c52:	e711      	b.n	8009a78 <_vfiprintf_r+0x50>
 8009c54:	ab03      	add	r3, sp, #12
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	462a      	mov	r2, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <_vfiprintf_r+0x258>)
 8009c5e:	a904      	add	r1, sp, #16
 8009c60:	f7fc fb22 	bl	80062a8 <_printf_i>
 8009c64:	e7e4      	b.n	8009c30 <_vfiprintf_r+0x208>
 8009c66:	bf00      	nop
 8009c68:	0800d15c 	.word	0x0800d15c
 8009c6c:	0800d17c 	.word	0x0800d17c
 8009c70:	0800d13c 	.word	0x0800d13c
 8009c74:	0800d0ec 	.word	0x0800d0ec
 8009c78:	0800d0f6 	.word	0x0800d0f6
 8009c7c:	08005d71 	.word	0x08005d71
 8009c80:	08009a03 	.word	0x08009a03
 8009c84:	0800d0f2 	.word	0x0800d0f2

08009c88 <__swbuf_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b118      	cbz	r0, 8009c9a <__swbuf_r+0x12>
 8009c92:	6983      	ldr	r3, [r0, #24]
 8009c94:	b90b      	cbnz	r3, 8009c9a <__swbuf_r+0x12>
 8009c96:	f000 f9d9 	bl	800a04c <__sinit>
 8009c9a:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <__swbuf_r+0x98>)
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	d12b      	bne.n	8009cf8 <__swbuf_r+0x70>
 8009ca0:	686c      	ldr	r4, [r5, #4]
 8009ca2:	69a3      	ldr	r3, [r4, #24]
 8009ca4:	60a3      	str	r3, [r4, #8]
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	071a      	lsls	r2, r3, #28
 8009caa:	d52f      	bpl.n	8009d0c <__swbuf_r+0x84>
 8009cac:	6923      	ldr	r3, [r4, #16]
 8009cae:	b36b      	cbz	r3, 8009d0c <__swbuf_r+0x84>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	b2f6      	uxtb	r6, r6
 8009cb6:	1ac0      	subs	r0, r0, r3
 8009cb8:	6963      	ldr	r3, [r4, #20]
 8009cba:	4637      	mov	r7, r6
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	dc04      	bgt.n	8009cca <__swbuf_r+0x42>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f000 f92e 	bl	8009f24 <_fflush_r>
 8009cc8:	bb30      	cbnz	r0, 8009d18 <__swbuf_r+0x90>
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	3001      	adds	r0, #1
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	60a3      	str	r3, [r4, #8]
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	6022      	str	r2, [r4, #0]
 8009cd8:	701e      	strb	r6, [r3, #0]
 8009cda:	6963      	ldr	r3, [r4, #20]
 8009cdc:	4283      	cmp	r3, r0
 8009cde:	d004      	beq.n	8009cea <__swbuf_r+0x62>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d506      	bpl.n	8009cf4 <__swbuf_r+0x6c>
 8009ce6:	2e0a      	cmp	r6, #10
 8009ce8:	d104      	bne.n	8009cf4 <__swbuf_r+0x6c>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f000 f919 	bl	8009f24 <_fflush_r>
 8009cf2:	b988      	cbnz	r0, 8009d18 <__swbuf_r+0x90>
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <__swbuf_r+0x9c>)
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d101      	bne.n	8009d02 <__swbuf_r+0x7a>
 8009cfe:	68ac      	ldr	r4, [r5, #8]
 8009d00:	e7cf      	b.n	8009ca2 <__swbuf_r+0x1a>
 8009d02:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <__swbuf_r+0xa0>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	bf08      	it	eq
 8009d08:	68ec      	ldreq	r4, [r5, #12]
 8009d0a:	e7ca      	b.n	8009ca2 <__swbuf_r+0x1a>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f80c 	bl	8009d2c <__swsetup_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d0cb      	beq.n	8009cb0 <__swbuf_r+0x28>
 8009d18:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1c:	e7ea      	b.n	8009cf4 <__swbuf_r+0x6c>
 8009d1e:	bf00      	nop
 8009d20:	0800d15c 	.word	0x0800d15c
 8009d24:	0800d17c 	.word	0x0800d17c
 8009d28:	0800d13c 	.word	0x0800d13c

08009d2c <__swsetup_r>:
 8009d2c:	4b32      	ldr	r3, [pc, #200]	; (8009df8 <__swsetup_r+0xcc>)
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	b125      	cbz	r5, 8009d42 <__swsetup_r+0x16>
 8009d38:	69ab      	ldr	r3, [r5, #24]
 8009d3a:	b913      	cbnz	r3, 8009d42 <__swsetup_r+0x16>
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f000 f985 	bl	800a04c <__sinit>
 8009d42:	4b2e      	ldr	r3, [pc, #184]	; (8009dfc <__swsetup_r+0xd0>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d10f      	bne.n	8009d68 <__swsetup_r+0x3c>
 8009d48:	686c      	ldr	r4, [r5, #4]
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d50:	0719      	lsls	r1, r3, #28
 8009d52:	d42c      	bmi.n	8009dae <__swsetup_r+0x82>
 8009d54:	06dd      	lsls	r5, r3, #27
 8009d56:	d411      	bmi.n	8009d7c <__swsetup_r+0x50>
 8009d58:	2309      	movs	r3, #9
 8009d5a:	6033      	str	r3, [r6, #0]
 8009d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d60:	f04f 30ff 	mov.w	r0, #4294967295
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	e03e      	b.n	8009de6 <__swsetup_r+0xba>
 8009d68:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <__swsetup_r+0xd4>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d101      	bne.n	8009d72 <__swsetup_r+0x46>
 8009d6e:	68ac      	ldr	r4, [r5, #8]
 8009d70:	e7eb      	b.n	8009d4a <__swsetup_r+0x1e>
 8009d72:	4b24      	ldr	r3, [pc, #144]	; (8009e04 <__swsetup_r+0xd8>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	bf08      	it	eq
 8009d78:	68ec      	ldreq	r4, [r5, #12]
 8009d7a:	e7e6      	b.n	8009d4a <__swsetup_r+0x1e>
 8009d7c:	0758      	lsls	r0, r3, #29
 8009d7e:	d512      	bpl.n	8009da6 <__swsetup_r+0x7a>
 8009d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d82:	b141      	cbz	r1, 8009d96 <__swsetup_r+0x6a>
 8009d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d002      	beq.n	8009d92 <__swsetup_r+0x66>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f7ff fb6f 	bl	8009470 <_free_r>
 8009d92:	2300      	movs	r3, #0
 8009d94:	6363      	str	r3, [r4, #52]	; 0x34
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f043 0308 	orr.w	r3, r3, #8
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	b94b      	cbnz	r3, 8009dc6 <__swsetup_r+0x9a>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dbc:	d003      	beq.n	8009dc6 <__swsetup_r+0x9a>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f000 fa07 	bl	800a1d4 <__smakebuf_r>
 8009dc6:	89a0      	ldrh	r0, [r4, #12]
 8009dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dcc:	f010 0301 	ands.w	r3, r0, #1
 8009dd0:	d00a      	beq.n	8009de8 <__swsetup_r+0xbc>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	6963      	ldr	r3, [r4, #20]
 8009dd8:	425b      	negs	r3, r3
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	b943      	cbnz	r3, 8009df2 <__swsetup_r+0xc6>
 8009de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009de4:	d1ba      	bne.n	8009d5c <__swsetup_r+0x30>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	0781      	lsls	r1, r0, #30
 8009dea:	bf58      	it	pl
 8009dec:	6963      	ldrpl	r3, [r4, #20]
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	e7f4      	b.n	8009ddc <__swsetup_r+0xb0>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e7f7      	b.n	8009de6 <__swsetup_r+0xba>
 8009df6:	bf00      	nop
 8009df8:	20000024 	.word	0x20000024
 8009dfc:	0800d15c 	.word	0x0800d15c
 8009e00:	0800d17c 	.word	0x0800d17c
 8009e04:	0800d13c 	.word	0x0800d13c

08009e08 <abort>:
 8009e08:	2006      	movs	r0, #6
 8009e0a:	b508      	push	{r3, lr}
 8009e0c:	f000 fa52 	bl	800a2b4 <raise>
 8009e10:	2001      	movs	r0, #1
 8009e12:	f7f8 faf8 	bl	8002406 <_exit>
	...

08009e18 <__sflush_r>:
 8009e18:	898a      	ldrh	r2, [r1, #12]
 8009e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	4605      	mov	r5, r0
 8009e20:	0710      	lsls	r0, r2, #28
 8009e22:	460c      	mov	r4, r1
 8009e24:	d458      	bmi.n	8009ed8 <__sflush_r+0xc0>
 8009e26:	684b      	ldr	r3, [r1, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc05      	bgt.n	8009e38 <__sflush_r+0x20>
 8009e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dc02      	bgt.n	8009e38 <__sflush_r+0x20>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d0f9      	beq.n	8009e32 <__sflush_r+0x1a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e44:	682f      	ldr	r7, [r5, #0]
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	d032      	beq.n	8009eb0 <__sflush_r+0x98>
 8009e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	075a      	lsls	r2, r3, #29
 8009e50:	d505      	bpl.n	8009e5e <__sflush_r+0x46>
 8009e52:	6863      	ldr	r3, [r4, #4]
 8009e54:	1ac0      	subs	r0, r0, r3
 8009e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e58:	b10b      	cbz	r3, 8009e5e <__sflush_r+0x46>
 8009e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e5c:	1ac0      	subs	r0, r0, r3
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4602      	mov	r2, r0
 8009e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e64:	4628      	mov	r0, r5
 8009e66:	6a21      	ldr	r1, [r4, #32]
 8009e68:	47b0      	blx	r6
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	d106      	bne.n	8009e7e <__sflush_r+0x66>
 8009e70:	6829      	ldr	r1, [r5, #0]
 8009e72:	291d      	cmp	r1, #29
 8009e74:	d82c      	bhi.n	8009ed0 <__sflush_r+0xb8>
 8009e76:	4a2a      	ldr	r2, [pc, #168]	; (8009f20 <__sflush_r+0x108>)
 8009e78:	40ca      	lsrs	r2, r1
 8009e7a:	07d6      	lsls	r6, r2, #31
 8009e7c:	d528      	bpl.n	8009ed0 <__sflush_r+0xb8>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	6062      	str	r2, [r4, #4]
 8009e82:	6922      	ldr	r2, [r4, #16]
 8009e84:	04d9      	lsls	r1, r3, #19
 8009e86:	6022      	str	r2, [r4, #0]
 8009e88:	d504      	bpl.n	8009e94 <__sflush_r+0x7c>
 8009e8a:	1c42      	adds	r2, r0, #1
 8009e8c:	d101      	bne.n	8009e92 <__sflush_r+0x7a>
 8009e8e:	682b      	ldr	r3, [r5, #0]
 8009e90:	b903      	cbnz	r3, 8009e94 <__sflush_r+0x7c>
 8009e92:	6560      	str	r0, [r4, #84]	; 0x54
 8009e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e96:	602f      	str	r7, [r5, #0]
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d0ca      	beq.n	8009e32 <__sflush_r+0x1a>
 8009e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d002      	beq.n	8009eaa <__sflush_r+0x92>
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f7ff fae3 	bl	8009470 <_free_r>
 8009eaa:	2000      	movs	r0, #0
 8009eac:	6360      	str	r0, [r4, #52]	; 0x34
 8009eae:	e7c1      	b.n	8009e34 <__sflush_r+0x1c>
 8009eb0:	6a21      	ldr	r1, [r4, #32]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b0      	blx	r6
 8009eb8:	1c41      	adds	r1, r0, #1
 8009eba:	d1c7      	bne.n	8009e4c <__sflush_r+0x34>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0c4      	beq.n	8009e4c <__sflush_r+0x34>
 8009ec2:	2b1d      	cmp	r3, #29
 8009ec4:	d001      	beq.n	8009eca <__sflush_r+0xb2>
 8009ec6:	2b16      	cmp	r3, #22
 8009ec8:	d101      	bne.n	8009ece <__sflush_r+0xb6>
 8009eca:	602f      	str	r7, [r5, #0]
 8009ecc:	e7b1      	b.n	8009e32 <__sflush_r+0x1a>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	e7ad      	b.n	8009e34 <__sflush_r+0x1c>
 8009ed8:	690f      	ldr	r7, [r1, #16]
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	d0a9      	beq.n	8009e32 <__sflush_r+0x1a>
 8009ede:	0793      	lsls	r3, r2, #30
 8009ee0:	bf18      	it	ne
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	680e      	ldr	r6, [r1, #0]
 8009ee6:	bf08      	it	eq
 8009ee8:	694b      	ldreq	r3, [r1, #20]
 8009eea:	eba6 0807 	sub.w	r8, r6, r7
 8009eee:	600f      	str	r7, [r1, #0]
 8009ef0:	608b      	str	r3, [r1, #8]
 8009ef2:	f1b8 0f00 	cmp.w	r8, #0
 8009ef6:	dd9c      	ble.n	8009e32 <__sflush_r+0x1a>
 8009ef8:	4643      	mov	r3, r8
 8009efa:	463a      	mov	r2, r7
 8009efc:	4628      	mov	r0, r5
 8009efe:	6a21      	ldr	r1, [r4, #32]
 8009f00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f02:	47b0      	blx	r6
 8009f04:	2800      	cmp	r0, #0
 8009f06:	dc06      	bgt.n	8009f16 <__sflush_r+0xfe>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	e78e      	b.n	8009e34 <__sflush_r+0x1c>
 8009f16:	4407      	add	r7, r0
 8009f18:	eba8 0800 	sub.w	r8, r8, r0
 8009f1c:	e7e9      	b.n	8009ef2 <__sflush_r+0xda>
 8009f1e:	bf00      	nop
 8009f20:	20400001 	.word	0x20400001

08009f24 <_fflush_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	690b      	ldr	r3, [r1, #16]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	b913      	cbnz	r3, 8009f34 <_fflush_r+0x10>
 8009f2e:	2500      	movs	r5, #0
 8009f30:	4628      	mov	r0, r5
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	b118      	cbz	r0, 8009f3e <_fflush_r+0x1a>
 8009f36:	6983      	ldr	r3, [r0, #24]
 8009f38:	b90b      	cbnz	r3, 8009f3e <_fflush_r+0x1a>
 8009f3a:	f000 f887 	bl	800a04c <__sinit>
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <_fflush_r+0x6c>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	d11b      	bne.n	8009f7c <_fflush_r+0x58>
 8009f44:	686c      	ldr	r4, [r5, #4]
 8009f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ef      	beq.n	8009f2e <_fflush_r+0xa>
 8009f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f50:	07d0      	lsls	r0, r2, #31
 8009f52:	d404      	bmi.n	8009f5e <_fflush_r+0x3a>
 8009f54:	0599      	lsls	r1, r3, #22
 8009f56:	d402      	bmi.n	8009f5e <_fflush_r+0x3a>
 8009f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f5a:	f000 f915 	bl	800a188 <__retarget_lock_acquire_recursive>
 8009f5e:	4628      	mov	r0, r5
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7ff ff59 	bl	8009e18 <__sflush_r>
 8009f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f68:	4605      	mov	r5, r0
 8009f6a:	07da      	lsls	r2, r3, #31
 8009f6c:	d4e0      	bmi.n	8009f30 <_fflush_r+0xc>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	059b      	lsls	r3, r3, #22
 8009f72:	d4dd      	bmi.n	8009f30 <_fflush_r+0xc>
 8009f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f76:	f000 f908 	bl	800a18a <__retarget_lock_release_recursive>
 8009f7a:	e7d9      	b.n	8009f30 <_fflush_r+0xc>
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <_fflush_r+0x70>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <_fflush_r+0x62>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7df      	b.n	8009f46 <_fflush_r+0x22>
 8009f86:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <_fflush_r+0x74>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7da      	b.n	8009f46 <_fflush_r+0x22>
 8009f90:	0800d15c 	.word	0x0800d15c
 8009f94:	0800d17c 	.word	0x0800d17c
 8009f98:	0800d13c 	.word	0x0800d13c

08009f9c <std>:
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8009fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009faa:	6083      	str	r3, [r0, #8]
 8009fac:	8181      	strh	r1, [r0, #12]
 8009fae:	6643      	str	r3, [r0, #100]	; 0x64
 8009fb0:	81c2      	strh	r2, [r0, #14]
 8009fb2:	6183      	str	r3, [r0, #24]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	2208      	movs	r2, #8
 8009fb8:	305c      	adds	r0, #92	; 0x5c
 8009fba:	f7fb fe33 	bl	8005c24 <memset>
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <std+0x38>)
 8009fc0:	6224      	str	r4, [r4, #32]
 8009fc2:	6263      	str	r3, [r4, #36]	; 0x24
 8009fc4:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <std+0x3c>)
 8009fc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <std+0x40>)
 8009fca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fcc:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <std+0x44>)
 8009fce:	6323      	str	r3, [r4, #48]	; 0x30
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	bf00      	nop
 8009fd4:	0800a2ed 	.word	0x0800a2ed
 8009fd8:	0800a30f 	.word	0x0800a30f
 8009fdc:	0800a347 	.word	0x0800a347
 8009fe0:	0800a36b 	.word	0x0800a36b

08009fe4 <_cleanup_r>:
 8009fe4:	4901      	ldr	r1, [pc, #4]	; (8009fec <_cleanup_r+0x8>)
 8009fe6:	f000 b8af 	b.w	800a148 <_fwalk_reent>
 8009fea:	bf00      	nop
 8009fec:	08009f25 	.word	0x08009f25

08009ff0 <__sfmoreglue>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	2568      	movs	r5, #104	; 0x68
 8009ff4:	1e4a      	subs	r2, r1, #1
 8009ff6:	4355      	muls	r5, r2
 8009ff8:	460e      	mov	r6, r1
 8009ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ffe:	f7ff fa83 	bl	8009508 <_malloc_r>
 800a002:	4604      	mov	r4, r0
 800a004:	b140      	cbz	r0, 800a018 <__sfmoreglue+0x28>
 800a006:	2100      	movs	r1, #0
 800a008:	e9c0 1600 	strd	r1, r6, [r0]
 800a00c:	300c      	adds	r0, #12
 800a00e:	60a0      	str	r0, [r4, #8]
 800a010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a014:	f7fb fe06 	bl	8005c24 <memset>
 800a018:	4620      	mov	r0, r4
 800a01a:	bd70      	pop	{r4, r5, r6, pc}

0800a01c <__sfp_lock_acquire>:
 800a01c:	4801      	ldr	r0, [pc, #4]	; (800a024 <__sfp_lock_acquire+0x8>)
 800a01e:	f000 b8b3 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800a022:	bf00      	nop
 800a024:	200007e0 	.word	0x200007e0

0800a028 <__sfp_lock_release>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__sfp_lock_release+0x8>)
 800a02a:	f000 b8ae 	b.w	800a18a <__retarget_lock_release_recursive>
 800a02e:	bf00      	nop
 800a030:	200007e0 	.word	0x200007e0

0800a034 <__sinit_lock_acquire>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__sinit_lock_acquire+0x8>)
 800a036:	f000 b8a7 	b.w	800a188 <__retarget_lock_acquire_recursive>
 800a03a:	bf00      	nop
 800a03c:	200007db 	.word	0x200007db

0800a040 <__sinit_lock_release>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__sinit_lock_release+0x8>)
 800a042:	f000 b8a2 	b.w	800a18a <__retarget_lock_release_recursive>
 800a046:	bf00      	nop
 800a048:	200007db 	.word	0x200007db

0800a04c <__sinit>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	f7ff fff0 	bl	800a034 <__sinit_lock_acquire>
 800a054:	69a3      	ldr	r3, [r4, #24]
 800a056:	b11b      	cbz	r3, 800a060 <__sinit+0x14>
 800a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a05c:	f7ff bff0 	b.w	800a040 <__sinit_lock_release>
 800a060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a064:	6523      	str	r3, [r4, #80]	; 0x50
 800a066:	4b13      	ldr	r3, [pc, #76]	; (800a0b4 <__sinit+0x68>)
 800a068:	4a13      	ldr	r2, [pc, #76]	; (800a0b8 <__sinit+0x6c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a06e:	42a3      	cmp	r3, r4
 800a070:	bf08      	it	eq
 800a072:	2301      	moveq	r3, #1
 800a074:	4620      	mov	r0, r4
 800a076:	bf08      	it	eq
 800a078:	61a3      	streq	r3, [r4, #24]
 800a07a:	f000 f81f 	bl	800a0bc <__sfp>
 800a07e:	6060      	str	r0, [r4, #4]
 800a080:	4620      	mov	r0, r4
 800a082:	f000 f81b 	bl	800a0bc <__sfp>
 800a086:	60a0      	str	r0, [r4, #8]
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 f817 	bl	800a0bc <__sfp>
 800a08e:	2200      	movs	r2, #0
 800a090:	2104      	movs	r1, #4
 800a092:	60e0      	str	r0, [r4, #12]
 800a094:	6860      	ldr	r0, [r4, #4]
 800a096:	f7ff ff81 	bl	8009f9c <std>
 800a09a:	2201      	movs	r2, #1
 800a09c:	2109      	movs	r1, #9
 800a09e:	68a0      	ldr	r0, [r4, #8]
 800a0a0:	f7ff ff7c 	bl	8009f9c <std>
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	2112      	movs	r1, #18
 800a0a8:	68e0      	ldr	r0, [r4, #12]
 800a0aa:	f7ff ff77 	bl	8009f9c <std>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	61a3      	str	r3, [r4, #24]
 800a0b2:	e7d1      	b.n	800a058 <__sinit+0xc>
 800a0b4:	0800cce4 	.word	0x0800cce4
 800a0b8:	08009fe5 	.word	0x08009fe5

0800a0bc <__sfp>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	4607      	mov	r7, r0
 800a0c0:	f7ff ffac 	bl	800a01c <__sfp_lock_acquire>
 800a0c4:	4b1e      	ldr	r3, [pc, #120]	; (800a140 <__sfp+0x84>)
 800a0c6:	681e      	ldr	r6, [r3, #0]
 800a0c8:	69b3      	ldr	r3, [r6, #24]
 800a0ca:	b913      	cbnz	r3, 800a0d2 <__sfp+0x16>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	f7ff ffbd 	bl	800a04c <__sinit>
 800a0d2:	3648      	adds	r6, #72	; 0x48
 800a0d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	d503      	bpl.n	800a0e4 <__sfp+0x28>
 800a0dc:	6833      	ldr	r3, [r6, #0]
 800a0de:	b30b      	cbz	r3, 800a124 <__sfp+0x68>
 800a0e0:	6836      	ldr	r6, [r6, #0]
 800a0e2:	e7f7      	b.n	800a0d4 <__sfp+0x18>
 800a0e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0e8:	b9d5      	cbnz	r5, 800a120 <__sfp+0x64>
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <__sfp+0x88>)
 800a0ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0f0:	60e3      	str	r3, [r4, #12]
 800a0f2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0f4:	f000 f847 	bl	800a186 <__retarget_lock_init_recursive>
 800a0f8:	f7ff ff96 	bl	800a028 <__sfp_lock_release>
 800a0fc:	2208      	movs	r2, #8
 800a0fe:	4629      	mov	r1, r5
 800a100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a108:	6025      	str	r5, [r4, #0]
 800a10a:	61a5      	str	r5, [r4, #24]
 800a10c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a110:	f7fb fd88 	bl	8005c24 <memset>
 800a114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a11c:	4620      	mov	r0, r4
 800a11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a120:	3468      	adds	r4, #104	; 0x68
 800a122:	e7d9      	b.n	800a0d8 <__sfp+0x1c>
 800a124:	2104      	movs	r1, #4
 800a126:	4638      	mov	r0, r7
 800a128:	f7ff ff62 	bl	8009ff0 <__sfmoreglue>
 800a12c:	4604      	mov	r4, r0
 800a12e:	6030      	str	r0, [r6, #0]
 800a130:	2800      	cmp	r0, #0
 800a132:	d1d5      	bne.n	800a0e0 <__sfp+0x24>
 800a134:	f7ff ff78 	bl	800a028 <__sfp_lock_release>
 800a138:	230c      	movs	r3, #12
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	e7ee      	b.n	800a11c <__sfp+0x60>
 800a13e:	bf00      	nop
 800a140:	0800cce4 	.word	0x0800cce4
 800a144:	ffff0001 	.word	0xffff0001

0800a148 <_fwalk_reent>:
 800a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a14c:	4606      	mov	r6, r0
 800a14e:	4688      	mov	r8, r1
 800a150:	2700      	movs	r7, #0
 800a152:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a15a:	f1b9 0901 	subs.w	r9, r9, #1
 800a15e:	d505      	bpl.n	800a16c <_fwalk_reent+0x24>
 800a160:	6824      	ldr	r4, [r4, #0]
 800a162:	2c00      	cmp	r4, #0
 800a164:	d1f7      	bne.n	800a156 <_fwalk_reent+0xe>
 800a166:	4638      	mov	r0, r7
 800a168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16c:	89ab      	ldrh	r3, [r5, #12]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d907      	bls.n	800a182 <_fwalk_reent+0x3a>
 800a172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a176:	3301      	adds	r3, #1
 800a178:	d003      	beq.n	800a182 <_fwalk_reent+0x3a>
 800a17a:	4629      	mov	r1, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	47c0      	blx	r8
 800a180:	4307      	orrs	r7, r0
 800a182:	3568      	adds	r5, #104	; 0x68
 800a184:	e7e9      	b.n	800a15a <_fwalk_reent+0x12>

0800a186 <__retarget_lock_init_recursive>:
 800a186:	4770      	bx	lr

0800a188 <__retarget_lock_acquire_recursive>:
 800a188:	4770      	bx	lr

0800a18a <__retarget_lock_release_recursive>:
 800a18a:	4770      	bx	lr

0800a18c <__swhatbuf_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	460e      	mov	r6, r1
 800a190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a194:	4614      	mov	r4, r2
 800a196:	2900      	cmp	r1, #0
 800a198:	461d      	mov	r5, r3
 800a19a:	b096      	sub	sp, #88	; 0x58
 800a19c:	da07      	bge.n	800a1ae <__swhatbuf_r+0x22>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	89b3      	ldrh	r3, [r6, #12]
 800a1a4:	061a      	lsls	r2, r3, #24
 800a1a6:	d410      	bmi.n	800a1ca <__swhatbuf_r+0x3e>
 800a1a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ac:	e00e      	b.n	800a1cc <__swhatbuf_r+0x40>
 800a1ae:	466a      	mov	r2, sp
 800a1b0:	f000 f902 	bl	800a3b8 <_fstat_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	dbf2      	blt.n	800a19e <__swhatbuf_r+0x12>
 800a1b8:	9a01      	ldr	r2, [sp, #4]
 800a1ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1c2:	425a      	negs	r2, r3
 800a1c4:	415a      	adcs	r2, r3
 800a1c6:	602a      	str	r2, [r5, #0]
 800a1c8:	e7ee      	b.n	800a1a8 <__swhatbuf_r+0x1c>
 800a1ca:	2340      	movs	r3, #64	; 0x40
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	b016      	add	sp, #88	; 0x58
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}

0800a1d4 <__smakebuf_r>:
 800a1d4:	898b      	ldrh	r3, [r1, #12]
 800a1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d8:	079d      	lsls	r5, r3, #30
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	d507      	bpl.n	800a1f0 <__smakebuf_r+0x1c>
 800a1e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1e4:	6023      	str	r3, [r4, #0]
 800a1e6:	6123      	str	r3, [r4, #16]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	6163      	str	r3, [r4, #20]
 800a1ec:	b002      	add	sp, #8
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	466a      	mov	r2, sp
 800a1f2:	ab01      	add	r3, sp, #4
 800a1f4:	f7ff ffca 	bl	800a18c <__swhatbuf_r>
 800a1f8:	9900      	ldr	r1, [sp, #0]
 800a1fa:	4605      	mov	r5, r0
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	f7ff f983 	bl	8009508 <_malloc_r>
 800a202:	b948      	cbnz	r0, 800a218 <__smakebuf_r+0x44>
 800a204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a208:	059a      	lsls	r2, r3, #22
 800a20a:	d4ef      	bmi.n	800a1ec <__smakebuf_r+0x18>
 800a20c:	f023 0303 	bic.w	r3, r3, #3
 800a210:	f043 0302 	orr.w	r3, r3, #2
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	e7e3      	b.n	800a1e0 <__smakebuf_r+0xc>
 800a218:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <__smakebuf_r+0x7c>)
 800a21a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	6020      	str	r0, [r4, #0]
 800a220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a224:	81a3      	strh	r3, [r4, #12]
 800a226:	9b00      	ldr	r3, [sp, #0]
 800a228:	6120      	str	r0, [r4, #16]
 800a22a:	6163      	str	r3, [r4, #20]
 800a22c:	9b01      	ldr	r3, [sp, #4]
 800a22e:	b15b      	cbz	r3, 800a248 <__smakebuf_r+0x74>
 800a230:	4630      	mov	r0, r6
 800a232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a236:	f000 f8d1 	bl	800a3dc <_isatty_r>
 800a23a:	b128      	cbz	r0, 800a248 <__smakebuf_r+0x74>
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	89a0      	ldrh	r0, [r4, #12]
 800a24a:	4305      	orrs	r5, r0
 800a24c:	81a5      	strh	r5, [r4, #12]
 800a24e:	e7cd      	b.n	800a1ec <__smakebuf_r+0x18>
 800a250:	08009fe5 	.word	0x08009fe5

0800a254 <_malloc_usable_size_r>:
 800a254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a258:	1f18      	subs	r0, r3, #4
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bfbc      	itt	lt
 800a25e:	580b      	ldrlt	r3, [r1, r0]
 800a260:	18c0      	addlt	r0, r0, r3
 800a262:	4770      	bx	lr

0800a264 <_raise_r>:
 800a264:	291f      	cmp	r1, #31
 800a266:	b538      	push	{r3, r4, r5, lr}
 800a268:	4604      	mov	r4, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	d904      	bls.n	800a278 <_raise_r+0x14>
 800a26e:	2316      	movs	r3, #22
 800a270:	6003      	str	r3, [r0, #0]
 800a272:	f04f 30ff 	mov.w	r0, #4294967295
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a27a:	b112      	cbz	r2, 800a282 <_raise_r+0x1e>
 800a27c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a280:	b94b      	cbnz	r3, 800a296 <_raise_r+0x32>
 800a282:	4620      	mov	r0, r4
 800a284:	f000 f830 	bl	800a2e8 <_getpid_r>
 800a288:	462a      	mov	r2, r5
 800a28a:	4601      	mov	r1, r0
 800a28c:	4620      	mov	r0, r4
 800a28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a292:	f000 b817 	b.w	800a2c4 <_kill_r>
 800a296:	2b01      	cmp	r3, #1
 800a298:	d00a      	beq.n	800a2b0 <_raise_r+0x4c>
 800a29a:	1c59      	adds	r1, r3, #1
 800a29c:	d103      	bne.n	800a2a6 <_raise_r+0x42>
 800a29e:	2316      	movs	r3, #22
 800a2a0:	6003      	str	r3, [r0, #0]
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	e7e7      	b.n	800a276 <_raise_r+0x12>
 800a2a6:	2400      	movs	r4, #0
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2ae:	4798      	blx	r3
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e7e0      	b.n	800a276 <_raise_r+0x12>

0800a2b4 <raise>:
 800a2b4:	4b02      	ldr	r3, [pc, #8]	; (800a2c0 <raise+0xc>)
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f7ff bfd3 	b.w	800a264 <_raise_r>
 800a2be:	bf00      	nop
 800a2c0:	20000024 	.word	0x20000024

0800a2c4 <_kill_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	4d06      	ldr	r5, [pc, #24]	; (800a2e4 <_kill_r+0x20>)
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	f7f8 f888 	bl	80023e6 <_kill>
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	d102      	bne.n	800a2e0 <_kill_r+0x1c>
 800a2da:	682b      	ldr	r3, [r5, #0]
 800a2dc:	b103      	cbz	r3, 800a2e0 <_kill_r+0x1c>
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200007d4 	.word	0x200007d4

0800a2e8 <_getpid_r>:
 800a2e8:	f7f8 b876 	b.w	80023d8 <_getpid>

0800a2ec <__sread>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f4:	f000 f894 	bl	800a420 <_read_r>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	bfab      	itete	ge
 800a2fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a300:	181b      	addge	r3, r3, r0
 800a302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a306:	bfac      	ite	ge
 800a308:	6563      	strge	r3, [r4, #84]	; 0x54
 800a30a:	81a3      	strhlt	r3, [r4, #12]
 800a30c:	bd10      	pop	{r4, pc}

0800a30e <__swrite>:
 800a30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a312:	461f      	mov	r7, r3
 800a314:	898b      	ldrh	r3, [r1, #12]
 800a316:	4605      	mov	r5, r0
 800a318:	05db      	lsls	r3, r3, #23
 800a31a:	460c      	mov	r4, r1
 800a31c:	4616      	mov	r6, r2
 800a31e:	d505      	bpl.n	800a32c <__swrite+0x1e>
 800a320:	2302      	movs	r3, #2
 800a322:	2200      	movs	r2, #0
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	f000 f868 	bl	800a3fc <_lseek_r>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	4632      	mov	r2, r6
 800a330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	4628      	mov	r0, r5
 800a338:	463b      	mov	r3, r7
 800a33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a342:	f000 b817 	b.w	800a374 <_write_r>

0800a346 <__sseek>:
 800a346:	b510      	push	{r4, lr}
 800a348:	460c      	mov	r4, r1
 800a34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34e:	f000 f855 	bl	800a3fc <_lseek_r>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	bf15      	itete	ne
 800a358:	6560      	strne	r0, [r4, #84]	; 0x54
 800a35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a362:	81a3      	strheq	r3, [r4, #12]
 800a364:	bf18      	it	ne
 800a366:	81a3      	strhne	r3, [r4, #12]
 800a368:	bd10      	pop	{r4, pc}

0800a36a <__sclose>:
 800a36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36e:	f000 b813 	b.w	800a398 <_close_r>
	...

0800a374 <_write_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	2200      	movs	r2, #0
 800a37e:	4d05      	ldr	r5, [pc, #20]	; (800a394 <_write_r+0x20>)
 800a380:	602a      	str	r2, [r5, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	f7f8 f866 	bl	8002454 <_write>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_write_r+0x1e>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_write_r+0x1e>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	200007d4 	.word	0x200007d4

0800a398 <_close_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	2300      	movs	r3, #0
 800a39c:	4d05      	ldr	r5, [pc, #20]	; (800a3b4 <_close_r+0x1c>)
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7f8 f872 	bl	800248c <_close>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_close_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_close_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	200007d4 	.word	0x200007d4

0800a3b8 <_fstat_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4d06      	ldr	r5, [pc, #24]	; (800a3d8 <_fstat_r+0x20>)
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	f7f8 f86c 	bl	80024a2 <_fstat>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	d102      	bne.n	800a3d4 <_fstat_r+0x1c>
 800a3ce:	682b      	ldr	r3, [r5, #0]
 800a3d0:	b103      	cbz	r3, 800a3d4 <_fstat_r+0x1c>
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
 800a3d6:	bf00      	nop
 800a3d8:	200007d4 	.word	0x200007d4

0800a3dc <_isatty_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	2300      	movs	r3, #0
 800a3e0:	4d05      	ldr	r5, [pc, #20]	; (800a3f8 <_isatty_r+0x1c>)
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	f7f8 f86a 	bl	80024c0 <_isatty>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_isatty_r+0x1a>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_isatty_r+0x1a>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	200007d4 	.word	0x200007d4

0800a3fc <_lseek_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	4611      	mov	r1, r2
 800a404:	2200      	movs	r2, #0
 800a406:	4d05      	ldr	r5, [pc, #20]	; (800a41c <_lseek_r+0x20>)
 800a408:	602a      	str	r2, [r5, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	f7f8 f862 	bl	80024d4 <_lseek>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d102      	bne.n	800a41a <_lseek_r+0x1e>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b103      	cbz	r3, 800a41a <_lseek_r+0x1e>
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	200007d4 	.word	0x200007d4

0800a420 <_read_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	4608      	mov	r0, r1
 800a426:	4611      	mov	r1, r2
 800a428:	2200      	movs	r2, #0
 800a42a:	4d05      	ldr	r5, [pc, #20]	; (800a440 <_read_r+0x20>)
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f7 fff3 	bl	800241a <_read>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_read_r+0x1e>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_read_r+0x1e>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	200007d4 	.word	0x200007d4

0800a444 <_init>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	bf00      	nop
 800a448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44a:	bc08      	pop	{r3}
 800a44c:	469e      	mov	lr, r3
 800a44e:	4770      	bx	lr

0800a450 <_fini>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr
